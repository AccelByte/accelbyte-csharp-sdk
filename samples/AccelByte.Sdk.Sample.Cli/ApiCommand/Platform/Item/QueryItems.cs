// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.


using System;
using System.IO;
using System.Collections.Generic;

using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;
using AccelByte.Sdk.Sample.Cli.Command;

using AccelByte.Sdk.Api.Platform.Wrapper;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;

namespace AccelByte.Sdk.Sample.Cli.ApiCommand.Platform
{
    [SdkConsoleCommand("platform", "queryitems")]
    public class QueryItemsCommand : ISdkConsoleCommand
    {
        private AccelByteSDK _SDK;

        public string ServiceName { get { return "Platform"; } }

        public string OperationName { get { return "QueryItems"; } }

        [SdkCommandArgument("namespace")]
        public string Namespace { get; set; } = String.Empty;

        [SdkCommandArgument("activeOnly")]
        public bool? ActiveOnly { get; set; }

        [SdkCommandArgument("appType")]
        public string? AppType { get; set; }

        [SdkCommandArgument("availableDate")]
        public string? AvailableDate { get; set; }

        [SdkCommandArgument("baseAppId")]
        public string? BaseAppId { get; set; }

        [SdkCommandArgument("categoryPath")]
        public string? CategoryPath { get; set; }

        [SdkCommandArgument("features")]
        public string? Features { get; set; }

        [SdkCommandArgument("includeSubCategoryItem")]
        public bool? IncludeSubCategoryItem { get; set; }

        [SdkCommandArgument("itemType")]
        public string? ItemType { get; set; }

        [SdkCommandArgument("limit")]
        public int? Limit { get; set; }

        [SdkCommandArgument("offset")]
        public int? Offset { get; set; }

        [SdkCommandArgument("region")]
        public string? Region { get; set; }

        [SdkCommandArgument("sortBy")]
        public List<string>? SortBy { get; set; }

        [SdkCommandArgument("storeId")]
        public string? StoreId { get; set; }

        [SdkCommandArgument("tags")]
        public string? Tags { get; set; }

        [SdkCommandArgument("targetNamespace")]
        public string? TargetNamespace { get; set; }

        public QueryItemsCommand(AccelByteSDK sdk)
        {
            _SDK = sdk;
        }

        public string Run()
        {
            AccelByte.Sdk.Api.Platform.Wrapper.Item wrapper = new AccelByte.Sdk.Api.Platform.Wrapper.Item(_SDK);

            var opBuilder = AccelByte.Sdk.Api.Platform.Operation.QueryItems.Builder;

            if (ActiveOnly != null)
                opBuilder.SetActiveOnly((bool)ActiveOnly);
            if (AppType != null)
                opBuilder.SetAppType(QueryItemsAppType.NewValue(AppType));
            if (AvailableDate != null)
                opBuilder.SetAvailableDate((string)AvailableDate);
            if (BaseAppId != null)
                opBuilder.SetBaseAppId((string)BaseAppId);
            if (CategoryPath != null)
                opBuilder.SetCategoryPath((string)CategoryPath);
            if (Features != null)
                opBuilder.SetFeatures((string)Features);
            if (IncludeSubCategoryItem != null)
                opBuilder.SetIncludeSubCategoryItem((bool)IncludeSubCategoryItem);
            if (ItemType != null)
                opBuilder.SetItemType(QueryItemsItemType.NewValue(ItemType));
            if (Limit != null)
                opBuilder.SetLimit((int)Limit);
            if (Offset != null)
                opBuilder.SetOffset((int)Offset);
            if (Region != null)
                opBuilder.SetRegion((string)Region);
            if (SortBy != null)
                opBuilder.SetSortBy(QueryItemsSortBy.NewValue(SortBy));
            if (StoreId != null)
                opBuilder.SetStoreId((string)StoreId);
            if (Tags != null)
                opBuilder.SetTags((string)Tags);
            if (TargetNamespace != null)
                opBuilder.SetTargetNamespace((string)TargetNamespace);




            QueryItems operation = opBuilder.Build(
                Namespace
            );


            AccelByte.Sdk.Api.Platform.Model.FullItemPagingSlicedResult? response = wrapper.QueryItems(operation);
            if (response == null)
                return "No response from server.";

            return SdkHelper.SerializeToJson(response);
        }
    }
}