[
  {
    "op": "remove",
    "path": "/basePath"
  },
  {
    "op": "add",
    "path": "/host",
    "value": "demo.accelbyte.io"
  },
  {
    "op": "add",
    "path": "/schemes",
    "value": [
      "https"
    ]
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyRequest/properties/isDefaultOpted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyRequest/properties/shouldNotifyOnUpdate/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyRequest/properties/isMandatory/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserInfoCacheStatusResponse/properties/lastUpdatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionWithLocalizedVersionObject/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionWithLocalizedVersionObject/properties/publishedDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionWithLocalizedVersionObject/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionWithLocalizedVersionObject/properties/isInEffect/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionWithLocalizedVersionObject/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserEligibilitiesIndirectResponse/properties/isComply/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveLocalizedPolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveLocalizedPolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/isDefaultOpted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/isDefaultSelection/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/shouldNotifyOnUpdate/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyObject/properties/isMandatory/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UpdateLocalizedPolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdateLocalizedPolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdateBasePolicyResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdateBasePolicyResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveAcceptedAgreementResponse/properties/isAccepted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveAcceptedAgreementResponse/properties/signingDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveAcceptedAgreementResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveAcceptedAgreementResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveLocalizedPolicyVersionPublicResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveLocalizedPolicyVersionPublicResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveBasePolicyResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveBasePolicyResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/LocalizedPolicyVersionObject/properties/isDefaultSelection/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/LocalizedPolicyVersionObject/properties/publishedDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/LocalizedPolicyVersionObject/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/LocalizedPolicyVersionObject/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/AcceptAgreementRequest/properties/isAccepted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionObject/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionObject/properties/publishedDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionObject/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionObject/properties/isInEffect/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PolicyVersionObject/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/isDefaultOpted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/isDefaultSelection/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/shouldNotifyOnUpdate/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyPublicResponse/properties/isMandatory/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyVersionResponse/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyVersionResponse/properties/publishedDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UpdatePolicyVersionRequest/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CreateBasePolicyResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CreateBasePolicyResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserEligibilitiesResponse/properties/isAccepted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserEligibilitiesResponse/properties/isMandatory/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyVersionResponse/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyVersionResponse/properties/publishedDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyVersionResponse/properties/isInEffect/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/LegalReadinessStatusResponse/properties/isReady/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CreateLocalizedPolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CreateLocalizedPolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/isDefaultOpted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/isDefaultSelection/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/shouldNotifyOnUpdate/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyResponse/properties/isMandatory/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AcceptAgreementResponse/properties/comply/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AcceptAgreementResponse/properties/proceed/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CreatePolicyVersionRequest/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CreatePolicyVersionResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CreatePolicyVersionResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CreatePolicyVersionResponse/properties/isCommitted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyTypeResponse/properties/isNeedDocument/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyTypeResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrievePolicyTypeResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserAcceptedAgreementResponse/properties/isAccepted/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserAcceptedAgreementResponse/properties/signingDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserAcceptedAgreementResponse/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RetrieveUserAcceptedAgreementResponse/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasPermission",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE:*:LEGAL [CREATE]": "ADMIN:NAMESPACE:*:LEGAL [CREATE]",
        "ADMIN:NAMESPACE:*:LEGAL [DELETE]": "ADMIN:NAMESPACE:*:LEGAL [DELETE]",
        "ADMIN:NAMESPACE:*:LEGAL [READ]": "ADMIN:NAMESPACE:*:LEGAL [READ]",
        "ADMIN:NAMESPACE:*:LEGAL [UPDATE]": "ADMIN:NAMESPACE:*:LEGAL [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [READ]",
        "NAMESPACE:{namespace}:LEGAL [CREATE]": "NAMESPACE:{namespace}:LEGAL [CREATE]",
        "NAMESPACE:{namespace}:LEGAL [READ]": "NAMESPACE:{namespace}:LEGAL [READ]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasScope",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1versions~1{policyVersionId}~1latest"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1userInfo"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1eligibilities"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1localized-policy-versions~1{localizedPolicyVersionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1{policyId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1agreements~1policies"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1{policyId}~1default"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policy-types"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1agreements~1policies"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1agreements~1localized-policy-versions~1{localizedPolicyVersionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1eligibilities~1namespaces~1{namespace}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1agreements~1localized-policy-versions~1preferences"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1localized-policy-versions~1{localizedPolicyVersionId}~1default"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1agreements~1policies~1users~1{userId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1agreements~1policy-versions~1users"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1base-policies~1{basePolicyId}~1countries~1{countryCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1localized-policy-versions~1{localizedPolicyVersionId}~1attachments"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1{policyId}~1versions"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1users~1{userId}~1anonymization~1agreements"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1localized-policy-versions~1{localizedPolicyVersionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1localized-policy-versions~1versions~1{policyVersionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1base-policies~1{basePolicyId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1eligibilities~1namespaces~1{namespace}~1countries~1{countryCode}~1clients~1{clientId}~1users~1{userId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1versions~1{policyVersionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1agreements~1policies~1namespaces~1{namespace}~1countries~1{countryCode}~1clients~1{clientId}~1users~1{userId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1policies~1namespaces~1{namespace}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1policies~1namespaces~1{namespace}~1countries~1{countryCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1readiness"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1agreements~1policies~1users~1{userId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1policies~1countries~1{countryCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1policies~1countries~1{countryCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1policies"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1base-policies"
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1agreements~1policies~1users~1{userId}",
    "value": {
      "get": {
        "description": "This API will return all accepted Legal Agreements for specified user. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveAcceptedAgreements",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveAcceptedAgreementResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve Accepted Legal Agreements",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1eligibilities~1namespaces~1{namespace}",
    "value": {
      "get": {
        "description": "Retrieve the active policies and its conformance status by user.&lt;br&gt;This process supports cross-namespace checking, that means if the active policy already accepted by the same user in other namespace, then it will be considered as eligible.&lt;br/&gt;&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveEligibilitiesPublic",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveUserEligibilitiesResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Check User Legal Eligibility",
        "tags": [
          "Eligibilities"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1readiness",
    "value": {
      "get": {
        "description": "Readiness status defined as at least one legal basePolicy is present and having active basePolicy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "checkReadiness",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LegalReadinessStatusResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check Legal Data Readiness",
        "tags": [
          "Utility"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1userInfo",
    "value": {
      "delete": {
        "description": "&lt;b&gt;Important: GOING TO DEPRECATE&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Invalidate user info cache in agreement service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "invalidateUserInfoCache",
        "parameters": [
          {
            "description": "If null or empty, will invalidate all namespaces",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Invalidate user info cache",
        "tags": [
          "UserInfo"
        ]
      },
      "get": {
        "description": "Get user info cache last updated time per namespace.&lt;br&gt;The query parameter namespaces can be a list of namespace separated by comma.&lt;br&gt;If query parameter namespaces is empty, user info cache status for all available namespaces will be returned. &lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserInfoStatus",
        "parameters": [
          {
            "in": "query",
            "name": "namespaces",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveUserInfoCacheStatusResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user info cache status",
        "tags": [
          "UserInfo"
        ]
      },
      "put": {
        "description": "&lt;b&gt;Important: GOING TO DEPRECATE&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Sync user info cache in agreement service with iam service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncUserInfo",
        "parameters": [
          {
            "in": "query",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync user info with iam service ",
        "tags": [
          "UserInfo"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1agreements~1localized-policy-versions~1preferences",
    "value": {
      "patch": {
        "description": "Change marketing preference consent.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "changePreferenceConsent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/AcceptAgreementRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40017</td><td>Policy with id : [{policyId}] is not marketing preference</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Accept/Revoke Marketing Preference Consent",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1namespaces~1{namespace}~1users~1{userId}~1eligibilities",
    "value": {
      "get": {
        "description": "Retrieve the active policies and its conformance status by userThis process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.&lt;br/&gt;&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "adminRetrieveEligibilities",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "query",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client Id",
            "in": "query",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Publisher user Id",
            "in": "query",
            "name": "publisherUserId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveUserEligibilitiesIndirectResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check User Legal Eligibility",
        "tags": [
          "Admin User Eligibilities"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1{policyId}~1versions",
    "value": {
      "get": {
        "description": "Retrieve a version of a particular country specific policy. If version is not provided, the Legal Service will assume caller requesting all versions from country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveSinglePolicyVersion",
        "parameters": [
          {
            "description": "Policy Id",
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version Id",
            "in": "query",
            "name": "versionId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyVersionResponse"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40035</td><td>errors.net.accelbyte.platform.legal.policy_version_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a Version from Country-Specific Policy",
        "tags": [
          "Policy Versions"
        ]
      },
      "post": {
        "description": "Create a version of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createPolicyVersion",
        "parameters": [
          {
            "description": "Policy Id",
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePolicyVersionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreatePolicyVersionResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40033</td><td>errors.net.accelbyte.platform.legal.invalid_policy</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a Version from Country-Specific Policy",
        "tags": [
          "Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1localized-policy-versions~1{localizedPolicyVersionId}",
    "value": {
      "get": {
        "description": "Retrieve a version of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveSingleLocalizedPolicyVersion",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateLocalizedPolicyVersionResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>2912</td><td>errors.net.accelbyte.platform.legal.invalid_policy_version</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a Localized Version from Country-Specific Policy",
        "tags": [
          "Localized Policy Versions"
        ]
      },
      "put": {
        "description": "Update a version of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateLocalizedPolicyVersion",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateLocalizedPolicyVersionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateLocalizedPolicyVersionResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40035</td><td>errors.net.accelbyte.platform.legal.invalid_policy_version</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a Localized Version from Country-Specific Policy",
        "tags": [
          "Localized Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1countries~1{countryCode}",
    "value": {
      "get": {
        "description": "Retrieve all active policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrievePolicies",
        "parameters": [
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve Policies by Country",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1agreements~1policies~1users~1{userId}",
    "value": {
      "post": {
        "description": "Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. This endpoint used by Authentication Service during new user registration.&lt;br&gt;&lt;br/&gt;Available Extra Information to return: &lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;userIds&lt;/b&gt; : List of userId mapping (&lt;b&gt;IMPORTANT: GOING TO DEPRECATE&lt;/b&gt;)&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "indirectBulkAcceptVersionedPolicy_1",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/AcceptAgreementRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AcceptAgreementResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk Accept Policy Versions (Indirect)",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1localized-policy-versions~1{localizedPolicyVersionId}",
    "value": {
      "get": {
        "description": "Retrieve specific localized policy version including the policy version and base policy version where the localized policy version located.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;/ul&gt;",
        "operationId": "retrieveSingleLocalizedPolicyVersion_1",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveLocalizedPolicyVersionPublicResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40038</td><td>errors.net.accelbyte.platform.legal.localized_policy_version_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Retrieve a Localized Version",
        "tags": [
          "Localized Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1policies~1namespaces~1{namespace}~1countries~1{countryCode}",
    "value": {
      "get": {
        "description": "Retrieve all active latest policies based on a namespace and country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveLatestPoliciesByNamespaceAndCountryPublic",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Policy Type",
            "enum": [
              "LEGAL_DOCUMENT_TYPE",
              "MARKETING_PREFERENCE_TYPE"
            ],
            "in": "query",
            "name": "policyType",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "Default On Empty",
            "in": "query",
            "name": "defaultOnEmpty",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Always include default",
            "in": "query",
            "name": "alwaysIncludeDefault",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyPublicResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve Latest Policies by Namespace and Country",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1localized-policy-versions~1{localizedPolicyVersionId}~1attachments",
    "value": {
      "post": {
        "description": "Request presigned URL for  upload attachment for a particular localized version of base policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "requestPresignedURL",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UploadPolicyVersionAttachmentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UploadLocalizedPolicyVersionAttachmentResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40034</td><td>errors.net.accelbyte.platform.legal.invalid_file_type</td></tr><tr><td>40037</td><td>errors.net.accelbyte.platform.legal.invalid_localized_policy_version</td></tr><tr><td>40042</td><td>errors.net.accelbyte.platform.legal.policy_version_freezed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Request Presigned URL for Upload Document",
        "tags": [
          "Localized Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1namespaces~1{namespace}~1users~1{userId}~1agreements~1policies",
    "value": {
      "post": {
        "description": "Accepts many legal policy versions all at once. Supply with localized version policy id and userId to accept an agreement. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "indirectBulkAcceptVersionedPolicy",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "query",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client Id",
            "in": "query",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Publisher user Id",
            "in": "query",
            "name": "publisherUserId",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/AcceptAgreementRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AcceptAgreementResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin bulk accept Policy Versions",
        "tags": [
          "Admin User Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1users~1{userId}~1anonymization~1agreements",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "This API will anonymize agreement record for specified user. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeUserAgreement",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40047</td><td>errors.net.accelbyte.platform.legal.user_agreement_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Anonymize user's agreement record",
        "tags": [
          "Anonymization"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1localized-policy-versions~1versions~1{policyVersionId}",
    "value": {
      "get": {
        "description": "Retrieve versions of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveLocalizedPolicyVersions",
        "parameters": [
          {
            "description": "Policy Version Id",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveLocalizedPolicyVersionResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve Versions from Country-Specific Policy",
        "tags": [
          "Localized Policy Versions"
        ]
      },
      "post": {
        "description": "Create a version of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createLocalizedPolicyVersion",
        "parameters": [
          {
            "description": "Policy Version Id",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateLocalizedPolicyVersionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateLocalizedPolicyVersionResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40033</td><td>errors.net.accelbyte.platform.legal.invalid_policy_version</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40044</td><td>errors.net.accelbyte.platform.legal.localized_policy_version_already_exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a Localized Version from Country-Specific Policy",
        "tags": [
          "Localized Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1localized-policy-versions~1{localizedPolicyVersionId}~1default",
    "value": {
      "patch": {
        "description": "Update a localized version policy to be the default.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "setDefaultPolicy",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Set Default Localized Policy",
        "tags": [
          "Localized Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1base-policies",
    "value": {
      "get": {
        "description": "Retrieve all base policies.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveAllLegalPolicies",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveBasePolicyResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve All Base Legal Policy",
        "tags": [
          "Base Legal Policies"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a legal policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateBasePolicyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateBasePolicyResponse"
            }
          },
          "409": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40030</td><td>errors.net.accelbyte.platform.legal.invalid_policy_type</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a Base Legal Policy",
        "tags": [
          "Base Legal Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1agreements~1localized-policy-versions~1{localizedPolicyVersionId}",
    "value": {
      "post": {
        "description": "Accepts a legal policy version. Supply with localized version policy id to accept an agreement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "acceptVersionedPolicy",
        "parameters": [
          {
            "description": "Localized Policy Version Id",
            "in": "path",
            "name": "localizedPolicyVersionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Accept a Policy Version",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1policies~1namespaces~1{namespace}",
    "value": {
      "get": {
        "description": "Retrieve all active latest policies based on a namespace and country. The country will be read from user token.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it&#39;ll include policy with same country code, for example:&lt;ul&gt;&lt;li&gt;Document 1 (default): Region US (default), UA&lt;/li&gt;&lt;li&gt;Document 2 (default): Region US (default)&lt;/li&gt;&lt;li&gt;Document 3 (default): Region US (default)&lt;/li&gt;&lt;li&gt;User: Region UA&lt;/li&gt;&lt;li&gt;Query: alwaysIncludeDefault: true&lt;/li&gt;&lt;li&gt;Response: Document 1 (UA), Document 2 (US), Document 3 (US)&lt;/li&gt;&lt;/ul&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Required permission: login user &lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveLatestPoliciesPublic",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Policy Type",
            "enum": [
              "LEGAL_DOCUMENT_TYPE",
              "MARKETING_PREFERENCE_TYPE"
            ],
            "in": "query",
            "name": "policyType",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "Default On Empty",
            "in": "query",
            "name": "defaultOnEmpty",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "Always include default",
            "in": "query",
            "name": "alwaysIncludeDefault",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyPublicResponse"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40040</td><td>errors.net.accelbyte.platform.legal.user_has_no_country</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve Latest Policies by Namespace and Country",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1policies",
    "value": {
      "get": {
        "description": "[TODO] Retrieve one or more legal policies with its versions.&lt;br&gt;If the basePolicyId not supplied, then retrieve only all latest policies version with localeId matched.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrievePolicyVersions",
        "parameters": [
          {
            "description": "Namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "description": "BasePolicy Id",
            "in": "query",
            "name": "basePolicyId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Locale Id",
            "in": "query",
            "name": "localeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyVersionResponse"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>2920</td><td>errors.net.accelbyte.platform.legal.policy_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk Retrieve Version of Base Policy",
        "tags": [
          "Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1versions~1{policyVersionId}~1latest",
    "value": {
      "patch": {
        "description": "Manually publish a version of a particular country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publishPolicyVersion",
        "parameters": [
          {
            "description": "Policy Version Id",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "description": "Should Notify",
            "in": "query",
            "name": "shouldNotify",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40033</td><td>errors.net.accelbyte.platform.legal.invalid_policy_version</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Manually Publish a Version from Country-Specific Policy",
        "tags": [
          "Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policy-types",
    "value": {
      "get": {
        "description": "Retrieve all supported policy types.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveAllPolicyTypes",
        "parameters": [
          {
            "description": "Offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyTypeResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve All Policy Type",
        "tags": [
          "Base Legal Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1agreements~1policies",
    "value": {
      "get": {
        "description": "Retrieve accepted Legal Agreements.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveAgreementsPublic",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveAcceptedAgreementResponse"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Retrieve the accepted Legal Agreements",
        "tags": [
          "Agreement"
        ]
      },
      "post": {
        "description": "Accepts many legal policy versions all at once. Supply with localized version policy id to accept an agreement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "bulkAcceptVersionedPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/AcceptAgreementRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AcceptAgreementResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Bulk Accept Policy Versions",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1versions~1{policyVersionId}",
    "value": {
      "patch": {
        "description": "Update a particular policy version.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePolicyVersion",
        "parameters": [
          {
            "description": "Policy Version Id",
            "in": "path",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePolicyVersionRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdatePolicyVersionResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40035</td><td>errors.net.accelbyte.platform.legal.invalid_policy_version</td></tr><tr><td>40042</td><td>errors.net.accelbyte.platform.legal.policy_version_freezed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a Version of Policy",
        "tags": [
          "Policy Versions"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1{policyId}~1default",
    "value": {
      "patch": {
        "description": "Update a policy to be the default.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "setDefaultPolicy_1",
        "parameters": [
          {
            "description": "Policy Id",
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Set Default Policy",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1eligibilities~1namespaces~1{namespace}~1countries~1{countryCode}~1clients~1{clientId}~1users~1{userId}",
    "value": {
      "get": {
        "description": "Retrieve the active policies and its conformance status by userThis process only supports cross-namespace checking between game namespace and publisher namespace , that means if the active policy already accepted by the same user in publisher namespace, then it will also be considered as eligible in non-publisher namespace.&lt;br/&gt;&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveEligibilitiesPublicIndirect",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client Id",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveUserEligibilitiesIndirectResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Check User Legal Eligibility",
        "tags": [
          "Eligibilities"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1policies~1{policyId}",
    "value": {
      "patch": {
        "description": "Update country-specific policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "description": "Policy Id",
            "in": "path",
            "name": "policyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdatePolicyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Country-Specific Policy",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1agreements~1policy-versions~1users",
    "value": {
      "get": {
        "description": "This API will return all users who has accepted a specific policy version.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveAllUsersByPolicyVersion",
        "parameters": [
          {
            "in": "query",
            "name": "policyVersionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "display name or email or username",
            "in": "query",
            "name": "keyword",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PagedRetrieveUserAcceptedAgreementResponse"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40035</td><td>errors.net.accelbyte.platform.legal.policy_version_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve All Users Accepting Legal Agreements",
        "tags": [
          "Agreement"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1policies~1countries~1{countryCode}",
    "value": {
      "get": {
        "description": "Retrieve all active latest policies based on a country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Leave the policyType empty if you want to be responded with all policy type&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the tags if you want to filter the responded policy by tags&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveLatestPolicies",
        "parameters": [
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Policy Type",
            "enum": [
              "LEGAL_DOCUMENT_TYPE",
              "MARKETING_PREFERENCE_TYPE"
            ],
            "in": "query",
            "name": "policyType",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "Default On Empty",
            "in": "query",
            "name": "defaultOnEmpty",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrievePolicyPublicResponse"
              },
              "type": "array"
            }
          }
        },
        "summary": "Retrieve Latest Policies by Country",
        "tags": [
          "Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1base-policies~1{basePolicyId}~1countries~1{countryCode}",
    "value": {
      "get": {
        "description": "Retrieve a Base Legal Policy based on a Particular Country.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrievePolicyCountry",
        "parameters": [
          {
            "description": "BasePolicy Id",
            "in": "path",
            "name": "basePolicyId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrievePolicyResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40031</td><td>errors.net.accelbyte.platform.legal.base_policy_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a Base Legal Policy based on a Particular Country",
        "tags": [
          "Base Legal Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1admin~1base-policies~1{basePolicyId}",
    "value": {
      "get": {
        "description": "Retrieve a base policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "retrieveSinglePolicy",
        "parameters": [
          {
            "description": "BasePolicy Id",
            "in": "path",
            "name": "basePolicyId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RetrieveBasePolicyResponse"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40031</td><td>errors.net.accelbyte.platform.legal.base_policy_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Retrieve a Base Legal Policy",
        "tags": [
          "Base Legal Policies"
        ]
      },
      "patch": {
        "description": "Update an existing base policy.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:*:LEGAL&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "partialUpdatePolicy",
        "parameters": [
          {
            "description": "BasePolicy Id",
            "in": "path",
            "name": "basePolicyId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateBasePolicyRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateBasePolicyResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>40032</td><td>errors.net.accelbyte.platform.legal.invalid_base_policy</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:*:LEGAL [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Base Legal Policy",
        "tags": [
          "Base Legal Policies"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1agreement~1public~1agreements~1policies~1namespaces~1{namespace}~1countries~1{countryCode}~1clients~1{clientId}~1users~1{userId}",
    "value": {
      "post": {
        "description": "&lt;b&gt;IMPORTANT: GOING TO DEPRECATE&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;Accepts many legal policy versions all at once. Supply with localized version policy id, version policy id, policy id, userId, namespace, country code and client id to accept an agreement. This endpoint used by APIGateway during new user registration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:LEGAL&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "indirectBulkAcceptVersionedPolicyV2",
        "parameters": [
          {
            "description": "User Id",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Country Code",
            "in": "path",
            "name": "countryCode",
            "required": true,
            "type": "string"
          },
          {
            "description": "Client ID",
            "in": "path",
            "name": "clientId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/AcceptAgreementRequest"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AcceptAgreementResponse"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:LEGAL [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk Accept Policy Versions (Indirect)",
        "tags": [
          "Agreement"
        ]
      }
    }
  }
]
