[
  {
    "op": "remove",
    "path": "/basePath"
  },
  {
    "op": "add",
    "path": "/host",
    "value": "demo.accelbyte.io"
  },
  {
    "op": "add",
    "path": "/schemes",
    "value": [
      "https"
    ]
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasScope",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasPermission",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:NAMESPACE [CREATE]": "ADMIN:NAMESPACE [CREATE]",
        "ADMIN:NAMESPACE [READ]": "ADMIN:NAMESPACE [READ]",
        "ADMIN:NAMESPACE:{namespace}:ACTION [CREATE]": "ADMIN:NAMESPACE:{namespace}:ACTION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:ACTION [READ]": "ADMIN:NAMESPACE:{namespace}:ACTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:ACTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ACTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:FILEUPLOAD [CREATE]": "ADMIN:NAMESPACE:{namespace}:FILEUPLOAD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:MISC [CREATE]": "ADMIN:NAMESPACE:{namespace}:MISC [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:MISC [DELETE]": "ADMIN:NAMESPACE:{namespace}:MISC [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:MISC [READ]": "ADMIN:NAMESPACE:{namespace}:MISC [READ]",
        "ADMIN:NAMESPACE:{namespace}:MISC [UPDATE]": "ADMIN:NAMESPACE:{namespace}:MISC [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:NAMESPACE [DELETE]": "ADMIN:NAMESPACE:{namespace}:NAMESPACE [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:NAMESPACE [READ]": "ADMIN:NAMESPACE:{namespace}:NAMESPACE [READ]",
        "ADMIN:NAMESPACE:{namespace}:NAMESPACE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:NAMESPACE [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PROFILE []": "ADMIN:NAMESPACE:{namespace}:PROFILE []",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]",
        "NAMESPACE:{namespace}:FILEUPLOAD [CREATE]": "NAMESPACE:{namespace}:FILEUPLOAD [CREATE]",
        "NAMESPACE:{namespace}:NAMESPACE [READ]": "NAMESPACE:{namespace}:NAMESPACE [READ]",
        "NAMESPACE:{namespace}:PROFILE [CREATE]": "NAMESPACE:{namespace}:PROFILE [CREATE]",
        "NAMESPACE:{namespace}:PROFILE [READ]": "NAMESPACE:{namespace}:PROFILE [READ]",
        "NAMESPACE:{namespace}:PROFILE [UPDATE]": "NAMESPACE:{namespace}:PROFILE [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:ACTION [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:ACTION [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PROFILE [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:PROFILE [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]": "NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  },
  {
    "op": "add",
    "path": "/definitions/A DTO object for equ8 user ban status/properties/expires/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/NamespaceInfo/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/NamespaceInfo/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/A DTO object for equ8 user status/properties/expires/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/A DTO object for equ8 user status/properties/when/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/NamespacePublisherInfo/properties/publisher/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileAdmin/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileAdmin/properties/dateOfBirth/pattern",
    "value": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileAdmin/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateUpdate/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateUpdate/properties/dateOfBirth/pattern",
    "value": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateUpdate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileUpdate/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileUpdate/properties/dateOfBirth/pattern",
    "value": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileUpdate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileInfo/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileCreate/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileCreate/properties/dateOfBirth/pattern",
    "value": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfileCreate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateCreate/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateCreate/properties/dateOfBirth/pattern",
    "value": "^(\\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateCreate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/UserProfilePrivateInfo/properties/dateOfBirth/x-nullable",
    "value": true
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1misc~1countries"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1misc~1countries"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1misc~1languages"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1files"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1publisher"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1folders~1{folder}~1files"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1folders~1{folder}~1files"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1misc~1timezones"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1profiles~1public"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1profiles~1public"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1customAttributes"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1files"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions~1unban"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1equ8~1config"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1public"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1basic"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1me~1profiles"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1actions~1report"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1privateCustomAttributes"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions~1banned"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions~1report"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1customAttributes"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1misc~1countrygroups~1{countryGroupCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1misc~1languages"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1actions~1ban"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1profiles"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1misc~1timezones"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1admin~1namespaces~1{namespace}~1misc~1countrygroups"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1publisher"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1me~1profiles~1zipCode"
  },
  {
    "op": "remove",
    "path": "/paths/~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles"
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1status",
    "value": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateUserProfileStatus",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileStatusUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user profile status",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1status",
    "value": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user profile status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11406&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicUpdateUserProfileStatus",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileStatusUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfileInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user profile status",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1me~1profiles",
    "value": {
      "get": {
        "description": "Get my profile&lt;br&gt;&lt;b&gt;Client with user token can get user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getMyProfileInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>20017</td><td>user not linked</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:PROFILE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create my profile.&lt;br&gt;&lt;b&gt;Client with user token can create user profile in target namespace&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to create &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to create &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Country&lt;/i&gt;  : ISO3166-1 alpha-2 two letter, e.g. US &lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createMyProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>20017</td><td>user not linked</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11441</td><td>Unable to {action}: User profile already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PROFILE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create my profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update my profile.&lt;br&gt;Updates user profile in the target namespace (namespace in the path). If token&#39;s namespace doesn&#39;t match the target namespace, the service automatically maps the token&#39;s user ID into the user ID in the target namespace. The endpoint returns the updated user profile on a successful call.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to update &lt;b&gt;publisher user profile&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to update &lt;b&gt;game user profile&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateMyProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20008</td><td>user not found</td></tr><tr><td>20017</td><td>user not linked</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update my profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions~1banned",
    "value": {
      "get": {
        "description": "Get banned status.&lt;br&gt;Unbanned users will not return, for example: request has 8 userIds, only 5 of then were banned, then the api will these 5 user status.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getBannedUsers",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "user ids",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "userIds",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/A DTO object for equ8 user ban status"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11641</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get banned user",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1misc~1countries",
    "value": {
      "get": {
        "description": "List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetCountries",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": "en",
            "description": "language value from language tag, allowed format: en, en-US",
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CountryObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "summary": "List countries",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1profiles~1public",
    "value": {
      "get": {
        "description": "Get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserProfilePublicInfoByIds",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "User IDs, should follow UUID version 4 without hyphen, separate the IDs using comma",
            "in": "query",
            "name": "userIds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserProfilePublicInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "summary": "Get user profile public info by ids",
        "tags": [
          "UserProfile"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1misc~1countrygroups~1{countryGroupCode}",
    "value": {
      "delete": {
        "description": "Delete a country groups by its country group code. This endpoint usually used for testing purpose to cleanup test data.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:MISC&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteCountryGroup",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "groupCode, only accept alphabet and whitespace",
            "in": "path",
            "name": "countryGroupCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11233</td><td>Unable to {action}: Country group with code [{countryGroupCode}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MISC [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a country group",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      },
      "put": {
        "description": "Update a country groups. The countryGroupCode must be exist beforehand.&lt;br&gt;Valid update behaviour :&lt;br/&gt;- To update &lt;i&gt;countryGroupName&lt;/i&gt; only, do not include &lt;i&gt;countries&lt;/i&gt; key or just specify it with empty array.&lt;br/&gt;- To update &lt;i&gt;countries&lt;/i&gt; only, do not include &lt;i&gt;countryGroupName&lt;/i&gt; key or just specify it with blank value.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:MISC&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11202&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated country group&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCountryGroup",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "groupCode, only accept alphabet and whitespace",
            "in": "path",
            "name": "countryGroupCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateCountryGroupRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CountryGroupObject"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>11234</td><td>Unable to {action}: A country can't be assigned to more than one country group</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11233</td><td>Unable to {action}: Country group with code [{countryGroupCode}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MISC [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a country group",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "move",
    "from": "/paths/~1v1~1public~1misc~1time",
    "path": "/paths/~1basic~1v1~1public~1misc~1time"
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions~1status",
    "value": {
      "get": {
        "description": "Get user status.&lt;br&gt;If actionId does not exist, then the user is not banned.If actionId and expires exist, then the user is temporarily banned, if expires does not exist, then the user is permanently banned.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserStatus",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user id, should follow UUID version 4 without hyphen",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/A DTO object for equ8 user status"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11641</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user status",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1misc~1languages",
    "value": {
      "get": {
        "description": "List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11206&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getLanguages",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List languages.",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions~1report",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is for game service to report a game player.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "reportUser",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserReportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Report a game player(for game service)",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1files",
    "value": {
      "post": {
        "description": "Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGeneratedUserUploadContentUrl",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of the these types: jpeg, jpg, png, bmp, gif, mp3, bin, webp",
            "in": "query",
            "name": "fileType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FileUploadUrlInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>11131</td><td>Unable to {action}: File type is not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11132</td><td>Unable to {action}: file storage exceed limitation, user ID: {userId}, namespace: {namespace}</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Generate Upload URL For User Content",
        "tags": [
          "FileUpload"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions~1unban",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unban user.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "unBanUsers",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/A DTO for unban user API call."
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11041</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Unban user",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces",
    "value": {
      "get": {
        "description": "Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getNamespaces",
        "parameters": [
          {
            "default": false,
            "description": "only retrieves active namespaces",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/NamespaceInfo"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get all namespaces",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a namespace.&lt;br&gt;By default the namespace is enabled.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11301&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createNamespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NamespaceCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>11338</td><td>Unable to {action}: Namespace contains invalid character(s)</td></tr><tr><td>11339</td><td>Unable to {action}: Display name contains invalid character(s)</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11336</td><td>Unable to {action}: Namespace already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a namespace",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1misc~1countrygroups",
    "value": {
      "get": {
        "description": "List country groups. Will return all available country groups if the query param is not specified&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:MISC&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11203&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of country groups&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCountryGroups",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "groupCode, only accept alphabet and whitespace",
            "in": "query",
            "name": "groupCode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/RetrieveCountryGroupResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11233</td><td>Unable to {action}: Country group with code [{countryGroupCode}] is not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MISC [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List country groups",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      },
      "post": {
        "description": "Add a country groups&lt;br&gt;Country code must follow ISO3166-1 alpha-2.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:MISC&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11201&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: newly created country group&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "addCountryGroup",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AddCountryGroupRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AddCountryGroupResponse"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr><tr><td>11234</td><td>Unable to {action}: A country can't be assigned to more than one country group</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11235</td><td>Unable to {action}: Country group with specified code is already exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:MISC [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Add a country group",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces",
    "value": {
      "get": {
        "description": "Get all namespaces.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11303&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of namespaces&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetNamespaces",
        "parameters": [
          {
            "default": false,
            "description": "only retrieves active namespaces",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/NamespaceInfo"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get all namespaces",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1profiles",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11501&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeUserProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymized profile successfully"
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized access</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize user profile",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1misc~1countries",
    "value": {
      "get": {
        "description": "List countries.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11204&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: country code list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCountries",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": "en",
            "description": "language value from language tag, allowed format: en, en-US",
            "in": "query",
            "name": "lang",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CountryObject"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List countries",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1misc~1timezones",
    "value": {
      "get": {
        "description": "List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetTimeZones",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "summary": "List time zones",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1misc~1languages",
    "value": {
      "get": {
        "description": "List languages.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: language list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetLanguages",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "summary": "List languages.",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions",
    "value": {
      "get": {
        "description": "Get configured actions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getActions",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/Action"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11041</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get configured actions",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1actions~1report",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to report a game user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ACTION&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicReportUser",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "reporter user id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserReportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20026</td><td>publisher namespace not allowed</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ACTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Report a game user",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1folders~1{folder}~1files",
    "value": {
      "post": {
        "description": "Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:FILEUPLOAD&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "generatedUploadUrl",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the name of folder where the file will be uploaded, must be between 1-256 characters, all characters allowed no whitespace",
            "in": "path",
            "name": "folder",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of the these types: jpeg, jpg, png, bmp, gif, mp3, bin, webp",
            "in": "query",
            "name": "fileType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FileUploadUrlInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>11131</td><td>Unable to {action}: File type is not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:FILEUPLOAD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Generate Upload URL",
        "tags": [
          "FileUpload"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:FILEUPLOAD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1basic",
    "value": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update namespace basic info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11302&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateNamespace",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NamespaceUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NAMESPACE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update namespace basic info",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1me~1profiles~1zipCode",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getMyZipCode",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserZipCode"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my zip code",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:PROFILE"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update my zip code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11408&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user zip code&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateMyZipCode",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "userZipCodeUpdate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserZipCodeUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserZipCode"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update my zip code",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles",
    "value": {
      "get": {
        "description": "Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserProfileInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfileInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11401&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Created user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCreateUserProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfileInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11441</td><td>Unable to {action}: User profile already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Language&lt;/i&gt; : allowed format: en, en-US&lt;/li&gt;&lt;li&gt;&lt;i&gt;Timezone&lt;/i&gt; : IANA time zone, e.g. Asia/Shanghai&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicUpdateUserProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfileInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1equ8~1config",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete equ8 config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:EQU8CONFIG&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete equ8 config successfully"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Delete equ8 config",
        "tags": [
          "EQU8Config"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:EQU8CONFIG"
        }
      },
      "get": {
        "description": "Get equ8 config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:EQU8CONFIG&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Equ8Config"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11641</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Get equ8 config",
        "tags": [
          "EQU8Config"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:EQU8CONFIG"
        }
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update equ8 config, create if not exists.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:EQU8CONFIG&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/A DTO for update equ8 config API call."
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Equ8Config"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Create or Update equ8 config",
        "tags": [
          "EQU8Config"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:EQU8CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1misc~1timezones",
    "value": {
      "get": {
        "description": "List time zones.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: login user&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11205&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: time zones&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getTimeZones",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "List time zones",
        "tags": [
          "Misc"
        ],
        "x-authorization": {
          "authenticated": "true"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1actions~1ban",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Ban user.&lt;br&gt; actionId: 1 means permanent ban, actionId: 10 means Temporary ban.Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:ACTION&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "banUsers",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserBanRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11621</td><td>Invalid EQU8 api key in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11041</td><td>Equ8 config not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ACTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Ban user(temporarily or permanently)",
        "tags": [
          "UserAction"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ACTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1files",
    "value": {
      "post": {
        "description": "Generate an upload URL for user content. It&#39;s valid for 10 minutes.&lt;br/&gt;There are 2 kinds of storage limitation per user : maximum file count and maximum file size.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11102&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file count per user&lt;/i&gt;: 10 files&lt;/li&gt;&lt;li&gt;&lt;i&gt;Default maximum file size per user&lt;/i&gt;: 104857600 bytes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "generatedUserUploadContentUrl",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of the these types: jpeg, jpg, png, bmp, gif, mp3, bin, webp",
            "in": "query",
            "name": "fileType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FileUploadUrlInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>11131</td><td>Unable to {action}: File type is not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11132</td><td>Unable to {action}: file storage exceed limitation, user ID: {userId}, namespace: {namespace}</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Generate Upload URL For User Content",
        "tags": [
          "FileUpload"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FILEUPLOAD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1customAttributes",
    "value": {
      "get": {
        "description": "Get user custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCustomAttributesInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user custom attributes",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update partially custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCustomAttributesPartially",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update partially custom attributes tied to the user id",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1status",
    "value": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Change a namespace status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Action code&lt;i&gt;&lt;/i&gt;: 11306&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "changeNamespaceStatus",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NamespaceStatusUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NAMESPACE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Change namespace status",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles~1privateCustomAttributes",
    "value": {
      "get": {
        "description": "Get user private custom attributes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: custom attributes&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPrivateCustomAttributesInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user private custom attributes",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update partially private custom attributes tied to the user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt;: allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePrivateCustomAttributesPartially",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update partially private custom attributes tied to the user id",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1customAttributes",
    "value": {
      "get": {
        "description": "Get custom attributes info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user custom attributes&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetCustomAttributesInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get custom attributes info",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update partially custom attributes tied to user id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Request body&lt;/i&gt; : allowed format: JSON object&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated custom attributes&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicUpdateCustomAttributesPartially",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update partially custom attributes tied to user id",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1users~1{userId}~1profiles~1public",
    "value": {
      "get": {
        "description": "Get user profile public info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11404&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserProfilePublicInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePublicInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get user profile public info",
        "tags": [
          "UserProfile"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1publisher",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getNamespacePublisher",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespacePublisherInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NAMESPACE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get namespace info related publisher namespace",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1publisher",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get namespace info related publisher namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11305&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Namespace info related publisher namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetNamespacePublisher",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespacePublisherInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:NAMESPACE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get namespace info related publisher namespace",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1profiles~1public",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Admin get user public profile by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(GET)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11405&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user public profiles&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "adminGetUserProfilePublicInfoByIds",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileBulkRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserProfilePublicInfo"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PROFILE []"
            ],
            "authorization": []
          }
        ],
        "summary": "Admin get user profile public info by ids",
        "tags": [
          "UserProfile"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}",
    "value": {
      "delete": {
        "description": "Delete a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11307&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: deleted namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteNamespace",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NAMESPACE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a namespace",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:NAMESPACE"
        }
      },
      "get": {
        "description": "Get a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:NAMESPACE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11304&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: namespace&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getNamespace",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "only retrieves active namespaces",
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/NamespaceInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11337</td><td>Unable to {action}: Namespace not found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:NAMESPACE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a namespace",
        "tags": [
          "Namespace"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:NAMESPACE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1public~1namespaces~1{namespace}~1folders~1{folder}~1files",
    "value": {
      "post": {
        "description": "Generate an upload URL. It&#39;s valid for 10 minutes.&lt;br/&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource = &lt;b&gt;&#34;NAMESPACE:{namespace}:FILEUPLOAD&#34;&lt;/b&gt;, action=1 &lt;b&gt;(CREATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11101&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: URL data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGeneratedUploadUrl",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the name of folder where the file will be uploaded, must be between 1-256 characters, all characters allowed no whitespace",
            "in": "path",
            "name": "folder",
            "required": true,
            "type": "string"
          },
          {
            "description": "one of the these types: jpeg, jpg, png, bmp, gif, mp3, bin, webp",
            "in": "query",
            "name": "fileType",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FileUploadUrlInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>11131</td><td>Unable to {action}: File type is not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "500": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20000</td><td>internal server error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:FILEUPLOAD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Generate Upload URL",
        "tags": [
          "FileUpload"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:FILEUPLOAD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1basic~1v1~1admin~1namespaces~1{namespace}~1users~1{userId}~1profiles",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11407&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Delete user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteUserProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "get": {
        "description": "Get user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: user profile&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11403&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserProfileInfo",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user profile.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE&#34;&lt;/b&gt;, action=4 &lt;b&gt;(UPDATE)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Action code&lt;/i&gt;: 11402&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Updated user profile&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateUserProfile",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "user's id, should follow UUID version 4 without hyphen",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserProfileAdmin"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserProfilePrivateInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr><tr><td>20019</td><td>unable to parse request body</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          },
          "401": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20001</td><td>unauthorized</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>20013</td><td>insufficient permission</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>11440</td><td>Unable to {action}: User profile not found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user profile",
        "tags": [
          "UserProfile"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PROFILE"
        }
      }
    }
  }
]
