[
  {
    "op": "remove",
    "path": "/basePath"
  },
  {
    "op": "add",
    "path": "/host",
    "value": "demo.accelbyte.io"
  },
  {
    "op": "add",
    "path": "/schemes",
    "value": [
      "https"
    ]
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1checkoutconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1enable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1alipayconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1{itemId}~1app~1locale"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1grant"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap~1mock~1receipt"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1payment~1accounts"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1matched"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1wallets"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1platformSubscribe"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1rewards"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1integrations"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1methods"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1campaigns~1{campaignId}~1dynamic"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1disable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1fulfillment~1scripts"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1payment"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1categories~1download"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1search"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1byCriteria"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1categories"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1paypalconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1epicgames"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1dlc~1config~1platformMap"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1twitch~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1acquire"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1locale~1byIds"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1subscriptions"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1provider~1special"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1xbl~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1notifications"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1anyOf"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1alipayconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1rewards~1{rewardId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1disable~1bulk"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1apple"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap~1all"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}~1descendants"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1provider~1aggregate"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1redemption"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppType"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1increment"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1credit"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1fulfillment~1scripts~1{id}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1uncategorized"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig~1cert"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1id"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1paypalconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1revoke"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1transactions"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1wallets~1{currencyCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1{itemId}~1locale"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1decrement"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1xsollaconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1payment~1accounts~1{type}~1{id}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1countOfItem"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1itemId~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards~1{rewardId}~1match"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1dlc~1config~1item"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1byCriteria"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1{code}~1disable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1locale"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards~1export"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1disable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards~1{rewardId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1transactions"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1categories~1{categoryPath}~1children"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1entitlements~1{entitlementId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1simulate-notification"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1campaign"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1psn~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1checkoutconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1steam~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders~1byExtTxId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1cancel"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1keygroups"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1import"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1categories~1{categoryPath}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1fulfillment"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownershipToken"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}~1summary"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1campaigns"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1any"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1revoke~1byIds"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1payment~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1check"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1tickets~1{boothName}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1byFeatures~1basic"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1code"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1xsollaconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1google~1receipt"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1cancel"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1orders~1{orderNo}~1refund"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1alipayconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards~1import"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1playstation"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1config~1callback"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1orders~1{orderNo}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1rewards~1byCriteria"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1epicgames~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1receipt.pdf"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1xsollauiconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1published~1rollback"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1fulfillment~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1stadia~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1twitch"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1stripeconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1notifications"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1{code}~1enable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1orders~1stats"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1dynamic"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1pay"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1bySku~1locale"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1adyenconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1google~1cert"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1{storeId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1subscribable~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1xbl"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1code"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1history"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1apple~1receipt"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1subscribable~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1wallets"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1categories~1basic"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1paypalconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1grant"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1debit"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1tax"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1categories~1{categoryPath}~1descendants"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1{itemId}~1dynamic"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1categories"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1activities"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1subscriptions~1{subscriptionId}~1recurring"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1wallets~1{walletId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1search"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1link"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1adyenconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1customization"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1provider"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1billingAccount"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1enable"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1steam~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1decrement"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1decrement"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1stripeconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1campaigns~1{campaignId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1any"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1codes.csv"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1features~1{feature}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1rewards~1byCriteria"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1app"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1enable"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1adyenconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1wxpayconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1{code}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1entitlements"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1steam"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1receipt.pdf"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1publicconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1published"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1rewards~1byCode"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1qrcode"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1stadia~1cert"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1psn~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1fulfill"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1enable~1bulk"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1payment~1orders~1{paymentOrderNo}~1refund"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1published~1backup"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}~1config"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1{storeId}~1clone"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1tickets~1{boothName}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1entitlements"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}~1dynamic"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}~1children"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1currencies"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1currencies"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}~1keys"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1xbl~1cert"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1orders"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1checkoutconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1status"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1tax"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byAppId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1refund"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1return"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1notifications"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1stores"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1google"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1items~1{itemId}~1disable"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byItemId"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1provider~1matched"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1provider~1{id}"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1cancel"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1payment"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1info"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1stadia"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1stripeconfig"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1bySku"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1fulfillment~1scripts~1tests~1eval"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1subscriptions"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1payment~1config~1merchant~1{id}~1xsollaconfig~1test"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores~1{storeId}~1export"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1stores"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppType"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1items~1locale~1byIds"
  },
  {
    "op": "remove",
    "path": "/paths/~1admin~1namespaces~1{namespace}~1iap~1config~1item"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1xbl~1sync"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1any"
  },
  {
    "op": "remove",
    "path": "/paths/~1public~1namespaces~1{namespace}~1payment~1returnurl"
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards~1{rewardId}",
    "value": {
      "delete": {
        "description": "This API is used to delete a reward by reward Id. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted reward data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteReward",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      },
      "get": {
        "description": "This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      },
      "put": {
        "description": "This API is used to update a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1revoke",
    "value": {
      "put": {
        "description": "Revoke user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "revokeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1notifications",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "processUserOrderNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeNotification"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "process successfully"
          },
          "400": {
            "description": "process failed"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Web hook for payment notification",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1payment~1orders~1{paymentOrderNo}~1refund",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to refund order by paymentOrderNo from justice service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "refundUserPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Delete user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "delete user subscription successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1epicgames",
    "value": {
      "delete": {
        "description": "Delete epic games iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete epic games iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get epic games iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: epic games iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39243</td><td>EpicGames config does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get epicgames iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update epic games iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated epic games iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateEpicGamesIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EpicGamesIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update epic games iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1codes.csv",
    "value": {
      "get": {
        "description": "Download all or a batch of campaign&#39;s codes as a csv file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: codes csv file&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "download",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1twitch",
    "value": {
      "delete": {
        "description": "Delete twitch iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get twitch iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: twitch iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update twitch iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated twitch iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateTwitchIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TwitchIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update twitch iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1revoke~1byIds",
    "value": {
      "put": {
        "description": "Revoke user&#39;s entitlements by ids.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: revoke entitlements count&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "revokeUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "separate multiple value by commas parameter.",
            "in": "query",
            "name": "entitlementIds",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Revoke user's entitlements by ids",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test WxPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testWxPayConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test wxPay configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1psn~1sync",
    "value": {
      "put": {
        "description": "Synchronize with dlc entitlements in PSN Store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicSyncPsnDlcInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39123</td><td>PSN Sync failed with status code [{statusCode}] and psnAuthCode is [{psnAuthCode}]</td></tr>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Synchronize with dlc entitlements in PSN Store.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1{itemId}~1dynamic",
    "value": {
      "get": {
        "description": "Get item dynamic data for a published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetItemDynamicData",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get item dynamic data",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1uncategorized",
    "value": {
      "get": {
        "description": "This API is used to query uncategorized items within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of uncategorized items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUncategorizedItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "name:asc",
            "description": "default is name:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query uncategorized items",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}",
    "value": {
      "delete": {
        "description": "This API is used to delete category by category path. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the deleted category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30272</td><td>Category [{categoryPath}] is not empty in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "get": {
        "description": "This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update category. &lt;p&gt; The category update data is a category object, example as:&lt;pre&gt;&lt;code&gt;{\r\n\t&#34;storeId&#34;: &#34;store-id&#34;,\r\n\t&#34;localizationDisplayNames&#34;: {&#34;en&#34; : &#34;Games&#34;}\r\n}&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the updated category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1return",
    "value": {
      "put": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for returning a published item while the item is maxCount limited, it will increase the sale available count if orderNo already acquired.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "returnItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemReturnRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Return item successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Return item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1{code}~1enable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enabled code&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "enableCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1published",
    "value": {
      "delete": {
        "description": "This API is used to delete published store including category and items before release to public.&lt;p&gt;&lt;b&gt;Warning: Please do not use this API once published to public user.&lt;/b&gt;&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deletePublishedStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a published store basic info, exclude category and item information.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPublishedStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1decrement",
    "value": {
      "put": {
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "consumeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Consume user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1xsollauiconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xsolla UI configuration.Reference: &lt;a href=&#34;https://developers.xsolla.com/api.html#ui-integrations&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateXsollaUIConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaPaywallConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xsolla UI configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1pay",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Do payment(For now, this only support checkout.com).&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment process result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "pay",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "default": "CHECKOUT",
            "description": "payment provider",
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": false,
            "type": "string"
          },
          {
            "description": "zip code",
            "in": "query",
            "name": "zipCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentToken"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProcessResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Do payment",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1disable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Disable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "disableItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1wxpayconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test WxPay configuration. Reference: &lt;a href=&#34;https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=9_1&#34;&gt;WxPay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test WxPay config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testWxPayConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test wxPay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1refund",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;p&gt;This API is used to refund payment order by paymentOrderNo from non justice service. e.g. dedicated server. &lt;ul&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDED&#34;, usually wallet paid, it indicates payment order already refunded&lt;/li&gt;&lt;li&gt;if the status field of response json is &#34;REFUNDING&#34;, usually real money paid, platform will send notification to registered notify url once refund successfully&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order number&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund description&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{\r\n           &#34;description&#34;: &#34;Repeated item.&#34;\r\n}&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Refund Notification:&lt;/h4&gt;&lt;p&gt;It will send notification to configured web hook after refund successfully, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Refund notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Refund notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Refund notification Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{\r\n       &#34;payload&#34;: &#34;{\n           \\&#34;type\\&#34;: \\&#34;payment\\&#34;,\n           \\&#34;nonceStr\\&#34;: \\&#34;34c1dcf3eb58455eb161465bbfc0b590\\&#34;,\n           \\&#34;paymentOrderNo\\&#34;: \\&#34;18081239088\\&#34;,\n           \\&#34;namespace\\&#34;: \\&#34;accelbyte\\&#34;,\n           \\&#34;targetNamespace\\&#34;: \\&#34;game1\\&#34;,\n           \\&#34;targetUserId\\&#34;: \\&#34;94451623768940d58416ca33ca767ec3\\&#34;,\n           \\&#34;extOrderNo\\&#34;: \\&#34;123456789\\&#34;,\n           \\&#34;sku\\&#34;: \\&#34;sku\\&#34;,\n           \\&#34;extUserId\\&#34;: \\&#34;678\\&#34;,\n           \\&#34;price\\&#34;: 100,\n           \\&#34;paymentProvider\\&#34;: \\&#34;XSOLLA\\&#34;,\n           \\&#34;vat\\&#34;: 0,\n           \\&#34;salesTax\\&#34;: 0,\n           \\&#34;paymentProviderFee\\&#34;: 0,\n           \\&#34;paymentMethodFee\\&#34;: 0,\n           \\&#34;currency\\&#34;: {\n                   \\&#34;currencyCode\\&#34;: \\&#34;USD\\&#34;,\n                   \\&#34;currencySymbol\\&#34;: \\&#34;$\\&#34;,\n                   \\&#34;currencyType\\&#34;: \\&#34;REAL\\&#34;,\n                   \\&#34;namespace\\&#34;: \\&#34;accelbyte\\&#34;,\n                   \\&#34;decimals\\&#34;: 2\n               },\n           \\&#34;status\\&#34;: \\&#34;REFUNDED\\&#34;,\n           \\&#34;createdTime\\&#34;: \\&#34;2018-07-28T00:39:16.274Z\\&#34;,\n           \\&#34;chargedTime\\&#34;: \\&#34;2018-07-28T00:39:16.274Z\\&#34;,\n           \\&#34;refundedTime\\&#34;: \\&#34;2018-07-28T00:39:16.274Z\\&#34;\n       }&#34;,\r\n       &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34;\r\n}&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Refund notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order refund status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;refundedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order refunded&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "refundPaymentOrderByDedicated",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefund"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderRefundResult"
            }
          },
          "204": {
            "description": "Refund successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33172</td><td>Payment order [{paymentOrderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund payment order by dedicated server",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1simulate-notification",
    "value": {
      "put": {
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Simulate payment notification on sandbox payment order, usually for test usage to simulate real currency payment notification.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: notification process result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "simulatePaymentOrderNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderNotifySimulation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/NotificationProcessResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Simulate payment notification",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1fulfillment~1scripts~1{id}",
    "value": {
      "delete": {
        "description": "Delete fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "delete fulfillment script successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "get": {
        "description": "Get fulfillment script by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get fulfillment script&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38141</td><td>Fulfillment script does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get fulfillment script by id",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "patch": {
        "description": "Update fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38141</td><td>Fulfillment script does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:FULFILLMENT"
        }
      },
      "post": {
        "description": "Create fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;Fulfillment scripts are used for adding custom fulfillment logic based on &lt;b&gt;ITEM_TYPE&lt;/b&gt;: [MEDIA,INGAMEITEM] for now, and the custom scripts only cover grantDays.&lt;br&gt;Example for grantDays: &lt;br&gt;&lt;code&gt;order &amp;&amp; ((order.currency &amp;&amp; order.currency.currencyCode) == &#39;LP&#39; || order.isFree) ? 30 : -1&lt;/code&gt;&lt;br&gt;",
        "operationId": "createFulfillmentScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>38171</td><td>Fulfillment script already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig~1cert",
    "value": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload wxpay cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateWxPayConfigCert",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload wxpay cert file",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1adyenconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update adyen config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateAdyenConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update adyen config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1stadia",
    "value": {
      "delete": {
        "description": "Delete stadia iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteStadiaIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete stadia iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get stadia iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: stadia iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getStadiaIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StadiaIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get stadia iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1tax",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check and get a payment order&#39;s should pay tax.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: tax result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentTaxValue",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "zipCode",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TaxResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33123</td><td>Invalid zipcode</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "get tax result of a payment order",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1disable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "disable a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "disableUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1publicconfig",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment provider public config, at current only Strip provide public config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Public config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentPublicConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        },
        "summary": "Get payment provider public config",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1decrement",
    "value": {
      "put": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Decrease ticket(code/key) sale if requested orderNo is already increased.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:TICKET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "decreaseTicketSale",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketSaleDecrementRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Return item successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Decrease ticket sale",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1xbl",
    "value": {
      "delete": {
        "description": "Delete xbl iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteXblAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete xbl iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get xbox iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: xbox iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getXblIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39242</td><td>XBL config does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get xbox iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xbl iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateXblIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xbl iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1locale~1byIds",
    "value": {
      "get": {
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store items)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicBulkGetItems",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Bulk get locale items",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1byFeatures~1basic",
    "value": {
      "get": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to list basic items by features.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of basic items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listBasicItemsByFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "features",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "features",
            "required": false,
            "type": "array"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicItem"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List basic items by features",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1{storeId}",
    "value": {
      "delete": {
        "description": "This API is used to delete a store. Only non published store can be deleted.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "get": {
        "description": "This API is used to get a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to Update a store basic info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30171</td><td>Store [{store}] can't change default language to [{language}]</td></tr><tr><td>30172</td><td>Store [{store}] can't change default region to [{region}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1campaigns~1{campaignId}~1dynamic",
    "value": {
      "get": {
        "description": "Get campaign dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign dynamic&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCampaignDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignDynamicInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get campaign dynamic",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byAppId",
    "value": {
      "get": {
        "description": "Get user app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byItemId",
    "value": {
      "get": {
        "description": "Get user entitlement by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserEntitlementByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31144</td><td>Entitlement with itemId [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1categories~1basic",
    "value": {
      "get": {
        "description": "This API is used to list all categories&#39; basic info of a store ordered by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of categories&#39; paths&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listCategoriesBasic",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/BasicCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List categories' basic info",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1payment~1accounts~1{type}~1{id}",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Delete payment account.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;:&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicDeletePaymentAccount",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "payment account type",
            "enum": [
              "card",
              "paypal"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "payment account id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "delete a payment account successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete payment account",
        "tags": [
          "PaymentAccount"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1payment~1orders",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to create payment order from justice service. The result contains the payment station url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createUserPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1paypalconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test PayPal configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testPayPalConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>NumericErrorCode</td><td>ErrorCode</td></tr><tr><td>33045</td><td>errors.net.accelbyte.platform.payment.payment_merchant_config_not_found</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test PayPal configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1enable~1bulk",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk enable campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually enabled&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "bulkEnableCodes",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "description": "if not present will match all except 0",
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk enable codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1info",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment order info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order details&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUnpaidPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderDetails"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment order info",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}~1summary",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get currency summary by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCurrencySummary",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencySummary"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get currency summary",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1apple",
    "value": {
      "delete": {
        "description": "Delete apple iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get apple iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: apple iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update apple iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated apple iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateAppleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update apple iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1grant",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant days to a subscription, if grantDays is positive, it will add free days and push the next billing date by the amount of day.&lt;br&gt;if the grantDays is negative or zero, it only apply to active/cancelled subscription, remove days will decrease current period end, and move the next billing date closer.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "grantDaysToSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GrantSubscriptionDaysRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Grant days to a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap~1all",
    "value": {
      "get": {
        "description": "Query all user IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of iap orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryAllUserIAPOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query all user IAP orders",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1platformSubscribe",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Free subscribe by platform, can used by other justice service to redeem/reward the subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "platformSubscribeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlatformSubscribeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "201": {
            "description": "platform subscribe request processed"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40121</td><td>Item type [{itemType}] does not support</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Free subscribe by platform",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1{itemId}~1app~1locale",
    "value": {
      "get": {
        "description": "This API is used to get an app in locale. If app not exist in specific region, default region app will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store app)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetApp",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get an app in locale",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}~1children",
    "value": {
      "get": {
        "description": "This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getChildCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get child categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1subscribable~1byItemId",
    "value": {
      "get": {
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCheckUserSubscriptionSubscribableByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscribable"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check user subscription subscribable",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1id",
    "value": {
      "get": {
        "description": "Get ticket(code/key) booth ID.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:TICKET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket booth id&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getTicketBoothID",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketBoothID"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get ticket booth ID",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byItemId",
    "value": {
      "get": {
        "description": "Get user entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1categories",
    "value": {
      "get": {
        "description": "This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getRootCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get root categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create category.&lt;p&gt;A category is a path separated by &#34;/&#34;. A category also has localized display names. Example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n\t&#34;categoryPath&#34;: &#34;/games&#34;,\r\n\t&#34;localizationDisplayNames&#34;: \\{&#34;en&#34; : &#34;Games&#34;}\r\n}&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CategoryCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullCategoryInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30271</td><td>Category [{categoryPath}] already exists in namespace [{namespace}]</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create category",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1orders~1{orderNo}~1refund",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Refund order by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ORDER&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "refundOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderRefundCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32171</td><td>Order [{orderNo}] is not refundable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Refund order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1config~1callback",
    "value": {
      "get": {
        "description": "Get payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentCallbackConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33243</td><td>Payment callback config for [{namespace}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment callback configuration",
        "tags": [
          "PaymentCallbackConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment callback configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment callback config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePaymentCallbackConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentCallbackConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment callback configuration",
        "tags": [
          "PaymentCallbackConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1stripeconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update stripe config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateStripeConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update stripe config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get a wallet by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a wallet by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1categories~1download",
    "value": {
      "get": {
        "description": "This API is used to download store&#39;s structured categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store content)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: structured categories&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "downloadCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/HierarchicalCategoryInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Download store's structured categories",
        "tags": [
          "Category"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1subscriptions",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize subscription. At current it will anonymize subscription, billing history and subscription activity.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize subscription",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1currencies",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicListCurrencies",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "list currencies",
        "tags": [
          "Currency"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byItemId",
    "value": {
      "get": {
        "description": "Get user entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1history",
    "value": {
      "get": {
        "description": "Query redeem history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of redeem history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryRedeemHistory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedeemHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query redeem history",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1anyOf",
    "value": {
      "get": {
        "description": "Exists any user active entitlement of specified items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "existsAnyUserActiveEntitlementByItemIds",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": true,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppId",
    "value": {
      "get": {
        "description": "Get user app entitlement by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserAppEntitlementByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1locale",
    "value": {
      "get": {
        "description": "This API is used to get an item in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getLocaleItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item in locale",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1tax",
    "value": {
      "get": {
        "description": "Get payment global tax config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentTaxConfig",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment global tax config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment tax config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarEnabled&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;required, when taxJarEnabled is true and there is no existing token&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandboxTaxJarApiToken&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;false&lt;/td&gt;&lt;td&gt;optional&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;taxJarProductCodesMapping&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;key is item type(APP|COINS|INGAMEITEM|BUNDLE|CODE|SUBSCRIPTION) and value is product tax code: https://developers.taxjar.com/api/reference/?ruby#get-list-tax-categories&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment global tax config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePaymentTaxConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentTaxConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment global tax config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1any",
    "value": {
      "get": {
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicExistsAnyUserActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1bySku",
    "value": {
      "get": {
        "description": "Get user entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1alipayconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test AliPay configuration in payment merchant config. Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test alipay config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testAliPayConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test Alipay configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards~1byCriteria",
    "value": {
      "get": {
        "description": "This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryRewards",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "eventTopic",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "namespace:asc,rewardCode:asc",
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query rewards by criteria",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1features~1{feature}",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove a feature from an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "defeatureItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Defeature an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a feature to an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "featureItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "feature",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Feature an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Fulfill item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT&#34;, action=1 (CREATED)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "fulfillItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill item",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1xsollaconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update xsolla configuration. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateXsollaConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update xsolla configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1check",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Check wallet whether it&#39;s inactive.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "checkWallet",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "check successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1twitch~1sync",
    "value": {
      "put": {
        "description": "Sync twitch drops entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncTwitchDropsEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TwitchSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Sync Successful"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync twitch drops entitlements.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1transactions",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List user wallet transactions ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet transaction info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listUserWalletTransactions",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List user wallet transactions",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1paypalconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update PayPal config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePayPalConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update PayPal config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1provider",
    "value": {
      "get": {
        "description": "Query payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryPaymentProviderConfig",
        "parameters": [
          {
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createPaymentProviderConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap",
    "value": {
      "get": {
        "description": "Query IAP orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated iap orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUserIAPOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APPLE",
              "EPICGAMES",
              "GOOGLE",
              "PLAYSTATION",
              "STADIA",
              "STEAM",
              "TWITCH",
              "XBOX"
            ],
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "productId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "FAILED",
              "FULFILLED",
              "VERIFIED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query IAP orders",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1any",
    "value": {
      "get": {
        "description": "Exists any my active entitlement of specified itemIds, skus and appIds&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicExistsAnyMyActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any my active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}",
    "value": {
      "get": {
        "description": "Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update user entitlement. If update CONSUMABLE entitlement useCount to 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}",
    "value": {
      "get": {
        "description": "Get user entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1billingAccount",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Request to change a subscription billing account, this will guide user to payment station. The actual change will happen at the 0 payment notification successfully handled.&lt;br&gt;Only ACTIVE USER subscription with real currency billing account can be changed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicChangeSubscriptionBillingAccount",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40125</td><td>Subscription [{subscriptionId}] has no real currency billing account</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Request to change a subscription billing account",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1subscribable~1byItemId",
    "value": {
      "get": {
        "description": "Check user subscription subscribable by itemId, ACTIVE USER subscription can&#39;t do subscribe again.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscribable info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "checkUserSubscriptionSubscribableByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscribable"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check user subscription subscribable",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1qrcode",
    "value": {
      "get": {
        "description": "Get qrcode.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: QRCode image stream&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetQRCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "image/png"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        },
        "summary": "Get qrcode",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1adyenconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test adyen configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testAdyenConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test adyen configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1{code}",
    "value": {
      "get": {
        "description": "Get campaign code, it will check code whether available to redeem if redeemable true.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ) (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: code info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "redeemable",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get code info",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1orders",
    "value": {
      "get": {
        "description": "Query orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "orderNos",
            "required": false,
            "type": "array"
          },
          {
            "description": "start time is inclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "startTime",
            "required": false,
            "type": "string"
          },
          {
            "description": "end time is exclusive, using ISO 8601 format e.g. yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "endTime",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "createdTime:desc",
            "description": "default is createdTime:desc, support sort group, e.g. sortBy=status:asc,createdTime:desc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "return total in slice result when true",
            "in": "query",
            "name": "withTotal",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1subscriptions~1{subscriptionId}~1recurring",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Recurring charge subscription, it will trigger recurring charge if the USER subscription status is ACTIVE, nextBillingDate is before now and no fail recurring charge within X(default 12) hours.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: recurring charge result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "recurringChargeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RecurringChargeResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Recurring charge subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1activities",
    "value": {
      "get": {
        "description": "Get user subscription activity.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription activity&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserSubscriptionActivities",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "subscriptionId",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeSystem",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionActivityPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription activity",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1wxpayconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update wxpay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateWxPayConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/WxPayConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update wxpay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}",
    "value": {
      "get": {
        "description": "Get payment order by paymentOrderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment order",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      },
      "put": {
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Charge payment order without payment flow for unpaid payment order, usually for test usage to simulate real currency payment process.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "chargePaymentOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33171</td><td>Invalid payment order status [{status}] for payment order [{paymentOrderNo}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Charge payment order without payment flow",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1categories~1{categoryPath}~1descendants",
    "value": {
      "get": {
        "description": "This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetDescendantCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Descendant Categories",
        "tags": [
          "Category"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1transactions",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List wallet transactions by currency code ordered by create time desc.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet transaction info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicListUserWalletTransactions",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletTransactionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List wallet transactions by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1alipayconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test AliPay configuration.Reference: &lt;a href=&#34;https://docs.open.alipay.com/270/alipay.trade.page.pay&#34;&gt;Alipay Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testAliPayConfig",
        "parameters": [
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test Alipay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1{code}~1disable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Disable code.&lt;p&gt;Disable an active code, the code can&#39;t be disabled if it has already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disabled code&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "disableCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr><tr><td>37176</td><td>Code [{code}] has been redeemed in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1subscriptions",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscriptions&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "querySubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards~1{rewardId}~1match",
    "value": {
      "put": {
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: match result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "checkEventCondition",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventPayload"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ConditionMatchResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Check if event payload match reward condition",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}",
    "value": {
      "delete": {
        "description": "This API is used to delete an item permanently, usually for test purpose.&lt;b&gt;DO NOT delete already published item.&lt;/b&gt;&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete item successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "get": {
        "description": "This API is used to get an item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update an item.&lt;p&gt;An item update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n\t&#34;categoryPath&#34;: &#34;/games&#34;,\r\n\t&#34;localizations&#34;: \\{\r\n       &#34;en&#34;: \\{\r\n           &#34;title&#34;:&#34;required&#34;,\r\n           &#34;description&#34;:&#34;optional&#34;,\r\n           &#34;longDescription&#34;:&#34;optional&#34;,\r\n           &#34;localExt&#34;: \\{\r\n                  &#34;properties&#34;:\\[\r\n                                   \\{\r\n                                       &#34;key1&#34;:&#34;value1&#34;,\r\n                                       &#34;key2&#34;:&#34;value2&#34;\r\n                                   \\}\r\n                  \\],\r\n                  &#34;functions&#34;:\\[\r\n                                   \\{\r\n                                       &#34;key1&#34;:&#34;value1&#34;,\r\n                                       &#34;key2&#34;:&#34;value2&#34;\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n       \\}\r\n   \\},\r\n   &#34;images&#34;: \\[\r\n     \\{\r\n           &#34;as&#34;:&#34;optional, image for&#34;,\r\n           &#34;caption&#34;:&#34;optional&#34;,\r\n           &#34;height&#34;:10,\r\n           &#34;width&#34;:10,\r\n           &#34;imageUrl&#34;:&#34;http://img-url-required&#34;,\r\n           &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34;\r\n     \\}\r\n   \\],\r\n   &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;,\r\n   &#34;status&#34;: &#34;ACTIVE&#34;,\r\n   &#34;listable&#34;: true,\r\n   &#34;purchasable&#34;: true,\r\n   &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;,\r\n   &#34;name&#34;: &#34;optional&#34;,\r\n   &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, \r\n   &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable),\r\n   &#34;stackable&#34;: false,\r\n   &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;,\r\n   &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;,\r\n   &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;,\r\n   &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;,\r\n   &#34;sku&#34;: &#34;optional, commonly unique item code&#34;,\r\n   &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;,\r\n   &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace&#34;,\r\n   &#34;regionData&#34;: \\{\r\n       &#34;US(store&#39;s default region is required)&#34;: \\[\r\n         \\{\r\n            &#34;price&#34;:10,\r\n            &#34;discountPercentage&#34;:0(integer, optional, range[0,100], discountedPrice = price\\*((100 - discountPercentage) \\* 0.01),\r\n              if it is not 0, will use it to calculate discounted price),\r\n            &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;,\r\n            &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;,\r\n            &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present),\r\n            &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;\r\n         \\}\r\n       \\]\r\n   \\},\r\n   &#34;itemIds&#34;: \\[\r\n       &#34;itemId&#34;\r\n   \\],\r\n   &#34;itemQty&#34;: \\{\r\n       &#34;itemId&#34;:1\r\n   \\},\r\n   &#34;recurring&#34;: \\{\r\n       &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;,\r\n       &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set),\r\n       &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   &#34;tags&#34;: \\[\r\n       &#34;tag&#34;\r\n   \\],\r\n   &#34;features&#34;: \\[\r\n       &#34;feature&#34;\r\n   \\],\r\n   &#34;clazz&#34;: &#34;weapon&#34;,\r\n   &#34;boothName&#34;: &#34;C_campaign1&#34;,\r\n   &#34;displayOrder&#34;: 1000,\r\n   &#34;ext&#34;: \\{\r\n       &#34;properties&#34;:\\[\r\n           \\{\r\n               &#34;key1&#34;:&#34;value1&#34;,\r\n               &#34;key2&#34;:&#34;value2&#34;\r\n           \\}\r\n       \\],\r\n       &#34;functions&#34;:\\[\r\n           \\{\r\n               &#34;key1&#34;:&#34;value1&#34;,\r\n               &#34;key2&#34;:&#34;value2&#34;\r\n           \\}\r\n       \\]\r\n   \\},\r\n   &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED),\r\n   &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, new value should &gt;= old value if both old value and new value is\r\n   limited, unset when item type is CODE)\r\n}&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30329</td><td>Invalid bundled item [{itemId}] quantity</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr><tr><td>30330</td><td>Invalid item region price currency namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30371</td><td>Item maxCount not allow reduce</td></tr><tr><td>30372</td><td>ItemType is not updatable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1wallets~1{walletId}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get a wallet by wallet id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a wallet by wallet id",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1{storeId}~1clone",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to clone a store. Usually clone a draft store to published store because published store can&#39;t directly edit content.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: clone store info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "cloneStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store",
            "in": "query",
            "name": "targetStoreId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Clone a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1provider~1{id}",
    "value": {
      "delete": {
        "description": "Delete payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deletePaymentProviderConfig",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update payment provider config.&lt;br&gt;&lt;pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;namespace, * indicates all namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;region, * indicates all regions&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;aggregate&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;aggregate payment provider, such as XSOLLA, ADYEN, STRIPE&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;specials&lt;/td&gt;&lt;td&gt;List&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;special payment provider, such as ALIPAY, WXPAY&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;payment provider applied has priority: &lt;ol&gt;&lt;li&gt;namespace and region match&lt;/li&gt;&lt;li&gt;namespace matches and region is *&lt;/li&gt;&lt;li&gt;region matches and namespace is *&lt;/li&gt;&lt;li&gt;namespace and region are *&lt;/li&gt;&lt;/ol&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePaymentProviderConfig",
        "parameters": [
          {
            "description": "id",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigEdit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33221</td><td>TaxJar api token required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33271</td><td>Payment provider config for namespace [{namespace}] and region [{region}] already exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update payment provider config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1search",
    "value": {
      "get": {
        "description": "This API is used to search items by keyword in title, description and long description, It&#39;s language constrained, also if item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicSearchItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Search items by keyword",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1locale~1byIds",
    "value": {
      "get": {
        "description": "This API is used to bulk get locale items. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "bulkGetLocaleItems",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "commas separated item ids",
            "in": "query",
            "name": "itemIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/ItemInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk get locale items",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1published~1rollback",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to rollback a published store. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated store info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "rollbackPublishedStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Rollback a published store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders~1byExtTxId",
    "value": {
      "get": {
        "description": "List external order No by external transaction id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listExtOrderNoByExtTxId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "extTxId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List external order No by external transaction id",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppType",
    "value": {
      "get": {
        "description": "Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUserEntitlementsByAppType",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Query app entitlements by appType",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1history",
    "value": {
      "get": {
        "description": "Get user order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserOrderHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order histories",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1stripeconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test stripe configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testStripeConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test stripe configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppType",
    "value": {
      "get": {
        "description": "Query app entitlements by appType.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app entitlement pagination&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicQueryUserEntitlementsByAppType",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query app entitlements by appType",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1enable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "enable a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "enableUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "description": "walletId",
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1history",
    "value": {
      "get": {
        "description": "Get user order histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserOrderHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrderHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order histories",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}~1config",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get currency config by code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: simplified Currency&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCurrencyConfig",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyConfig"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get currency config",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores",
    "value": {
      "get": {
        "description": "This API is used to list stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listStores",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StoreInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List stores",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a non published store in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created store data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createStore",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StoreCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30174</td><td>Draft store already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1checkoutconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test checkout.com configuration in payment merchant config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testCheckoutConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test checkout.com configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1any",
    "value": {
      "get": {
        "description": "Exists any user active entitlement of specified itemIds, skus and appIds&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "existsAnyUserActiveEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Exists any user active entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1returnurl",
    "value": {
      "get": {
        "description": "Normalize payment return url for payment provider&lt;br&gt;Payment response: &lt;table&gt;&lt;tr&gt;&lt;td&gt;Field&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;orderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;order no&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentStatus&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;&lt;ul&gt;&lt;li&gt;DONE: The payment was successfully completed.&lt;/li&gt;&lt;li&gt;CANCELLED: The payment was cancelled by the shopper before completion, or the shopper returned to the merchant&#39;s site before completing the transaction.&lt;/li&gt;&lt;li&gt;PENDING: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to be completed.\n\nWhen the shopper has completed the payment you will receive a successful AUTHORISATION.&lt;/li&gt;&lt;li&gt;RECEIVED: Inform the shopper that you&#39;ve received their order, and are waiting for the payment to clear.&lt;/li&gt;&lt;li&gt;UNKNOWN: An error occurred during the payment processing.&lt;/li&gt;&lt;li&gt;FAILED: Shopper paid failed because of various reasons.&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;reason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;payment status reason&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;xsolla&lt;/i&gt;: parameters &#39;user_id&#39;, &#39;foreinginvoice&#39;, &#39;invoice_id&#39; and &#39;status&#39; will be automatically added to the link&lt;/li&gt;&lt;li&gt;&lt;i&gt;adyen&lt;/i&gt;: https://docs.adyen.com/developers/checkout/web-sdk&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicNormalizePaymentReturnUrl",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "returnUrl",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform order no",
            "in": "query",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform payment order no",
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform payment provider",
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "user_id",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "foreinginvoice",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "invoice_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "paypal and xsolla will return this",
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "type": "string"
          },
          {
            "description": "PayPal token",
            "in": "query",
            "name": "token",
            "required": false,
            "type": "string"
          },
          {
            "description": "PayPal payer id",
            "in": "query",
            "name": "PayerID",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect resultCode from checkout sdk",
            "in": "query",
            "name": "resultCode",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session data for checkout sdk",
            "in": "query",
            "name": "payload",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session Id for drop in",
            "in": "query",
            "name": "sessionId",
            "required": false,
            "type": "string"
          },
          {
            "description": "adyen redirect session data for drop in",
            "in": "query",
            "name": "redirectResult",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "no content"
          },
          "307": {
            "description": "successful operation",
            "headers": {
              "Location": {
                "description": "The Location header",
                "type": "string"
              }
            }
          }
        },
        "summary": "Normalize payment return url",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1campaign",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize campaign. At current it will only anonymize redeem history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Anonymize campaign",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}",
    "value": {
      "get": {
        "description": "Get payment merchant config by id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentMerchantConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment merchant config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicQueryUserSubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Subscribe a subscription. Support both real and virtual payment. Need go through payment flow using the paymentOrderNo if paymentFlowRequired true.&lt;br&gt;&lt;b&gt;ACTIVE USER subscription can&#39;t do subscribe again.&lt;/b&gt;&lt;br&gt;&lt;b&gt;The next billing date will be X(default 4) hours before the current period ends if correctly subscribed.&lt;/b&gt;&lt;br&gt;User with permission SANDBOX will create sandbox subscription that not real paid.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox subscription)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicSubscribeSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscribeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "subscribe request processed"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40121</td><td>Item type [{itemType}] does not support</td></tr><tr><td>40122</td><td>Subscription already been subscribed by user</td></tr><tr><td>40123</td><td>Currency [{currencyCode}] does not support</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr><tr><td>40173</td><td>Subscription [{subscriptionId}] current currency [{currentCurrency}] not match request currency [{requestCurrency}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Subscribe a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create an item. APP item only can created in publisher namespace.&lt;p&gt;An item create example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n   &#34;categoryPath&#34;: &#34;/games&#34;,\r\n   &#34;localizations&#34;: \\{\r\n       &#34;en&#34;: \\{\r\n           &#34;title&#34;:&#34;required&#34;,\r\n           &#34;description&#34;:&#34;optional&#34;,\r\n           &#34;longDescription&#34;:&#34;optional&#34;,\r\n           &#34;localExt&#34;: \\{\r\n                  &#34;properties&#34;:\\[\r\n                                   \\{\r\n                                       &#34;key1&#34;:&#34;value1&#34;,\r\n                                       &#34;key2&#34;:&#34;value2&#34;\r\n                                   \\}\r\n                  \\],\r\n                  &#34;functions&#34;:\\[\r\n                                   \\{\r\n                                       &#34;key1&#34;:&#34;value1&#34;,\r\n                                       &#34;key2&#34;:&#34;value2&#34;\r\n                                   \\}\r\n                 \\]\r\n           \\}\r\n        \\}\r\n   \\},\r\n   &#34;images&#34;: \\[\r\n     \\{\r\n           &#34;as&#34;:&#34;optional, image for&#34;,\r\n           &#34;caption&#34;:&#34;optional&#34;,\r\n           &#34;height&#34;:10,\r\n           &#34;width&#34;:10,\r\n           &#34;imageUrl&#34;:&#34;http://img-url-required&#34;,\r\n           &#34;smallImageUrl&#34;:&#34;http://small-img-url-required&#34;\r\n     \\}\r\n   \\],\r\n   &#34;thumbnailUrl&#34;: &#34;optional, thumbnail url&#34;,\r\n   &#34;status&#34;: &#34;ACTIVE&#34;,\r\n   &#34;listable&#34;: true,\r\n   &#34;purchasable&#34;: true,\r\n   &#34;itemType&#34;: &#34;APP(allowed: [APP,COINS,INGAMEITEM,CODE,BUNDLE])&#34;,\r\n   &#34;name&#34;: &#34;required, also will be used as entitlement name&#34;,\r\n   &#34;entitlementType&#34;: &#34;DURABLE(allowed:[DURABLE,CONSUMABLE], should be CONSUMABLE when item type is COINS)&#34;, \r\n   &#34;useCount&#34;: 1(optional, required if the entitlement type is consumable),\r\n   &#34;stackable&#34;: false,\r\n   &#34;appId&#34;: &#34;optional, required if itemType is APP&#34;,\r\n   &#34;appType&#34;: &#34;GAME(optional, required if itemType is APP)&#34;,\r\n   &#34;seasonType&#34;: &#34;PASS(optional, required if itemType is SEASON)&#34;,\r\n   &#34;baseAppId&#34;: &#34;optional, set value of game app id if you want to link to a game&#34;,\r\n   &#34;targetCurrencyCode&#34;: &#34;optional, required if itemType is COINS&#34;,\r\n   &#34;targetNamespace&#34;: &#34;optional, required when itemType is INGAMEITEM, the targetNamespace will only take effect when the item\r\n   created belongs to the publisher namespace&#34;,\r\n   &#34;sku&#34;: &#34;optional, commonly unique item code&#34;,\r\n   &#34;regionData&#34;: \\{\r\n       &#34;US(store&#39;s default region is required)&#34;: \\[\r\n         \\{\r\n            &#34;price&#34;:10,\r\n            &#34;discountPercentage&#34;: 0(integer, optional, range[0,100], discountedPrice = price  \\* ((100 - discountPercentage) \\* 0.01),\r\n              will use it to calculate discounted price if it is not 0),\r\n            &#34;discountAmount&#34;:0(integer, optional, range[0,itemPrice], will use it to calculate discounted price if discountPercentage is 0),\r\n            &#34;currencyCode&#34;:&#34;code(required, example: USD)&#34;,\r\n            &#34;currencyNamespace&#34;:&#34;test-ns-required(allow publisher namespace if namespace is publisher namespace, allow publisher and game namespace if namespace is not publisher namespace)&#34;,\r\n            &#34;trialPrice&#34;:5(required while fixedTrialCycles set, should &gt;=0 and &lt;= price, will same as price if not present),\r\n            &#34;purchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;expireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;discountPurchaseAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;,\r\n            &#34;discountExpireAt&#34;:&#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;\r\n         \\}\r\n       \\]\r\n   \\},\r\n   &#34;itemIds&#34;: \\[\r\n       &#34;itemId&#34;\r\n   \\],\r\n   &#34;itemQty&#34;: \\{\r\n       &#34;itemId&#34;:1\r\n   \\},\r\n   &#34;recurring&#34;: \\{\r\n       &#34;cycle&#34;:&#34;MONTHLY(allowed: [WEEKLY,MONTHLY,QUARTERLY,YEARLY])&#34;,\r\n       &#34;fixedFreeDays&#34;:0(integer, fixed free days, 0 means not set),\r\n       &#34;fixedTrialCycles&#34;:0(integer, fixed trial cycles, 0 means not set, will not take effect if fixedFreeDays set),\r\n       &#34;graceDays&#34;:7(integer, recurring grace days, retry recurring charge within configured days if charge fail, default 7)\r\n   \\},\r\n   &#34;tags&#34;: \\[\r\n       &#34;tag&#34;\r\n   \\],\r\n   &#34;features&#34;: \\[\r\n       &#34;feature&#34;\r\n   \\],\r\n   &#34;clazz&#34;: &#34;weapon&#34;,\r\n   &#34;boothName&#34;: &#34;C_campaign1&#34;,\r\n   &#34;displayOrder&#34;: 1000,\r\n   &#34;ext&#34;: \\{\r\n       &#34;properties&#34;:\\[\r\n           \\{\r\n               &#34;key1&#34;:&#34;value1&#34;,\r\n               &#34;key2&#34;:&#34;value2&#34;\r\n           \\}\r\n       \\],\r\n       &#34;functions&#34;:\\[\r\n           \\{\r\n               &#34;key1&#34;:&#34;value1&#34;,\r\n               &#34;key2&#34;:&#34;value2&#34;\r\n           \\}\r\n       \\]\r\n   \\},\r\n   &#34;maxCountPerUser&#34;: 1(integer, optional, -1 means UNLIMITED),\r\n   &#34;maxCount&#34;: 1(integer, optional, -1 means UNLIMITED, unset when itemType is CODE)\r\n}&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30322</td><td>Bundle item [{itemId}] can't be bundled</td></tr><tr><td>30325</td><td>Code item [{itemId}] can't be bundled</td></tr><tr><td>30326</td><td>Subscription item [{itemId}] can't be bundled</td></tr><tr><td>30329</td><td>Invalid bundled item [{itemId}] quantity</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30321</td><td>Invalid item discount amount</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30323</td><td>Target namespace is required</td></tr><tr><td>30327</td><td>Invalid item trial price</td></tr><tr><td>30330</td><td>Invalid item region price currency namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create an Item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to sync an in game item in game namespace to publisher namespace, at current BUNDLE can&#39;t be synced.&lt;p&gt;The synced item has an additional field targetItemId besides targetNamespace, mostly this item should not modified manually again. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncInGameItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InGameItemSync"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30021</td><td>Default language [{language}] required</td></tr><tr><td>30022</td><td>Default region [{region}] is required</td></tr><tr><td>30324</td><td>Invalid namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr><tr><td>30373</td><td>ItemType [{itemType}] is not allowed in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync an in game item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1entitlements",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize entitlement. At current it will only anonymize entitlement, entitlement history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize entitlement",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1epicgames~1sync",
    "value": {
      "put": {
        "description": "Sync epic games inventory&#39;s items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncEpicGamesInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EpicGamesReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EpicGamesReconcileResult"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync epic games inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1published~1backup",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to get a store&#39;s backup. &lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: store backup info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPublishedStoreBackup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreBackupInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30143</td><td>Published store [{storeId}] backup doest not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a published store's backup",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1rewards",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Fulfill rewards.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT&#34;, action=1 (CREATED)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "fulfillRewards",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardsRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "fulfill successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill rewards",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1byAppId",
    "value": {
      "get": {
        "description": "This API is used to get item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetItemByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get item by appId",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1provider~1matched",
    "value": {
      "get": {
        "description": "Debug matched payment provider config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "debugMatchedPaymentProviderConfig",
        "parameters": [
          {
            "default": "*",
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "default": "*",
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentProviderConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33241</td><td>Payment provider config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debug matched payment provider config(internal)",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1link",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment url.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Get payment link&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetPaymentUrl",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentUrlCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentUrl"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33321</td><td>Payment provider [{paymentProvider}] not support currency [{currency}]</td></tr><tr><td>33322</td><td>Payment provider [{paymentProvider}] not supported</td></tr><tr><td>33332</td><td>Amount too small, please contact administrator</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment url",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1iap~1mock~1receipt",
    "value": {
      "put": {
        "description": "&lt;b&gt;[TEST FACILITY ONLY] Forbidden in live environment. &lt;/b&gt; Mock fulfill iap item without validate receipt.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "mockFulfillIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MockIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Mock fulfill iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUserOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownershipToken",
    "value": {
      "get": {
        "description": "Gets an entitlement ownership token of specified itemIds, skus and appIds&lt;p&gt;The decoded ownership token header like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n  &#34;kid&#34;: &#34;9fd4cd5f991cebe3323605cd12d3b8bfdfc73fa4&#34;,\r\n  &#34;typ&#34;: &#34;JWT&#34;,\r\n  &#34;alg&#34;: &#34;RS256&#34;\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;That you can get the jwks by api &lt;baseUrl&gt;/platform/jwks, if the configured private key is same as IAM, &lt;p&gt;you can also get jwks from IAM endpoint. &lt;p&gt;The decoded ownership token payload like below:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n &#34;namespace&#34;: &#34;accelbyte&#34;,\r\n &#34;entitlements&#34;: [\r\n  {\r\n    &#34;itemId&#34;: &#34;4c1296291f604c199f7bb7f0ee02e5f8&#34;,\r\n    &#34;appType&#34;: null,\r\n    &#34;appId&#34;: null,\r\n    &#34;namespace&#34;: &#34;accelbyte&#34;,\r\n    &#34;itemNamespace&#34;: &#34;accelbyte&#34;,\r\n    &#34;sku&#34;: &#34;prime-plus&#34;\r\n  },\r\n  {\r\n    &#34;itemId&#34;: &#34;e8f4974cf45c4e1f8d4f0c6990c518bd&#34;,\r\n    &#34;appType&#34;: &#34;GAME&#34;,\r\n    &#34;appId&#34;: &#34;omeganebula&#34;,\r\n    &#34;namespace&#34;: &#34;accelbyte&#34;,\r\n    &#34;itemNamespace&#34;: &#34;accelbyte&#34;,\r\n    &#34;sku&#34;: &#34;APPG005ON&#34;\r\n  }\r\n ],\r\n&#34;sub&#34;: &#34;66459eb6a4e44e6fb0040bd20c1079a5&#34;,\r\n&#34;exp&#34;: 1619624360,\r\n&#34;iat&#34;: 1619624060\r\n}\r\n&lt;/code&gt;&lt;/pre&gt;&lt;b&gt;if there&#39;s no active entitlement for the specific params, the entitlements section will be omitted&lt;/b&gt;.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetEntitlementOwnershipToken",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "appIds",
            "required": false,
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "skus",
            "required": false,
            "type": "array"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OwnershipToken"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Gets an entitlement ownership token",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1tickets~1{boothName}",
    "value": {
      "get": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Get ticket(code/key) dynamic based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:TICKET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: ticket dynamic&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getTicketDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketDynamicInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get ticket dynamic",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1keygroups",
    "value": {
      "get": {
        "description": "Query key groups, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of key group&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryKeyGroups",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query key groups",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created key group&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyGroupCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1fulfill",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Fulfill an order if the order is charged but fulfill failed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfilled order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "fulfillUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32172</td><td>Invalid order status [{status}] for order [{orderNo}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1tickets~1{boothName}",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Acquire ticket(code/key) based on booth name.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "acquireUserTicket",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketAcquireRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketAcquireResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37071</td><td>Insufficient ticket in booth [{boothName}] in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Acquire ticket",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1rewards~1byCode",
    "value": {
      "get": {
        "description": "This API is used to get reward by reward code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getRewardByCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "rewardCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34043</td><td>Reward with code [{rewardCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward by code",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1orders",
    "value": {
      "get": {
        "description": "Sync payment orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync payment orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncPaymentOrders",
        "parameters": [
          {
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "start",
            "required": true,
            "type": "string"
          },
          {
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "end",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nextEvaluatedKey",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync payment orders",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1notifications",
    "value": {
      "get": {
        "description": "Query payment notifications.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment notifications&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryPaymentNotifications",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "externalId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ERROR",
              "IGNORED",
              "PROCESSED",
              "WARN"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "notificationType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "notificationSource",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentNotificationPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment notifications",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create a reward.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created reward data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createReward",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RewardCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34042</td><td>Reward item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34071</td><td>Reward with code [{rewardCode}] already exists in namespace [{namespace}]</td></tr><tr><td>34072</td><td>Duplicate reward condition [{rewardConditionName}] found in reward [{rewardCode}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1playstation",
    "value": {
      "delete": {
        "description": "Delete playstation iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deletePlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get playstation iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: playstation iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPlayStationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update playstation iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated playstation iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePlaystationIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlaystationIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlayStationIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update playstation iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}~1keys",
    "value": {
      "get": {
        "description": "This API is used to list keys of a key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: keys&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listKeys",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ACQUIRED",
              "ACTIVE"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyPagingSliceResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List keys of a key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This API is used to upload keys with csv format to a key group.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "uploadKeys",
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37221</td><td>Invalid key file</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload keys to key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1checkoutconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update checkout.com config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCheckoutConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update checkout.com config",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1byCriteria",
    "value": {
      "get": {
        "description": "This API is used to query items by criteria within a store. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicQueryItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "category path",
            "in": "query",
            "name": "categoryPath",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "INGAMEITEM",
              "MEDIA",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseAppId",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "features, separate multiple value by commas parameter",
            "in": "query",
            "name": "features",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "name:asc,displayOrder:asc",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique value for example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "summary": "Query items by criteria",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1acquire",
    "value": {
      "put": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This api is used for acquiring a published item while the item is maxCount limited, it will decrease the sale available count.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: acquire result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "acquireItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ItemAcquireRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemAcquireResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Acquire item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1credit",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Credit a user wallet by currency code, if wallet not exists, it will create a new wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "creditUserWallet",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreditRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Credit a user wallet by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1byAppId",
    "value": {
      "get": {
        "description": "Get my app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace app entitlement ownership&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetMyAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1google~1receipt",
    "value": {
      "put": {
        "description": "Verify google iap receipt and fulfill item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicFulfillGoogleIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleReceiptResolveResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39122</td><td>Google iap receipt is invalid with status code [{statusCode}] and error message [{message}]</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39172</td><td>The order id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39173</td><td>The purchase status of google play order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>39174</td><td>The google iap purchase time of order [{orderId}] in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill google iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1entitlements~1{entitlementId}",
    "value": {
      "get": {
        "description": "Get entitlement.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1customization",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "Get payment provider customization, at current only Adyen provide customization. This api has been deprecated, pls use /public/namespaces/{namespace}/payment/publicconfig to get adyen config&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: customization&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentCustomization",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "ADYEN",
              "ALIPAY",
              "CHECKOUT",
              "PAYPAL",
              "STRIPE",
              "WALLET",
              "WXPAY",
              "XSOLLA"
            ],
            "in": "query",
            "name": "paymentProvider",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customization"
            }
          }
        },
        "summary": "Get payment provider customization",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1history",
    "value": {
      "get": {
        "description": "Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserSubscriptionBillingHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeFree",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BillingHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription billing histories",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byAppId",
    "value": {
      "get": {
        "description": "Get user app entitlement by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserAppEntitlementByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AppEntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31142</td><td>Entitlement with appId [{appId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1fulfillment~1scripts",
    "value": {
      "get": {
        "description": "List all fulfillment scripts.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listFulfillmentScripts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FulfillmentScriptInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List all fulfillment scripts",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1enable",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Enable an item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated item&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "enableItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable an item",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards~1import",
    "value": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Import reward configurations for a given namespace from file. At current, only JSON file is supported.&lt;p&gt;Other detail info:&lt;ul&gt;&lt;li&gt;&lt;i&gt;*Required permission*: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=1 (CREATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "importRewards",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "description": "replaceExisting",
            "in": "query",
            "name": "replaceExisting",
            "required": true,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful import of reward configs"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34021</td><td>Reward data for namespace [{namespace}] is invalid</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Import reward configurations",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1bySku",
    "value": {
      "get": {
        "description": "Get user entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1checkoutconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test checkout.com configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;publicKey&lt;/li&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testCheckoutConfig",
        "parameters": [
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CheckoutConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test checkout.com configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1import",
    "value": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This API is used to import a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "importStore",
        "parameters": [
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default we will use published store id,and will create published store if it dose not exist",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StoreInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30121</td><td>Store data is invalid</td></tr><tr><td>30122</td><td>Store's meta mismatch</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Import a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1xsollaconfig~1test",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Test xsolla configuration in payment merchant config. Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test xsolla config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testXsollaConfigById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test xsolla configuration by id",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1bySku",
    "value": {
      "get": {
        "description": "Get user entitlement by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserEntitlementBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1wallets",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query wallets.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated wallets info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryWallets",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "query",
            "name": "currencyCode",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query wallets",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1{itemId}~1locale",
    "value": {
      "get": {
        "description": "This API is used to get an item in locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetItem",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get an item in locale",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1methods",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment methods.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment method list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetPaymentMethods",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentMethod"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get payment methods",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1bySku~1locale",
    "value": {
      "get": {
        "description": "This API is used to get an item by sku in specific locale. If item not exist in specific region, default region item will return.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getLocaleItemBySku",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": false,
            "description": "whether populate bundled items if it's a bundle",
            "in": "query",
            "name": "populateBundle",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PopulatedItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an item by sku in locale",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1bySku",
    "value": {
      "get": {
        "description": "Get user entitlement by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlementBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31143</td><td>Entitlement with sku [{sku}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1itemId~1bySku",
    "value": {
      "get": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used to get the itemId by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the itemId with sku&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getItemIdBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemId"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get itemId by sku",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1status",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Check payment order paid status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment order paid result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCheckPaymentOrderPaidStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPaidResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Check payment order paid status",
        "tags": [
          "PaymentStation"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1byCriteria",
    "value": {
      "get": {
        "description": "This API is used to query items by criteria within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "description": "category path",
            "in": "query",
            "name": "categoryPath",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "BUNDLE",
              "CODE",
              "COINS",
              "INGAMEITEM",
              "MEDIA",
              "SEASON",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "itemType",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "baseAppId",
            "required": false,
            "type": "string"
          },
          {
            "description": "tags, separate multiple value by commas parameter",
            "in": "query",
            "name": "tags",
            "required": false,
            "type": "string"
          },
          {
            "description": "features, separate multiple value by commas parameter",
            "in": "query",
            "name": "features",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "description": "exist in region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          },
          {
            "description": "allowed format: \\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z , filter date include(purchaseAt, expireAt)",
            "in": "query",
            "name": "availableDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "targetNamespace",
            "in": "query",
            "name": "targetNamespace",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "name:asc,displayOrder:asc",
            "description": "default is name:asc,displayOrder:asc, allow values: [name, name:asc, name:desc, createdAt, createdAt:asc, createdAt:desc, updatedAt, updatedAt:asc, updatedAt:desc, displayOrder, displayOrder:asc, displayOrder:desc],and support sort group, eg: sortBy=name:asc,createdAt:desc. Make sure to always use more than one sort if the first sort is not an unique valuefor example, if you wish to sort by displayOrder, make sure to include other sort such as name or createdAt after the first sort, eg: displayOrder:asc,name:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query items by criteria",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1google",
    "value": {
      "delete": {
        "description": "Delete google iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get google iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: google iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update google iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateGoogleIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update google iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1stores",
    "value": {
      "get": {
        "description": "This API is used to list all stores in a namespace.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of stores&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicListStores",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StoreInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "List all stores",
        "tags": [
          "Store"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1code",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Redeem campaign code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT&#34;, action=1 (CREATED)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "redeemCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillCodeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem campaign code",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1dynamic",
    "value": {
      "get": {
        "description": "Get item dynamic data for published item.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: item dynamic data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getItemDynamicData",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemDynamicDataInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item dynamic data",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1xbl~1sync",
    "value": {
      "put": {
        "description": "Sync Xbox inventory&#39;s dlc items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncXboxDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync Xbox dlc items.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1cancel",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel user order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCancelUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32177</td><td>Order [{orderNo}] is not cancelable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel user order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1entitlements",
    "value": {
      "get": {
        "description": "Query entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1fulfillment~1history",
    "value": {
      "get": {
        "description": "Query fulfillment histories in a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:FULFILLMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query fulfillment history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryFulfillmentHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "FAIL",
              "SUCCESS"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query fulfillment histories",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1currencies~1{currencyCode}",
    "value": {
      "delete": {
        "description": "Delete a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=8 (DELETE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteCurrency",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a currency by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated currency&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCurrency",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "currencyCode",
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1byAppId",
    "value": {
      "get": {
        "description": "This API is used to get the item by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with that appId&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getItemByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30342</td><td>Item of appId [{appId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item by appId",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1byItemId",
    "value": {
      "get": {
        "description": "Get my entitlement ownership by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetMyEntitlementOwnershipByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my entitlement ownership by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1campaigns",
    "value": {
      "get": {
        "description": "Query campaigns, if name is presented, it&#39;s fuzzy match.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ) (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: slice of campaigns&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryCampaigns",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tag",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query campaigns",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created campaign&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37171</td><td>Campaign [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1xbl~1cert",
    "value": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload xbl business partner cert file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated xbl iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateXblBPCertFile",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          },
          {
            "in": "formData",
            "name": "password",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/XblIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload xbl business partner cert file",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1{itemId}~1app",
    "value": {
      "get": {
        "description": "This API is used to get an app info.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: app data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getApp",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an app info",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to update an app.&lt;p&gt;An app update example:&lt;p&gt;&lt;pre&gt;&lt;code&gt;{\r\n  &#34;developer&#34;: &#34;accelbyte&#34;,\r\n  &#34;publisher&#34;: &#34;accelbyte&#34;,\r\n  &#34;websiteUrl&#34;: &#34;http://accelbyte.io&#34;,\r\n  &#34;forumUrl&#34;: &#34;http://accelbyte.io&#34;,\r\n  &#34;platforms&#34;: \\[&#34;Windows(allowed values: Windows, MacOS, Linux, IOS, Android)&#34;\\],\r\n  &#34;platformRequirements&#34;: \\{\r\n    &#34;Windows&#34;: \\[\r\n      \\{\r\n        &#34;label&#34;:&#34;minimum(can be minimum or recommended)&#34;,\r\n        &#34;osVersion&#34;:&#34;os version&#34;,\r\n        &#34;processor&#34;:&#34;processor&#34;,\r\n        &#34;ram&#34;:&#34;RAM&#34;,\r\n        &#34;graphics&#34;:&#34;graphics&#34;,\r\n        &#34;directXVersion&#34;:&#34;directXVersion&#34;,\r\n        &#34;diskSpace&#34;:&#34;diskSpace&#34;,\r\n        &#34;soundCard&#34;:&#34;soundCard&#34;,\r\n        &#34;additionals&#34;:&#34;additionals&#34;\r\n      \\}\r\n     \\]\r\n  \\},\r\n  &#34;carousel&#34;: \\[\r\n    \\{\r\n      &#34;type&#34;:&#34;image(allowed values: image, video)&#34;,\r\n      &#34;videoSource&#34;:&#34;generic(allowed values:generic, youtube, viemo)&#34;,\r\n      &#34;url&#34;:&#34;url&#34;,\r\n      &#34;alt&#34;:&#34;alternative url or text&#34;,\r\n      &#34;thumbnailUrl&#34;:&#34;thumbnail url&#34;,\r\n      &#34;previewUrl&#34;:&#34;preview url&#34;,\r\n    \\}\r\n  \\],\r\n  &#34;localizations&#34;: \\{\r\n    &#34;en&#34;: \\{\r\n      &#34;slogan&#34;:&#34;slogan&#34;,\r\n      &#34;announcement&#34;:&#34;announcement&#34;,\r\n    \\}\r\n  \\},\r\n  &#34;primaryGenre&#34;: &#34;Action&#34;,\r\n  &#34;genres&#34;: \\[&#34;Action&#34;, &#34;Adventure&#34;\\],\r\n  &#34;players&#34;: \\[&#34;Single&#34;\\],\r\n  &#34;releaseDate&#34;: &#34;optional yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSS&#39;Z&#39;&#34;\r\n}&lt;/code&gt;&lt;/pre&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated app data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateApp",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullAppInfo"
            }
          },
          "404": {
            "description": "<table><tr><tdErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30173</td><td>Published store can't modify content</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update an app",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}",
    "value": {
      "get": {
        "description": "Query campaign codes.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ) (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of codes&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryCodes",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "code",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeInfoPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This API is used to create campaign codes, it will increase the batch No. based on last creation.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=1 (CREATE)&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: number of codes created&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createCodes",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CodeCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CodeCreateResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create campaign codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1item",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a iap item config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteIAPItemConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get iap item config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getIAPItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPItemConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>IAP item config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update iap item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated iap item config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateIAPItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/IAPItemConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/IAPItemConfigInfo"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update iap item config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1orders",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize order. At current it will only anonymize order, order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize order",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1redemption",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; Redeem code. If the campaign which the code belongs to is INACTIVE, the code couldn&#39;t be redeemed even if its status is ACTIVE.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Redeem result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "applyUserRedemption",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RedeemRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RedeemResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem code",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1rewards~1byCriteria",
    "value": {
      "get": {
        "description": "This API is used to query rewards by criteria.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of rewards&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryRewards_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "event topic",
            "in": "query",
            "name": "eventTopic",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          },
          {
            "default": "namespace:asc,rewardCode:asc",
            "description": "default is namespace:asc,rewardCode:asc, allow values: [namespace, namespace:asc, namespace:desc, rewardCode, rewardCode:asc, rewardCode:desc],and support sort group, eg: sortBy=namespace:asc,rewardCode:asc",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardPagingSlicedResult"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query rewards by criteria",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1orders",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicQueryUserOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CLOSED",
              "DELETED",
              "FULFILLED",
              "FULFILL_FAILED",
              "INIT",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user orders",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create an order. The result contains the checkout link and payment token. User with permission SANDBOX will create sandbox order that not real paid for xsolla/alipay and not validate price for wxpay.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the user is banned: ORDER_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCreateUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32121</td><td>Order price mismatch</td></tr><tr><td>32122</td><td>Item type [{itemType}] does not support</td></tr><tr><td>32123</td><td>Item is not purchasable</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>49147</td><td>Published season does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32175</td><td>Exceed item [{itemId}] max count [{maxCount}] per user</td></tr><tr><td>32176</td><td>Exceed item [{itemId}] max count [{maxCount}]</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>49183</td><td>Pass item does not match published season pass</td></tr><tr><td>49184</td><td>Tier item does not match published season tier</td></tr><tr><td>49185</td><td>Season has not started</td></tr><tr><td>49186</td><td>Pass already owned</td></tr><tr><td>49187</td><td>Exceed max tier count</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1fulfillment~1code",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Redeem campaign code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT&#34;, action=1 (CREATED)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: fulfillment result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicRedeemCode",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillCodeRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr><tr><td>37142</td><td>Code [{code}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37172</td><td>Campaign [{campaignId}] is inactive in namespace [{namespace}]</td></tr><tr><td>37173</td><td>Code [{code}] is inactive in namespace [{namespace}]</td></tr><tr><td>37174</td><td>Exceeded max redeem count per code [{maxCount}]</td></tr><tr><td>37175</td><td>Exceeded max redeem count per code per user [{maxCount}]</td></tr><tr><td>37177</td><td>Code redemption not started</td></tr><tr><td>37178</td><td>Code redemption already ended</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []"
            ],
            "authorization": []
          }
        ],
        "summary": "Redeem campaign code",
        "tags": [
          "Fulfillment"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1items~1bySku",
    "value": {
      "get": {
        "description": "This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store item)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetItemBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get item by sku",
        "tags": [
          "Item"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get user subscription.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetUserSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements",
    "value": {
      "get": {
        "description": "Query entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Grant user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: granted entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "grantUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementGrant"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/StackableEntitlementInfo"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Grant user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1byItemId",
    "value": {
      "get": {
        "description": "Get user entitlement by itemId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlementByItemId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31144</td><td>Entitlement with itemId [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement by itemId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1orders~1stats",
    "value": {
      "get": {
        "description": "Get Order Statistics.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order statistics&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getOrderStatistics",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderStatistics"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Order Statistics",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1countOfItem",
    "value": {
      "get": {
        "description": "This API is used to get the count of purchased item which is the order target.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Item purchased count&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "countOfPurchasedItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PurchasedItemCount"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get the count of purchased item",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1xbl~1sync",
    "value": {
      "put": {
        "description": "Sync Xbox inventory&#39;s items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncXboxInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XblReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/XblReconcileResult"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync Xbox inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}~1dynamic",
    "value": {
      "get": {
        "description": "Get key group dynamic.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getKeyGroupDynamic",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupDynamicInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get key group dynamic",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1payment~1accounts",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get payment accounts.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Payment account list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetPaymentAccounts",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PaymentAccount"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment accounts",
        "tags": [
          "PaymentAccount"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1keygroups~1{keyGroupId}",
    "value": {
      "get": {
        "description": "Get key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: key group info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update key group.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:KEYGROUP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated key group&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateKeyGroup",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "keyGroupId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/KeyGroupUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KeyGroupInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37241</td><td>Key group [{keyGroupId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37271</td><td>Key group [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update key group",
        "tags": [
          "KeyGroup"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:KEYGROUP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders",
    "value": {
      "get": {
        "description": "Query payment orders.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: query payment orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryPaymentOrders",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "AUTHORISED",
              "AUTHORISE_FAILED",
              "CHARGEBACK",
              "CHARGEBACK_REVERSED",
              "CHARGED",
              "CHARGE_FAILED",
              "DELETED",
              "INIT",
              "NOTIFICATION_OF_CHARGEBACK",
              "REFUNDED",
              "REFUNDING",
              "REFUND_FAILED",
              "REQUEST_FOR_INFORMATION"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "EXTERNAL",
              "INTERNAL"
            ],
            "in": "query",
            "name": "channel",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "extTxId",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query payment orders",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;p&gt;This API is used to create payment order from non justice service. e.g. from dedicated server, the result contains the payment station url.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Path Parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that payment order resides in, should be publisher namespace if it&#39;s a Steam like platform that share &lt;br&gt;payment config cross namespaces, otherwise it&#39;s the game namespace&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;strong&gt;Request Body Parameters:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;External order number, it should be unique in invoker order system&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;User id for the order owner in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be user character id &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;price which should be greater than 0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;title&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item title&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;description&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Item description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency code, default is USD&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Currency namespace, default is publisher namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;region&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Country of the user, will get from user info if not present&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;language&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Language of the user&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sandbox&lt;/td&gt;&lt;td&gt;Boolean&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;set to true will create sandbox order that not real paid for xsolla/alipay and will not validate &lt;br&gt;price for wxpay.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;returnUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized return url for redirect once payment finished, leave unset to use configuration in &lt;br&gt;namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;notifyUrl&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;customized notify url for payment web hook, leave unset to use configuration in namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Custom parameters&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Request Body Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{\r\n           &#34;extOrderNo&#34;: &#34;123456789&#34;,\n           &#34;sku&#34;: &#34;sku&#34;,\n           &#34;targetNamespace&#34;: &#34;game1&#34;,\n           &#34;targetUserId&#34;: &#34;94451623768940d58416ca33ca767ec3&#34;,\n           &#34;extUserId&#34;: &#34;678&#34;,\n           &#34;title&#34;: &#34;Frostmourne&#34;,\n           &#34;description\\&#34;: &#34;Here was power. Here was despair&#34;,\n           &#34;price&#34;: 100,\n           &#34;region&#34;: &#34;CN&#34;, \n           &#34;language&#34;: &#34;zh-CN&#34;, \n           &#34;currencyCode&#34;: &#34;USD&#34;,\n           &#34;currencyNamespace&#34;: &#34;accelbyte&#34;\r\n}&lt;/pre&gt;&lt;/code&gt;&lt;h4&gt;Payment Notification:&lt;/h4&gt;&lt;p&gt;After user complete the payment, it will send notification to configured web hook, http status code should return 200 or 204 once you resolve notification successfully, otherwise payment system will retry notification in interval&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;payload&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment notification payload in json string &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sign&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;sha1 hex signature for payload and private key&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Payment notification parameter Example:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;code style=&#39;overflow: auto&#39;&gt;{\r\n       &#34;payload&#34;: &#34;{\n           \\&#34;type\\&#34;: \\&#34;payment\\&#34;,\n           \\&#34;nonceStr\\&#34;: \\&#34;34c1dcf3eb58455eb161465bbfc0b590\\&#34;,\n           \\&#34;paymentOrderNo\\&#34;: \\&#34;18081239088\\&#34;,\n           \\&#34;namespace\\&#34;: \\&#34;accelbyte\\&#34;,\n           \\&#34;targetNamespace\\&#34;: \\&#34;game1\\&#34;,\n           \\&#34;targetUserId\\&#34;: \\&#34;94451623768940d58416ca33ca767ec3\\&#34;,\n           \\&#34;extOrderNo\\&#34;: \\&#34;123456789\\&#34;,\n           \\&#34;sku\\&#34;: \\&#34;sku\\&#34;,\n           \\&#34;extUserId\\&#34;: \\&#34;678\\&#34;,\n           \\&#34;price\\&#34;: 100,\n           \\&#34;paymentProvider\\&#34;: \\&#34;XSOLLA\\&#34;,\n           \\&#34;vat\\&#34;: 0,\n           \\&#34;salesTax\\&#34;: 0,\n           \\&#34;paymentProviderFee\\&#34;: 0,\n           \\&#34;paymentMethodFee\\&#34;: 0,\n           \\&#34;currency\\&#34;: {\n                   \\&#34;currencyCode\\&#34;: \\&#34;USD\\&#34;,\n                   \\&#34;currencySymbol\\&#34;: \\&#34;$\\&#34;,\n                   \\&#34;currencyType\\&#34;: \\&#34;REAL\\&#34;,\n                   \\&#34;namespace\\&#34;: \\&#34;accelbyte\\&#34;,\n                   \\&#34;decimals\\&#34;: 2\n               },\n           \\&#34;status\\&#34;: \\&#34;CHARGED\\&#34;,\n           \\&#34;createdTime\\&#34;: \\&#34;2018-07-28T00:39:16.274Z\\&#34;,\n           \\&#34;chargedTime\\&#34;: \\&#34;2018-07-28T00:39:16.274Z\\&#34;\n       }&#34;,\r\n       &#34;sign&#34;:&#34;e31fb92516cc9faaf50ad70343e1293acec6f3d5&#34;\r\n}&lt;/pre&gt;&lt;/code&gt;&lt;p&gt;&lt;strong&gt;Payment notification payload parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;type&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Notification type: &#39;payment&#39;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment system generated order number&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extOrderNo&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External order number that passed by invoker&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Namespace that related payment order resides in&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetNamespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;targetUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;The user id in game namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;sku&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Item identify, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;extUserId&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;External user id, can be character id, it will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;price&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Price of item&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProvider&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider, allowed values: xsolla/alipay/wxpay/wallet&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vat&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order VAT&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;salesTax&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order sales tax&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentProviderFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment provider fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;paymentMethodFee&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment method fee&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currency&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order currency info&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;status&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Payment order status&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;statusReason&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Payment order status reason&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;createdTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order created&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;chargedTime&lt;/td&gt;&lt;td&gt;Datetime&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;The time of the order charged&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;customParameters&lt;/td&gt;&lt;td&gt;Map&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;custom parameters, will return if pass it when create payment&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;nonceStr&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Random string, max length is 32, can be timestamp or uuid&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Currency info parameter list:&lt;/strong&gt;&lt;/p&gt;&lt;pre&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Required&lt;/td&gt;&lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyCode&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Code&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencySymbol&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency Symbol&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;currencyType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency type(REAL/VIRTUAL)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;namespace&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency namespace&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;decimals&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Currency decimals&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/pre&gt;&lt;h4&gt;Encryption Rule:&lt;/h4&gt;&lt;p&gt;Concat payload json string and private key and then do sha1Hex.&lt;/p&gt;&lt;h4&gt;Other detail info:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;&lt;i&gt;Token type&lt;/i&gt;: client token&lt;/li&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission(user with this permission will create sandbox order)&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;It will be forbidden while the target user is banned: PAYMENT_INITIATE or ORDER_AND_PAYMENT&lt;/li&gt;&lt;li&gt;&lt;b&gt;cross namespace allowed&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created payment order info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createPaymentOrderByDedicated",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ExternalPaymentOrderCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderCreateResult"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33121</td><td>Recurring payment failed with code: [{errorCode}] and message: [{errorMessage}] by provider: [{provider}]</td></tr><tr><td>33122</td><td>Subscription not match when create payment order</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "403": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20016</td><td>action is banned</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36141</td><td>Currency [{currencyCode}] does not exist in namespace [{namespace}]</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr><tr><td>33145</td><td>Recurring token not found</td></tr><tr><td>20008</td><td>user [{userId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr><tr><td>33173</td><td>ExtOrderNo [{extOrderNo}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create payment order by dedicated server",
        "tags": [
          "Payment(Dedicated)"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1history",
    "value": {
      "get": {
        "description": "Get user subscription billing histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription billing history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserSubscriptionBillingHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "excludeFree",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BillingHistoryPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user subscription billing histories",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1notifications",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; This API is used as a web hook for payment notification from justice payment service.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Process result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "processUserSubscriptionNotification",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TradeNotification"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "process successfully"
          },
          "400": {
            "description": "process failed"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Web hook for payment notification",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1adyenconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test adyen configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;li&gt;merchantAccount&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;notificationHmacKey&lt;/li&gt;&lt;li&gt;notificationUsername&lt;/li&gt;&lt;li&gt;notificationPassword&lt;/li&gt;&lt;li&gt;liveEndpointUrlPrefix&lt;/li&gt;&lt;li&gt;allowedPaymentMethods&lt;/li&gt;&lt;li&gt;blockedPaymentMethods&lt;/li&gt;&lt;li&gt;settings&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testAdyenConfig",
        "parameters": [
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AdyenConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test adyen configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{walletId}~1debit",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Debit a user wallet.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "debitUserWallet",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "walletId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DebitRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35141</td><td>Wallet [{walletId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debit a user wallet",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1google~1cert",
    "value": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload google play p12 file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated google iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateGoogleP12File",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoogleIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload google play p12 file",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1currencies",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "List currencies of a namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Currency List&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "listCurrencies",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CurrencyInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "List currencies",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a currency.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CURRENCY&#34;, action=1 (CREATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: created currency&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "createCurrency",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CurrencyCreate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CurrencyInfo"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>36171</td><td>Currency [{currencyCode}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Create a currency",
        "tags": [
          "Currency"
        ],
        "x-authorization": {
          "action": "1",
          "resource": "ADMIN:NAMESPACE:{namespace}:CURRENCY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1paypalconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test PayPal configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;clientID&lt;/li&gt;&lt;li&gt;clientSecret&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;webHookId&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testPayPalConfig",
        "parameters": [
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PayPalConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test PayPal configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1dlc~1config~1platformMap",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a Platform DLC config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deletePlatformDLCConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "get": {
        "description": "Get Platform DLC config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPlatformDLCConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>Platform DLC config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update Platform DLC config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated Platform DLC config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updatePlatformDLCConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PlatformDLCConfigInfo"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update Platform DLC config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1categories",
    "value": {
      "get": {
        "description": "This API is used to get root categories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: root category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetRootCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Root Categories",
        "tags": [
          "Category"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1rewards~1{rewardId}",
    "value": {
      "get": {
        "description": "This API is used to get reward by reward Id.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: reward instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getReward_1",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "rewardId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/RewardInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>34041</td><td>Reward [{rewardId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get a reward",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1psn~1sync",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Synchronize with entitlements in PSN Store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: result of synchronization&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicReconcilePlayStationStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlayStationReconcileRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/PlayStationReconcileResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39123</td><td>PSN Sync failed with status code [{statusCode}] and psnAuthCode is [{psnAuthCode}]</td></tr>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Synchronize with entitlements in PSN Store.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1orders~1{orderNo}",
    "value": {
      "get": {
        "description": "Get order by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order instance&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1payment",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize payment. At current it will only anonymize payment order, payment order history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizePayment",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize payment",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1categories~1{categoryPath}~1children",
    "value": {
      "get": {
        "description": "This API is used to get child categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of child categories data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetChildCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/CategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get Child Categories",
        "tags": [
          "Category"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1fulfillment~1scripts~1tests~1eval",
    "value": {
      "post": {
        "description": "&lt;b&gt;[TEST FACILITY ONLY]&lt;/b&gt;Test eval fulfillment script.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:FULFILLMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testFulfillmentScriptEval",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptEvalTestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FulfillmentScriptEvalTestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:FULFILLMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test eval fulfillment script",
        "tags": [
          "FulfillmentScript"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:FULFILLMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1fulfillment",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize fulfillment. At current it will only anonymize fulfillment history.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeFulfillment",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize fulfillment",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1cancel",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Set force true, will ignore the error if subscription is during recurring charging.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "cancelSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1codes~1campaigns~1{campaignId}~1disable~1bulk",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk disable codes.&lt;p&gt;Bulk disable campaign codes, all matched codes will be disabled except those have already been redeemed.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the number of code actually disabled&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "bulkDisableCodes",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "description": "if not present will match all except 0",
            "format": "int32",
            "in": "query",
            "name": "batchNo",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BulkOperationResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Bulk disable codes",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1grant",
    "value": {
      "get": {
        "description": "Get user order grant that fulfilled by this order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order grant&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserOrderGrant",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderGrantInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user order grant",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1wallets",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize wallet. At current it will only anonymize wallet, wallet transaction.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeWallet",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize wallet",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1stadia~1cert",
    "value": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload stadia json config file.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated stadia iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateStadiaJsonConfigFile",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "file",
            "required": false,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StadiaIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Upload stadia json config file",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1stores~1{storeId}~1export",
    "value": {
      "get": {
        "description": "This API is used to export a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:STORE&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "exportStore",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "storeId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/zip"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:STORE [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Export a store",
        "tags": [
          "Store"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:STORE"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1dlc~1steam~1sync",
    "value": {
      "put": {
        "description": "Sync steam dlc.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=NAMESPACE:{namespace}:USER:{userId}:DLC, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncSteamDLC",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamDLCSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ],
        "summary": "Sync steam dlc.",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:DLC"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1matched",
    "value": {
      "get": {
        "description": "Debug matched payment merchant config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment merchant config info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "debugMatchedPaymentMerchantConfig",
        "parameters": [
          {
            "default": "*",
            "description": "namespace",
            "in": "query",
            "name": "namespace",
            "required": false,
            "type": "string"
          },
          {
            "default": "*",
            "description": "region",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Debug matched payment merchant config(internal)",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1receipt.pdf",
    "value": {
      "get": {
        "description": "Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "downloadUserOrderReceipt",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download user order receipt",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1subscriptions",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Query user subscriptions.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: paginated subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "queryUserSubscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "ACTIVE",
              "CANCELLED",
              "EXPIRED",
              "INIT"
            ],
            "in": "query",
            "name": "status",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "CHARGED",
              "CHARGE_FAILED",
              "NEVER",
              "RECURRING_CHARGING",
              "SETUP"
            ],
            "in": "query",
            "name": "chargeStatus",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "PLATFORM",
              "USER"
            ],
            "in": "query",
            "name": "subscribedBy",
            "required": false,
            "type": "string"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user subscriptions",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1xsollaconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Check xsolla configuration, Reference: &lt;a href=&#34;https://developers.xsolla.com/?#simple-checkout&#34;&gt;Xsolla Document&lt;/a&gt;.&lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;merchantId&lt;/li&gt;&lt;li&gt;projectId&lt;/li&gt;&lt;li&gt;apiKey&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;projectSecretKey&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testXsollaConfig",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/XsollaConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test xsolla configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1anonymization~1integrations",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "Anonymize integrations. At current it will only anonymize iap histories.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "anonymizeIntegration",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Anonymize successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "anonymize integrations",
        "tags": [
          "Anonymization"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1bySku",
    "value": {
      "get": {
        "description": "This API is used to get the item by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the item with sku&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getItemBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr><tr><td>30343</td><td>Item of sku [{sku}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get item by sku",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1subscriptions~1{subscriptionId}~1cancel",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel a subscription, only ACTIVE subscription can be cancelled. &lt;b&gt;Ensure successfully cancel, recommend at least 1 day before current period ends, otherwise it may be charging or charged.&lt;/b&gt;&lt;br&gt;Set immediate true, the subscription will be terminated immediately, otherwise till the end of current billing cycle.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: cancelled subscription&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicCancelSubscription",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CancelRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40141</td><td>Subscription [{subscriptionId}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>40171</td><td>Subscription [{subscriptionId}] is not active</td></tr><tr><td>40172</td><td>Subscription [{subscriptionId}] is charging, waiting for payment notification</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Cancel a subscription",
        "tags": [
          "Subscription"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1wallets~1{currencyCode}~1payment",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Pay with user wallet by currency code.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "payWithUserWallet",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "userId",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>35124</td><td>Wallet [{currencyCode}] has insufficient balance</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Pay with user wallet by currency code",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1disable",
    "value": {
      "put": {
        "description": "Disable user entitlement if entitlement, only active entitlement can be disable, disabled entitlement can&#39;t consume.&lt;br&gt;&lt;b&gt;Like revoke, it will lose the entitlement ownership, except disabled entitlement can enable.&lt;/b&gt;&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: disable entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "disableUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Disable user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1provider~1special",
    "value": {
      "get": {
        "description": "Get special payment providers, such as ALIPAY, WXPAY.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getSpecialPaymentProviders",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "enum": [
                  "WALLET",
                  "XSOLLA",
                  "ADYEN",
                  "STRIPE",
                  "CHECKOUT",
                  "ALIPAY",
                  "WXPAY",
                  "PAYPAL"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get special payment providers",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1tickets~1{boothName}~1increment",
    "value": {
      "put": {
        "description": "&lt;b&gt;[SERVICE COMMUNICATION ONLY]&lt;/b&gt; increase ticket(code/key) sale.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:TICKET&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: Ticket sale increment result&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "increaseTicketSale",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "boothName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TicketSaleIncrementRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TicketSaleIncrementResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37041</td><td>Ticket booth [{boothName}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Increase ticket sale",
        "tags": [
          "Ticket"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:TICKET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1steam~1sync",
    "value": {
      "put": {
        "description": "Sync steam inventory&#39;s items.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncSteamInventory",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync steam inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1wallets~1{currencyCode}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get my wallet by currency code and namespace.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:WALLET&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: wallet info&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;   &lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher user wallet&lt;/b&gt;&lt;/li&gt;   &lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game user wallet&lt;/b&gt;&lt;/li&gt;   &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetMyWallet",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "currencyCode",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/WalletInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:WALLET [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my wallet by currency code and namespace",
        "tags": [
          "Wallet"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:WALLET"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1provider~1aggregate",
    "value": {
      "get": {
        "description": "Get aggregate payment providers, such as XSOLLA, ADYEN.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment provider list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getAggregatePaymentProviders",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "enum": [
                  "WALLET",
                  "XSOLLA",
                  "ADYEN",
                  "STRIPE",
                  "CHECKOUT",
                  "ALIPAY",
                  "WXPAY",
                  "PAYPAL"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get aggregate payment providers",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1categories~1{categoryPath}",
    "value": {
      "get": {
        "description": "This API is used to get category by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;PREVIEW&#34;, action=1(CREATE) (user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Optional permission&lt;/i&gt;: resource=&#34;SANDBOX&#34;, action=1 (CREATE)(user with this permission can view draft store category)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: category data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetCategory",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CategoryInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30241</td><td>Category [{categoryPath}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "summary": "Get Category",
        "tags": [
          "Category"
        ]
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1categories~1{categoryPath}~1descendants",
    "value": {
      "get": {
        "description": "This API is used to get descendant categories by category path.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CATEGORY&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of descendant categories data&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getDescendantCategories",
        "parameters": [
          {
            "description": "Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "categoryPath",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/FullCategoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get descendant categories",
        "tags": [
          "Category"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CATEGORY"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}~1receipt.pdf",
    "value": {
      "get": {
        "description": "Download user order receipt by orderNo.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: order receipt pdf&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicDownloadUserOrderReceipt",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/pdf"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32173</td><td>Receipt of order [{orderNo}] is not downloadable</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Download user order receipt",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1history",
    "value": {
      "get": {
        "description": "Get user entitlement histories.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: list of entitlement history&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserEntitlementHistories",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntitlementHistoryInfo"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user entitlement history",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1decrement",
    "value": {
      "put": {
        "description": "Consume user entitlement. If the entitlement useCount is 0, the status will be CONSUMED.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: consumed entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicConsumeUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EntitlementDecrement"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31172</td><td>Entitlement [{entitlementId}] not active</td></tr><tr><td>31173</td><td>Entitlement [{entitlementId}] is not consumable</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31176</td><td>Entitlement [{entitlementId}] use count is insufficient</td></tr><tr><td>31178</td><td>Entitlement [{entitlementId}] out of time range</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Consume user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1entitlements",
    "value": {
      "get": {
        "description": "Query user entitlements for a specific user.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: entitlement list&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicQueryUserEntitlements",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          },
          {
            "enum": [
              "DEMO",
              "DLC",
              "GAME",
              "SOFTWARE"
            ],
            "in": "query",
            "name": "appType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "entitlementName",
            "required": false,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "itemId",
            "required": false,
            "type": "array"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementPagingSlicedResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Query user entitlements",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1apple~1receipt",
    "value": {
      "put": {
        "description": "Verify apple iap receipt and fulfill item.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicFulfillAppleIAPItem",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AppleIAPReceipt"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Fulfill item successfully"
          },
          "400": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39121</td><td>Apple iap receipt verify failed with status code [{statusCode}]</td></tr><tr><td>35123</td><td>Wallet [{walletId}] is inactive</td></tr><tr><td>38121</td><td>Duplicate permanent item exists</td></tr><tr><td>38122</td><td>Subscription endDate required</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39141</td><td>Apple iap receipt of transaction [{transactionId}] for productId [{}] does not exist</td></tr><tr><td>30341</td><td>Item [{itemId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>39171</td><td>The bundle id in namespace [{namespace}] expect [{expected}] but was [{actual}]</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Fulfill apple iap item.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1{userId}~1iap~1stadia~1sync",
    "value": {
      "put": {
        "description": "Sync stadia entitlements.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:USER:{userId}:IAP&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: &lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncStadiaEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StadiaSyncRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync stadia inventory.",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "NAMESPACE:{namespace}:USER:{userId}:IAP"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1ownership~1byAppId",
    "value": {
      "get": {
        "description": "Get user app entitlement ownership by appId.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserAppEntitlementOwnershipByAppId",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "appId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Ownership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get user app entitlement ownership by appId",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1campaigns~1{campaignId}",
    "value": {
      "get": {
        "description": "Get campaign info.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: campaign info&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update campaign.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:CAMPAIGN&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated campaign&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateCampaign",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "campaignId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CampaignInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37141</td><td>Campaign [{campaignId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>37171</td><td>Campaign [{name}] already exists in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update campaign",
        "tags": [
          "Campaign"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1items~1search",
    "value": {
      "get": {
        "description": "This API is used to search items by keyword in title, description and long description within a store.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:ITEM&#34;, action=2 (READ)&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: the list of items&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "searchItems",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "default is published store id",
            "in": "query",
            "name": "storeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "keyword",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "activeOnly",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": 0,
            "description": "offset",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": false,
            "type": "integer"
          },
          {
            "default": 20,
            "description": "limit",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/FullItemPagingSlicedResult"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>30141</td><td>Store [{storeId}] does not exist in namespace [{namespace}]</td></tr><tr><td>30142</td><td>Published store does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:ITEM [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Search items by keyword",
        "tags": [
          "Item"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:ITEM"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1rewards~1export",
    "value": {
      "get": {
        "description": "Export reward configurations for a given namespace into file. At current, only JSON file is supported.&lt;p&gt;Other detail info:&lt;ul&gt;&lt;li&gt;&lt;i&gt;*Required permission*: resource=&#34;ADMIN:NAMESPACE:{namespace}:REWARD&#34;, action=2 (READ)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "exportRewards",
        "parameters": [
          {
            "description": "namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful export of reward configs"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:REWARD [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Export all reward configurations",
        "tags": [
          "Reward"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:REWARD"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1payment~1orders~1{paymentOrderNo}~1status",
    "value": {
      "get": {
        "description": "Get payment order charge status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:PAYMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: payment order charge status&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getPaymentOrderChargeStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "paymentOrderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentOrderChargeStatus"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33141</td><td>Payment Order [{paymentOrderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get payment order charge status",
        "tags": [
          "Payment"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:PAYMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1stripeconfig~1test",
    "value": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Test stripe configuration. &lt;h4&gt;Check List:&lt;/h4&gt; &lt;ul&gt;&lt;li&gt;secretKey&lt;/li&gt;&lt;li&gt;allowedPaymentMethodTypes&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Non-check list:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;publishableKey&lt;/li&gt;&lt;li&gt;webhookSecret&lt;/li&gt;&lt;/ul&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: test adyen config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "testStripeConfig",
        "parameters": [
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/StripeConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TestResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Test stripe configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1dlc~1config~1item",
    "value": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "delete a DLC item config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;&lt;/b&gt;, action=8 &lt;b&gt;(DELETE)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteDLCItemConfig",
        "parameters": [
          {
            "description": "namespace, only accept alphabet and numeric",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "delete a DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "get": {
        "description": "Get DLC item config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&lt;b&gt;&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;&lt;/b&gt;, action=2 &lt;b&gt;(READ)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getDLCItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DLCItemConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>errorCode</td><td>errorMessage</td></tr><tr><td>39341</td><td>DLC item config cannot be found in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update DLC item config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:DLC:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated DLC item config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateDLCItemConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DLCItemConfigUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DLCItemConfigInfo"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update DLC item config",
        "tags": [
          "DLC"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1iap~1config~1steam",
    "value": {
      "delete": {
        "description": "Delete steam iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=8 (DELETE)&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "deleteSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete successfully"
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Delete steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "8",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "get": {
        "description": "Get steam iap config.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: steam iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfig"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update steam iap config. Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:IAP:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated steam iap config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateSteamIAPConfig",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SteamIAPConfigInfo"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update steam iap config",
        "tags": [
          "IAP"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1orders~1{orderNo}",
    "value": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "Get an order.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: get order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "getUserOrder",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get an order",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update order status.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated order&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateUserOrderStatus",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "orderNo",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/OrderUpdate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>32141</td><td>Order [{orderNo}] does not exist</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "422": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>20002</td><td>validation error</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ValidationErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update order status",
        "tags": [
          "Order"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1payment~1config~1merchant~1{id}~1alipayconfig",
    "value": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update alipay configuration.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:PAYMENT:CONFIG&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: updated payment merchant config&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "updateAliPayConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "validate",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "default": true,
            "in": "query",
            "name": "sandbox",
            "required": false,
            "type": "boolean",
            "x-omitempty": false
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AliPayConfig"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaymentMerchantConfigInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>33242</td><td>Payment merchant config [{id}] does not exist</td></tr><tr><td>33221</td><td>Update [{paymentProvider}] config in payment merchant config [{id}] failed with message [{errMsg}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:PAYMENT:CONFIG [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Update alipay configuration",
        "tags": [
          "PaymentConfig"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:PAYMENT:CONFIG"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1namespaces~1{namespace}~1users~1{userId}~1entitlements~1{entitlementId}~1enable",
    "value": {
      "put": {
        "description": "Enable user entitlement.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT&#34;, action=4 (UPDATE)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: enable entitlement&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "enableUserEntitlement",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "entitlementId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntitlementInfo"
            }
          },
          "404": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31141</td><td>Entitlement [{entitlementId}] does not exist in namespace [{namespace}]</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          },
          "409": {
            "description": "<table><tr><td>ErrorCode</td><td>ErrorMessage</td></tr><tr><td>31171</td><td>Entitlement [{entitlementId}] already revoked</td></tr><tr><td>31174</td><td>Entitlement [{entitlementId}] already consumed</td></tr><tr><td>31177</td><td>Permanent item already owned</td></tr><tr><td>31179</td><td>Duplicate entitlement exists</td></tr><tr><td>20006</td><td>optimistic lock</td></tr></table>",
            "schema": {
              "$ref": "#/definitions/ErrorEntity"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]"
            ],
            "authorization": []
          }
        ],
        "summary": "Enable user entitlement",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "4",
          "resource": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1admin~1orders",
    "value": {
      "get": {
        "description": "Sync orders. If response contains nextEvaluatedKey, please use it as query param in the next call to fetch the next batch, a batch has 1000 elements or less.&lt;br&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;ADMIN:ORDER&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Returns&lt;/i&gt;: sync orders&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "syncOrders",
        "parameters": [
          {
            "description": "include ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "start",
            "required": true,
            "type": "string"
          },
          {
            "description": "exclude ISODateTimeFormat no millis like yyyy-MM-dd'T'HH:mm:ssZZ",
            "in": "query",
            "name": "end",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nextEvaluatedKey",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/OrderSyncResult"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "ADMIN:ORDER [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Sync orders",
        "tags": [
          "Order(Dedicated)"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "ADMIN:ORDER"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/paths/~1platform~1public~1namespaces~1{namespace}~1users~1me~1entitlements~1ownership~1bySku",
    "value": {
      "get": {
        "description": "Get my entitlement ownership by sku.&lt;p&gt;Other detail info: &lt;ul&gt;&lt;li&gt;&lt;i&gt;Required permission&lt;/i&gt;: resource=&#34;NAMESPACE:{namespace}:ENTITLEMENT&#34;, action=2 (READ)&lt;/li&gt;&lt;li&gt;&lt;i&gt;Path&#39;s namespace&lt;/i&gt; : &lt;ul&gt;&lt;li&gt;can be filled with &lt;b&gt;publisher namespace&lt;/b&gt; in order to get &lt;b&gt;publisher namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;li&gt;can be filled with &lt;b&gt;game namespace&lt;/b&gt; in order to get &lt;b&gt;game namespace entitlement ownership by sku&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;",
        "operationId": "publicGetMyEntitlementOwnershipBySku",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "sku",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "APP",
              "CODE",
              "ENTITLEMENT",
              "MEDIA",
              "SUBSCRIPTION"
            ],
            "in": "query",
            "name": "entitlementClazz",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimedOwnership"
            }
          }
        },
        "security": [
          {
            "authorization": []
          },
          {
            "HasPermission": [
              "NAMESPACE:{namespace}:ENTITLEMENT [READ]"
            ],
            "authorization": []
          }
        ],
        "summary": "Get my entitlement ownership by sku",
        "tags": [
          "Entitlement"
        ],
        "x-authorization": {
          "action": "2",
          "resource": "NAMESPACE:{namespace}:ENTITLEMENT"
        }
      }
    }
  },
  {
    "op": "add",
    "path": "/definitions/PaymentNotificationInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentNotificationInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionActivityInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionActivityInfo/properties/inFixedCycleTrial/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionActivityInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionActivityInfo/properties/inFixedFreeDays/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ExternalPaymentOrderCreate/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ExternalPaymentOrderCreate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/ExternalPaymentOrderCreate/properties/omitNotification/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BasicCategoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BasicCategoryInfo/properties/root/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BasicCategoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RecurringChargeResult/properties/triggered/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/MockIAPReceipt/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/ItemCreate/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemCreate/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemCreate/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/chargebackTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/chargebackReversedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/fulfilledTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/createdTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/chargedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderInfo/properties/expireTime/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CurrencyInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CurrencyInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentCallbackConfigUpdate/properties/dryRun/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProcessResult/properties/pending/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProcessResult/properties/success/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SteamIAPConfig/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SteamIAPConfig/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/AppUpdate/properties/releaseDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentMerchantConfigInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentMerchantConfigInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/WalletInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/WalletInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RegionDataItem/properties/discountPurchaseAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RegionDataItem/properties/expireAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RegionDataItem/properties/discountExpireAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RegionDataItem/properties/purchaseAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CampaignUpdate/properties/redeemEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CampaignUpdate/properties/redeemStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementSummary/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementSummary/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementSummary/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementSummary/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementSummary/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/KeyGroupInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/KeyGroupInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProviderConfigInfo/properties/useGlobalTaxJarApiToken/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProviderConfigInfo/properties/taxJarEnabled/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CampaignInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CampaignInfo/properties/redeemEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CampaignInfo/properties/redeemStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CampaignInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FulfillCodeRequest/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/GoogleReceiptResolveResult/properties/needConsume/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderCreateResult/properties/createdTime/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/start/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/end/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/unsubscribedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/subscribedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/firstSubscribe/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/currentPeriodEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/currentPeriodStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/paid/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/nextBillingDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/inFixedCycleTrial/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/paymentFlowRequired/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionInfo/properties/inFixedFreeDays/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/HierarchicalCategoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/HierarchicalCategoryInfo/properties/root/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/HierarchicalCategoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderDetails/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderDetails/properties/charging/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ConditionMatchResult/properties/matched/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TwitchSyncRequest/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/XsollaPaywallConfig/properties/showCloseButton/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TaxResult/properties/enableTax/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BundledItemInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BundledItemInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BundledItemInfo/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BundledItemInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BundledItemInfo/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementUpdate/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementUpdate/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/StoreInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StoreInfo/properties/published/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StoreInfo/properties/publishedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/StoreInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FulfillmentHistoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FulfillmentHistoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AppleIAPReceipt/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/AppleIAPReceipt/properties/excludeOldTransactions/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemSnapshot/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemSnapshot/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/ItemSnapshot/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemSnapshot/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/ItemSnapshot/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Transaction/properties/txEndTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Transaction/properties/notified/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AdyenConfig/properties/authoriseAsCapture/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProviderConfigEdit/properties/useGlobalTaxJarApiToken/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentProviderConfigEdit/properties/taxJarEnabled/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullCategoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullCategoryInfo/properties/root/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullCategoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Subscribable/properties/subscribable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemAcquireResult/properties/success/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderCreate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/Ownership/properties/owned/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/chargebackTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/chargebackReversedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/charged/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/fulfilledTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/free/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/createdTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/chargedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/Order/properties/expireTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/chargebackTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/chargebackReversedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/charging/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/authorisedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/createdTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/omitNotification/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/chargedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderInfo/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TicketSaleIncrementResult/properties/success/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/grantedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementInfo/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/ItemUpdate/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemUpdate/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemUpdate/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentCallbackConfigInfo/properties/dryRun/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderChargeStatus/properties/charging/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FulfillmentRequest/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/FulfillmentRequest/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/IAPOrderInfo/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/IAPOrderInfo/properties/fulfilledTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/IAPOrderInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/IAPOrderInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CampaignCreate/properties/redeemEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CampaignCreate/properties/redeemStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderCreate/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderCreate/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderCreate/properties/omitNotification/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/GoogleIAPReceipt/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/GoogleIAPReceipt/properties/autoAck/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PopulatedItemInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PopulatedItemInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PopulatedItemInfo/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PopulatedItemInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PopulatedItemInfo/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/XsollaPaywallConfigRequest/properties/showCloseButton/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CategoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CategoryInfo/properties/root/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CategoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentTaxConfigInfo/properties/taxJarEnabled/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AppEntitlementInfo/properties/grantedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/AppEntitlementInfo/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/AppEntitlementInfo/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SteamSyncRequest/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/BillingHistoryInfo/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BillingHistoryInfo/properties/changeBillingAccount/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BillingHistoryInfo/properties/txEndTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/BillingHistoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BillingHistoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/KeyInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/KeyInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TimedOwnership/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TimedOwnership/properties/owned/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionSummary/properties/currentPeriodEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/SubscriptionSummary/properties/currentPeriodStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/AppInfo/properties/releaseDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderHistoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/OrderHistoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TestResult/properties/success/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementHistoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementHistoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/WalletTransactionInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/WalletTransactionInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RewardInfo/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RewardInfo/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/FullAppInfo/properties/releaseDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CancelRequest/properties/immediate/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StoreBackupInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StoreBackupInfo/properties/autoBackup/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StoreBackupInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/SubscribeRequest/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/grantedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/StackableEntitlementInfo/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/FullItemInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullItemInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullItemInfo/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullItemInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/FullItemInfo/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CodeInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CodeInfo/properties/redeemEnd/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/CodeInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/CodeInfo/properties/redeemStart/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/chargebackTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/chargebackReversedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/updatedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/charging/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/authorisedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/createdTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/omitNotification/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/createdAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/chargedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrder/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/OrderSummary/properties/free/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/StadiaSyncRequest/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/PaymentTaxConfigEdit/properties/taxJarEnabled/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemInfo/properties/stackable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemInfo/properties/purchasable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/ItemInfo/properties/listable/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderRefundResult/properties/createdTime/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderRefundResult/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementGrant/properties/language/pattern",
    "value": "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$"
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementGrant/properties/startDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/EntitlementGrant/properties/endDate/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderPaidResult/properties/success/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/PaymentOrderPaidResult/properties/charging/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/sandbox/x-omitempty",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/txEndTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/chargebackTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/chargebackReversedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/authorisedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/createdTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/issuedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/chargedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/TradeNotification/properties/refundedTime/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RedeemHistoryInfo/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/RedeemHistoryInfo/properties/redeemedAt/x-nullable",
    "value": true
  },
  {
    "op": "add",
    "path": "/definitions/RedeemHistoryInfo/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BasicItem/properties/createdAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/definitions/BasicItem/properties/updatedAt/x-nullable",
    "value": false
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasScope",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {},
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  },
  {
    "op": "add",
    "path": "/securityDefinitions/HasPermission",
    "value": {
      "authorizationUrl": "https://dummy.oauth.net/auth",
      "flow": "accessCode",
      "scopes": {
        "ADMIN:FULFILLMENT [CREATE]": "ADMIN:FULFILLMENT [CREATE]",
        "ADMIN:FULFILLMENT [DELETE]": "ADMIN:FULFILLMENT [DELETE]",
        "ADMIN:FULFILLMENT [READ]": "ADMIN:FULFILLMENT [READ]",
        "ADMIN:FULFILLMENT [UPDATE]": "ADMIN:FULFILLMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [READ]",
        "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CAMPAIGN [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [READ]",
        "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CATEGORY [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [READ]",
        "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]": "ADMIN:NAMESPACE:{namespace}:CURRENCY [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:DLC:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]": "ADMIN:NAMESPACE:{namespace}:ENTITLEMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]": "ADMIN:NAMESPACE:{namespace}:FULFILLMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:IAP:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]": "ADMIN:NAMESPACE:{namespace}:ITEM [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]": "ADMIN:NAMESPACE:{namespace}:ITEM [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [READ]": "ADMIN:NAMESPACE:{namespace}:ITEM [READ]",
        "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ITEM [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [READ]",
        "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]": "ADMIN:NAMESPACE:{namespace}:KEYGROUP [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:ORDER [READ]": "ADMIN:NAMESPACE:{namespace}:ORDER [READ]",
        "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:ORDER [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [READ]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:CONFIG [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]": "ADMIN:NAMESPACE:{namespace}:PAYMENT:NOTIFICATION [READ]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]": "ADMIN:NAMESPACE:{namespace}:REWARD [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]": "ADMIN:NAMESPACE:{namespace}:REWARD [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [READ]": "ADMIN:NAMESPACE:{namespace}:REWARD [READ]",
        "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]": "ADMIN:NAMESPACE:{namespace}:REWARD [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]": "ADMIN:NAMESPACE:{namespace}:STORE [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]": "ADMIN:NAMESPACE:{namespace}:STORE [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:STORE [READ]": "ADMIN:NAMESPACE:{namespace}:STORE [READ]",
        "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]": "ADMIN:NAMESPACE:{namespace}:STORE [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:SUBSCRIPTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:TICKET [READ]": "ADMIN:NAMESPACE:{namespace}:TICKET [READ]",
        "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]": "ADMIN:NAMESPACE:{namespace}:TICKET [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ANONYMIZATION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT []",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:PAYMENT [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:REDEMPTION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [DELETE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:TICKET [CREATE]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]",
        "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]": "ADMIN:NAMESPACE:{namespace}:USER:{userId}:WALLET [UPDATE]",
        "ADMIN:NAMESPACE:{namespace}:WALLET [READ]": "ADMIN:NAMESPACE:{namespace}:WALLET [READ]",
        "ADMIN:ORDER [READ]": "ADMIN:ORDER [READ]",
        "ADMIN:PAYMENT [READ]": "ADMIN:PAYMENT [READ]",
        "ADMIN:PAYMENT:CONFIG [CREATE]": "ADMIN:PAYMENT:CONFIG [CREATE]",
        "ADMIN:PAYMENT:CONFIG [DELETE]": "ADMIN:PAYMENT:CONFIG [DELETE]",
        "ADMIN:PAYMENT:CONFIG [READ]": "ADMIN:PAYMENT:CONFIG [READ]",
        "ADMIN:PAYMENT:CONFIG [UPDATE]": "ADMIN:PAYMENT:CONFIG [UPDATE]",
        "NAMESPACE:{namespace}:ENTITLEMENT [READ]": "NAMESPACE:{namespace}:ENTITLEMENT [READ]",
        "NAMESPACE:{namespace}:REWARD [READ]": "NAMESPACE:{namespace}:REWARD [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []": "NAMESPACE:{namespace}:USER:{userId}:FULFILLMENT []",
        "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:IAP [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:ORDER [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [DELETE]",
        "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]": "NAMESPACE:{namespace}:USER:{userId}:PAYMENT:ACCOUNT [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [CREATE]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [READ]",
        "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]": "NAMESPACE:{namespace}:USER:{userId}:SUBSCRIPTION [UPDATE]",
        "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]": "NAMESPACE:{namespace}:USER:{userId}:WALLET [READ]",
        "NAMESPACE:{namespace}:WALLET [READ]": "NAMESPACE:{namespace}:WALLET [READ]"
      },
      "tokenUrl": "https://dumy.oauth.net/token",
      "type": "oauth2"
    }
  }
]
