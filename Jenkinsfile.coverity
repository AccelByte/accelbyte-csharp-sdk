library(
  identifier: 'jenkins-shared-library@master',
  retriever: modernSCM(
    [
      $class: 'GitSCMSource',
      remote: 'https://github.com/dhanarab/jenkins-pipeline-library.git'
    ]
  )
)

jobChannel = env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_SDK ? env.SLACK_CHANNEL_ACTIVITY_EXTEND_CODEGEN_SDK : "#activity-justice-codegen-sdk"

pipeline {
  agent {
    label "extend-builder-batch"
  }
  stages {
    stage('Coverity') {
      agent {
        docker {
          image 'dhanarab/cov-analysis:2023.6.2-dotnet-1'
          reuseNode true
        }
      }
      steps {
        script {
          sh "rm -rfv cov-int csharp-server-sdk.tar.gz"
          sh "cov-build --dir cov-int dotnet build"
          sh "tar caf csharp-server-sdk.tar.gz cov-int"
          withCredentials([usernamePassword(credentialsId: 'coverity-accelbyte-csharp-sdk', passwordVariable: 'COVERITY_TOKEN', usernameVariable: 'COVERITY_EMAIL')]) {
            gitCommitHashShort = git.getCommitHashShort()
            sh "curl --form token=\$COVERITY_TOKEN --form email=\$COVERITY_EMAIL --form file=@csharp-server-sdk.tar.gz --form version='${gitCommitHashShort}' --form description='Automated Coverity Scan' 'https://scan.coverity.com/builds?project=accelbyte-csharp-sdk'"
          }
        }
      }
    }
  }
  post {    
    failure {
      script {
        message = """
            :no_entry: <${env.BUILD_URL}|${env.JOB_NAME}-${env.BUILD_NUMBER}> *failed*
            
            |""".stripMargin()
        slackSend(channel: jobChannel, color: '#FF0000', message: message)
      }
    }
  }
}
