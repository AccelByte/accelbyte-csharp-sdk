// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Basic.Model;
using AccelByte.Sdk.Api.Basic.Operation;
using AccelByte.Sdk.Api.Basic.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class BasicConfig_OpExts
    {
        public static Basic.Model.ConfigInfo? Execute(
            this CreateConfig.CreateConfigBuilder builder,
            string namespace_
        )
        {
            CreateConfig op = builder.Build(
                namespace_
            );

            return ((Basic.Wrapper.Config)builder.WrapperObject!).CreateConfig(op);
        }
        public static async Task<Basic.Model.ConfigInfo?> ExecuteAsync(
            this CreateConfig.CreateConfigBuilder builder,
            string namespace_
        )
        {
            CreateConfig op = builder.Build(
                namespace_
            );

            return await ((Basic.Wrapper.Config)builder.WrapperObject!).CreateConfigAsync(op);
        }
        public static Basic.Model.ConfigInfo? Execute(
            this GetConfig.GetConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            GetConfig op = builder.Build(
                configKey,
                namespace_
            );

            return ((Basic.Wrapper.Config)builder.WrapperObject!).GetConfig(op);
        }
        public static async Task<Basic.Model.ConfigInfo?> ExecuteAsync(
            this GetConfig.GetConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            GetConfig op = builder.Build(
                configKey,
                namespace_
            );

            return await ((Basic.Wrapper.Config)builder.WrapperObject!).GetConfigAsync(op);
        }
        public static void Execute(
            this DeleteConfig.DeleteConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            DeleteConfig op = builder.Build(
                configKey,
                namespace_
            );

            ((Basic.Wrapper.Config)builder.WrapperObject!).DeleteConfig(op);
        }
        public static async Task ExecuteAsync(
            this DeleteConfig.DeleteConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            DeleteConfig op = builder.Build(
                configKey,
                namespace_
            );

            await ((Basic.Wrapper.Config)builder.WrapperObject!).DeleteConfigAsync(op);
        }
        public static Basic.Model.ConfigInfo? Execute(
            this UpdateConfig.UpdateConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            UpdateConfig op = builder.Build(
                configKey,
                namespace_
            );

            return ((Basic.Wrapper.Config)builder.WrapperObject!).UpdateConfig(op);
        }
        public static async Task<Basic.Model.ConfigInfo?> ExecuteAsync(
            this UpdateConfig.UpdateConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            UpdateConfig op = builder.Build(
                configKey,
                namespace_
            );

            return await ((Basic.Wrapper.Config)builder.WrapperObject!).UpdateConfigAsync(op);
        }
        public static Basic.Model.ConfigInfo? Execute(
            this GetPublisherConfig.GetPublisherConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            GetPublisherConfig op = builder.Build(
                configKey,
                namespace_
            );

            return ((Basic.Wrapper.Config)builder.WrapperObject!).GetPublisherConfig(op);
        }
        public static async Task<Basic.Model.ConfigInfo?> ExecuteAsync(
            this GetPublisherConfig.GetPublisherConfigBuilder builder,
            string configKey,
            string namespace_
        )
        {
            GetPublisherConfig op = builder.Build(
                configKey,
                namespace_
            );

            return await ((Basic.Wrapper.Config)builder.WrapperObject!).GetPublisherConfigAsync(op);
        }
    }
}