// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;
using AccelByte.Sdk.Api.Ugc.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class UgcPublicGroup_OpExts
    {
        public static Ugc.Model.ModelsPaginatedGroupResponse? Execute(
            this GetGroups.GetGroupsBuilder builder,
            string namespace_,
            string userId
        )
        {
            GetGroups op = builder.Build(
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroups(op);
        }
        public static async Task<Ugc.Model.ModelsPaginatedGroupResponse?> ExecuteAsync(
            this GetGroups.GetGroupsBuilder builder,
            string namespace_,
            string userId
        )
        {
            GetGroups op = builder.Build(
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroupsAsync(op);
        }
        public static Ugc.Model.ModelsCreateGroupResponse? Execute(
            this CreateGroup.CreateGroupBuilder builder,
            ModelsCreateGroupRequest body,
            string namespace_,
            string userId
        )
        {
            CreateGroup op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).CreateGroup(op);
        }
        public static async Task<Ugc.Model.ModelsCreateGroupResponse?> ExecuteAsync(
            this CreateGroup.CreateGroupBuilder builder,
            ModelsCreateGroupRequest body,
            string namespace_,
            string userId
        )
        {
            CreateGroup op = builder.Build(
                body,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).CreateGroupAsync(op);
        }
        public static Ugc.Model.ModelsCreateGroupResponse? Execute(
            this GetGroup.GetGroupBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            GetGroup op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroup(op);
        }
        public static async Task<Ugc.Model.ModelsCreateGroupResponse?> ExecuteAsync(
            this GetGroup.GetGroupBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            GetGroup op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroupAsync(op);
        }
        public static Ugc.Model.ModelsCreateGroupResponse? Execute(
            this UpdateGroup.UpdateGroupBuilder builder,
            ModelsCreateGroupRequest body,
            string groupId,
            string namespace_,
            string userId
        )
        {
            UpdateGroup op = builder.Build(
                body,
                groupId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).UpdateGroup(op);
        }
        public static async Task<Ugc.Model.ModelsCreateGroupResponse?> ExecuteAsync(
            this UpdateGroup.UpdateGroupBuilder builder,
            ModelsCreateGroupRequest body,
            string groupId,
            string namespace_,
            string userId
        )
        {
            UpdateGroup op = builder.Build(
                body,
                groupId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).UpdateGroupAsync(op);
        }
        public static void Execute(
            this DeleteGroup.DeleteGroupBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            DeleteGroup op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).DeleteGroup(op);
        }
        public static async Task ExecuteAsync(
            this DeleteGroup.DeleteGroupBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            DeleteGroup op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).DeleteGroupAsync(op);
        }
        public static Ugc.Model.ModelsPaginatedContentDownloadResponse? Execute(
            this GetGroupContent.GetGroupContentBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            GetGroupContent op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroupContent(op);
        }
        public static async Task<Ugc.Model.ModelsPaginatedContentDownloadResponse?> ExecuteAsync(
            this GetGroupContent.GetGroupContentBuilder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            GetGroupContent op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).GetGroupContentAsync(op);
        }
        public static Ugc.Model.ModelsPaginatedContentDownloadResponseV2? Execute(
            this PublicGetGroupContentsV2.PublicGetGroupContentsV2Builder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            PublicGetGroupContentsV2 op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).PublicGetGroupContentsV2(op);
        }
        public static async Task<Ugc.Model.ModelsPaginatedContentDownloadResponseV2?> ExecuteAsync(
            this PublicGetGroupContentsV2.PublicGetGroupContentsV2Builder builder,
            string groupId,
            string namespace_,
            string userId
        )
        {
            PublicGetGroupContentsV2 op = builder.Build(
                groupId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicGroup)builder.WrapperObject!).PublicGetGroupContentsV2Async(op);
        }
    }
}