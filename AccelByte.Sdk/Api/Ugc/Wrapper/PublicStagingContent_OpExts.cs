// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Api.Ugc.Operation;
using AccelByte.Sdk.Api.Ugc.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class UgcPublicStagingContent_OpExts
    {
        public static Ugc.Model.ModelsPaginatedListStagingContentResponse? Execute(
            this ListUserStagingContents.ListUserStagingContentsBuilder builder,
            string namespace_,
            string userId
        )
        {
            ListUserStagingContents op = builder.Build(
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).ListUserStagingContents(op);
        }
        public static async Task<Ugc.Model.ModelsPaginatedListStagingContentResponse?> ExecuteAsync(
            this ListUserStagingContents.ListUserStagingContentsBuilder builder,
            string namespace_,
            string userId
        )
        {
            ListUserStagingContents op = builder.Build(
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).ListUserStagingContentsAsync(op);
        }
        public static Ugc.Model.ModelsStagingContentResponse? Execute(
            this GetUserStagingContentByID.GetUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            GetUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).GetUserStagingContentByID(op);
        }
        public static async Task<Ugc.Model.ModelsStagingContentResponse?> ExecuteAsync(
            this GetUserStagingContentByID.GetUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            GetUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).GetUserStagingContentByIDAsync(op);
        }

        public static Ugc.Model.ModelsStagingContentResponse<T1>? Execute<T1>(
            this GetUserStagingContentByID.GetUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            GetUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).GetUserStagingContentByID<T1>(op);
        }
        public static async Task<Ugc.Model.ModelsStagingContentResponse<T1>?> ExecuteAsync<T1>(
            this GetUserStagingContentByID.GetUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            GetUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).GetUserStagingContentByIDAsync<T1>(op);
        }
        public static Ugc.Model.ModelsStagingContentResponse? Execute(
            this UpdateStagingContent.UpdateStagingContentBuilder builder,
            ModelsUpdateStagingContentRequest body,
            string contentId,
            string namespace_,
            string userId
        )
        {
            UpdateStagingContent op = builder.Build(
                body,
                contentId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).UpdateStagingContent(op);
        }
        public static async Task<Ugc.Model.ModelsStagingContentResponse?> ExecuteAsync(
            this UpdateStagingContent.UpdateStagingContentBuilder builder,
            ModelsUpdateStagingContentRequest body,
            string contentId,
            string namespace_,
            string userId
        )
        {
            UpdateStagingContent op = builder.Build(
                body,
                contentId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).UpdateStagingContentAsync(op);
        }

        public static Ugc.Model.ModelsStagingContentResponse<T1>? Execute<T1>(
            this UpdateStagingContent.UpdateStagingContentBuilder builder,
            ModelsUpdateStagingContentRequest body,
            string contentId,
            string namespace_,
            string userId
        )
        {
            UpdateStagingContent op = builder.Build(
                body,
                contentId,
                namespace_,
                userId
            );

            return ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).UpdateStagingContent<T1>(op);
        }
        public static async Task<Ugc.Model.ModelsStagingContentResponse<T1>?> ExecuteAsync<T1>(
            this UpdateStagingContent.UpdateStagingContentBuilder builder,
            ModelsUpdateStagingContentRequest body,
            string contentId,
            string namespace_,
            string userId
        )
        {
            UpdateStagingContent op = builder.Build(
                body,
                contentId,
                namespace_,
                userId
            );

            return await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).UpdateStagingContentAsync<T1>(op);
        }
        public static void Execute(
            this DeleteUserStagingContentByID.DeleteUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            DeleteUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).DeleteUserStagingContentByID(op);
        }
        public static async Task ExecuteAsync(
            this DeleteUserStagingContentByID.DeleteUserStagingContentByIDBuilder builder,
            string contentId,
            string namespace_,
            string userId
        )
        {
            DeleteUserStagingContentByID op = builder.Build(
                contentId,
                namespace_,
                userId
            );

            await ((Ugc.Wrapper.PublicStagingContent)builder.WrapperObject!).DeleteUserStagingContentByIDAsync(op);
        }
    }
}