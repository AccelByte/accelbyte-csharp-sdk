// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ugc.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ugc.Operation
{
    /// <summary>
    /// AdminListContentV2
    ///
    /// 
    /// Required permission ADMIN:NAMESPACE:{namespace}:USER:*:CONTENT [READ]
    /// For advance tag filtering supports & as AND operator and | as OR operator and parentheses () for priority. e.g:
    /// 
    /// `tags=red`
    /// `tags=red&animal;`
    /// `tags=red|animal`
    /// `tags=red&animal;|wild`
    /// `tags=red&(animal|wild)`
    /// 
    /// The precedence of logical operator is AND > OR, so if no parentheses, AND logical operator will be executed first.
    /// 
    /// Allowed character for operand: alphanumeric, underscore `_` and dash `-`
    /// Allowed character for operator: `&` `|` `(` `)`
    /// 
    ///  Please note that value of tags query param should be URL encoded
    /// </summary>
    public class AdminListContentV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminListContentV2Builder Builder { get => new AdminListContentV2Builder(); }

        public class AdminListContentV2Builder
            : OperationBuilder<AdminListContentV2Builder>
        {

            public bool? IsOfficial { get; set; }

            public long? Limit { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public string? SortBy { get; set; }

            public string? SubType { get; set; }

            public List<string>? Tags { get; set; }

            public string? Type { get; set; }





            internal AdminListContentV2Builder() { }


            public AdminListContentV2Builder SetIsOfficial(bool _isOfficial)
            {
                IsOfficial = _isOfficial;
                return this;
            }

            public AdminListContentV2Builder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminListContentV2Builder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public AdminListContentV2Builder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminListContentV2Builder SetSortBy(string _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public AdminListContentV2Builder SetSubType(string _subType)
            {
                SubType = _subType;
                return this;
            }

            public AdminListContentV2Builder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }

            public AdminListContentV2Builder SetType(string _type)
            {
                Type = _type;
                return this;
            }





            public AdminListContentV2 Build(
                string namespace_
            )
            {
                AdminListContentV2 op = new AdminListContentV2(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private AdminListContentV2(AdminListContentV2Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.IsOfficial != null) QueryParams["isOfficial"] = Convert.ToString(builder.IsOfficial)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy;
            if (builder.SubType is not null) QueryParams["subType"] = builder.SubType;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            if (builder.Type is not null) QueryParams["type"] = builder.Type;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminListContentV2(
            string namespace_,
            bool? isOfficial,
            long? limit,
            string? name,
            long? offset,
            string? sortBy,
            string? subType,
            List<string>? tags,
            string? type
        )
        {
            PathParams["namespace"] = namespace_;

            if (isOfficial != null) QueryParams["isOfficial"] = Convert.ToString(isOfficial)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy;
            if (subType is not null) QueryParams["subType"] = subType;
            if (tags is not null) QueryParams["tags"] = tags;
            if (type is not null) QueryParams["type"] = type;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ugc/v2/admin/namespaces/{namespace}/contents";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelsPaginatedContentDownloadResponseV2? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsPaginatedContentDownloadResponseV2>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsPaginatedContentDownloadResponseV2>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsPaginatedContentDownloadResponseV2>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}