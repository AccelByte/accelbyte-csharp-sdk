// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Ugc.Model
{
    public class ModelsStagingContentResponse : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("channelId")]
        public string? ChannelId { get; set; }

        [JsonPropertyName("createdTime")]
        public DateTime? CreatedTime { get; set; }

        [JsonPropertyName("customAttributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? CustomAttributes { get; set; }

        [JsonPropertyName("fileExtension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? FileExtension { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("note")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Note { get; set; }

        [JsonPropertyName("payloadURL")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? PayloadURL { get; set; }

        [JsonPropertyName("screenshots")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsScreenshotResponse>? Screenshots { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public ModelsStagingContentResponseStatus? Status { get; set; }

        [JsonPropertyName("subType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SubType { get; set; }

        [JsonPropertyName("tags")]
        public List<string>? Tags { get; set; }

        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Type { get; set; }

        [JsonPropertyName("updatedTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedTime { get; set; }

        [JsonPropertyName("userId")]
        public string? UserId { get; set; }

    }

    public class ModelsStagingContentResponse<T1> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("channelId")]
        public string? ChannelId { get; set; }

        [JsonPropertyName("createdTime")]
        public DateTime? CreatedTime { get; set; }

        [JsonPropertyName("customAttributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T1? CustomAttributes { get; set; }

        [JsonPropertyName("fileExtension")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? FileExtension { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("note")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Note { get; set; }

        [JsonPropertyName("payloadURL")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? PayloadURL { get; set; }

        [JsonPropertyName("screenshots")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsScreenshotResponse>? Screenshots { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public ModelsStagingContentResponseStatus? Status { get; set; }

        [JsonPropertyName("subType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SubType { get; set; }

        [JsonPropertyName("tags")]
        public List<string>? Tags { get; set; }

        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Type { get; set; }

        [JsonPropertyName("updatedTime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedTime { get; set; }

        [JsonPropertyName("userId")]
        public string? UserId { get; set; }

    }


    public class ModelsStagingContentResponseStatus : StringEnum<ModelsStagingContentResponseStatus>
    {
        public static readonly ModelsStagingContentResponseStatus APPROVED
            = new ModelsStagingContentResponseStatus("APPROVED");

        public static readonly ModelsStagingContentResponseStatus PENDING
            = new ModelsStagingContentResponseStatus("PENDING");

        public static readonly ModelsStagingContentResponseStatus REJECTED
            = new ModelsStagingContentResponseStatus("REJECTED");


        public static implicit operator ModelsStagingContentResponseStatus(string value)
        {
            return NewValue(value);
        }

        public ModelsStagingContentResponseStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}