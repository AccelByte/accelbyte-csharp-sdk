// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Sessionbrowser.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Sessionbrowser.Operation
{
    /// <summary>
    /// GetActiveCustomGameSessions
    ///
    /// Get all active session for custom game, this return only dedicated session type
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class GetActiveCustomGameSessions : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetActiveCustomGameSessionsBuilder Builder { get => new GetActiveCustomGameSessionsBuilder(); }

        public class GetActiveCustomGameSessionsBuilder
            : OperationBuilder<GetActiveCustomGameSessionsBuilder>
        {

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? ServerRegion { get; set; }

            public string? SessionId { get; set; }





            internal GetActiveCustomGameSessionsBuilder() { }


            public GetActiveCustomGameSessionsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetActiveCustomGameSessionsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetActiveCustomGameSessionsBuilder SetServerRegion(string _serverRegion)
            {
                ServerRegion = _serverRegion;
                return this;
            }

            public GetActiveCustomGameSessionsBuilder SetSessionId(string _sessionId)
            {
                SessionId = _sessionId;
                return this;
            }





            public GetActiveCustomGameSessions Build(
                string namespace_
            )
            {
                GetActiveCustomGameSessions op = new GetActiveCustomGameSessions(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetActiveCustomGameSessions(GetActiveCustomGameSessionsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.ServerRegion is not null) QueryParams["server_region"] = builder.ServerRegion;
            if (builder.SessionId is not null) QueryParams["session_id"] = builder.SessionId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetActiveCustomGameSessions(
            string namespace_,
            long? limit,
            long? offset,
            string? serverRegion,
            string? sessionId
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (serverRegion is not null) QueryParams["server_region"] = serverRegion;
            if (sessionId is not null) QueryParams["session_id"] = sessionId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/sessionbrowser/admin/namespaces/{namespace}/gamesession/active/custom-game";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelsActiveCustomGameResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsActiveCustomGameResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsActiveCustomGameResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsActiveCustomGameResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}