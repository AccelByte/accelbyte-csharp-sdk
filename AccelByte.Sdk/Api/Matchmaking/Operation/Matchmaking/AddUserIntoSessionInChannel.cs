// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Matchmaking.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Matchmaking.Operation
{
    /// <summary>
    /// AddUserIntoSessionInChannel
    ///
    /// Add user into the session in a channel.
    /// </summary>
    public class AddUserIntoSessionInChannel : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AddUserIntoSessionInChannelBuilder Builder { get => new AddUserIntoSessionInChannelBuilder(); }

        public class AddUserIntoSessionInChannelBuilder
            : OperationBuilder<AddUserIntoSessionInChannelBuilder>
        {





            internal AddUserIntoSessionInChannelBuilder() { }






            public AddUserIntoSessionInChannel Build(
                ModelsMatchAddUserIntoSessionRequest body,
                string channelName,
                string matchID,
                string namespace_
            )
            {
                AddUserIntoSessionInChannel op = new AddUserIntoSessionInChannel(this,
                    body,
                    channelName,
                    matchID,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private AddUserIntoSessionInChannel(AddUserIntoSessionInChannelBuilder builder,
            ModelsMatchAddUserIntoSessionRequest body,
            string channelName,
            string matchID,
            string namespace_
        )
        {
            PathParams["channelName"] = channelName;
            PathParams["matchID"] = matchID;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AddUserIntoSessionInChannel(
            string channelName,
            string matchID,
            string namespace_,
            Model.ModelsMatchAddUserIntoSessionRequest body
        )
        {
            PathParams["channelName"] = channelName;
            PathParams["matchID"] = matchID;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/matchmaking/v1/admin/namespaces/{namespace}/channels/{channelName}/sessions/{matchID}";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)200)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}