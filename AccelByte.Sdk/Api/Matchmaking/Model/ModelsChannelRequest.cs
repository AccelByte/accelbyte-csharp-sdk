// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Matchmaking.Model
{
    public class ModelsChannelRequest : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("blocked_player_option")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ModelsChannelRequestBlockedPlayerOption? BlockedPlayerOption { get; set; }

        [JsonPropertyName("deployment")]
        public string? Deployment { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("find_match_timeout_seconds")]
        public int? FindMatchTimeoutSeconds { get; set; }

        [JsonPropertyName("game_mode")]
        public string? GameMode { get; set; }

        [JsonPropertyName("joinable")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Joinable { get; set; }

        [JsonPropertyName("max_delay_ms")]
        public int? MaxDelayMs { get; set; }

        [JsonPropertyName("region_expansion_range_ms")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RegionExpansionRangeMs { get; set; }

        [JsonPropertyName("region_expansion_rate_ms")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RegionExpansionRateMs { get; set; }

        [JsonPropertyName("region_latency_initial_range_ms")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RegionLatencyInitialRangeMs { get; set; }

        [JsonPropertyName("region_latency_max_ms")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RegionLatencyMaxMs { get; set; }

        [JsonPropertyName("rule_set")]
        public ModelsRuleSet? RuleSet { get; set; }

        [JsonPropertyName("session_queue_timeout_seconds")]
        public int? SessionQueueTimeoutSeconds { get; set; }

        [JsonPropertyName("social_matchmaking")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? SocialMatchmaking { get; set; }

        [JsonPropertyName("ticket_observability_enable")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? TicketObservabilityEnable { get; set; }

        [JsonPropertyName("use_sub_gamemode")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? UseSubGamemode { get; set; }

    }



    public class ModelsChannelRequestBlockedPlayerOption : StringEnum<ModelsChannelRequestBlockedPlayerOption>
    {
        public static readonly ModelsChannelRequestBlockedPlayerOption BlockedPlayerCanMatch
            = new ModelsChannelRequestBlockedPlayerOption("blockedPlayerCanMatch");

        public static readonly ModelsChannelRequestBlockedPlayerOption BlockedPlayerCanMatchOnDifferentTeam
            = new ModelsChannelRequestBlockedPlayerOption("blockedPlayerCanMatchOnDifferentTeam");

        public static readonly ModelsChannelRequestBlockedPlayerOption BlockedPlayerCannotMatch
            = new ModelsChannelRequestBlockedPlayerOption("blockedPlayerCannotMatch");


        public static implicit operator ModelsChannelRequestBlockedPlayerOption(string value)
        {
            return NewValue(value);
        }

        public ModelsChannelRequestBlockedPlayerOption(string enumValue)
            : base(enumValue)
        {

        }
    }
}