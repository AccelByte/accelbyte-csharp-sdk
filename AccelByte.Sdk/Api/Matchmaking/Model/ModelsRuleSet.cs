// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Matchmaking.Model
{
    public class ModelsRuleSet : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("alliance")]
        public ModelsAllianceRule? Alliance { get; set; }

        [JsonPropertyName("alliance_flexing_rule")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsAllianceFlexingRule>? AllianceFlexingRule { get; set; }

        [JsonPropertyName("batch_size")]
        public int? BatchSize { get; set; }

        [JsonPropertyName("bucket_mmr_rule")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ModelsBucketMMRRule? BucketMmrRule { get; set; }

        [JsonPropertyName("flexing_rule")]
        public List<ModelsFlexingRule>? FlexingRule { get; set; }

        [JsonPropertyName("match_options")]
        public ModelsMatchOptionRule? MatchOptions { get; set; }

        [JsonPropertyName("matching_rule")]
        public List<ModelsMatchingRule>? MatchingRule { get; set; }

        [JsonPropertyName("rebalance_enable")]
        public bool? RebalanceEnable { get; set; }

        [JsonPropertyName("sort_ticket")]
        public ModelsSortTicket? SortTicket { get; set; }

        [JsonPropertyName("sort_tickets")]
        public List<ModelsSortTicketRule>? SortTickets { get; set; }

        [JsonPropertyName("sub_game_modes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, ModelsSubGameMode>? SubGameModes { get; set; }

        [JsonPropertyName("ticket_flexing_selection")]
        [JsonStringEnum]
        public ModelsRuleSetTicketFlexingSelection? TicketFlexingSelection { get; set; }

        [JsonPropertyName("ticket_flexing_selections")]
        public List<ModelsSelectionRule>? TicketFlexingSelections { get; set; }

        [JsonPropertyName("use_newest_ticket_for_flexing")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? UseNewestTicketForFlexing { get; set; }

    }



    public class ModelsRuleSetTicketFlexingSelection : StringEnum<ModelsRuleSetTicketFlexingSelection>
    {
        public static readonly ModelsRuleSetTicketFlexingSelection Newest
            = new ModelsRuleSetTicketFlexingSelection("newest");

        public static readonly ModelsRuleSetTicketFlexingSelection Oldest
            = new ModelsRuleSetTicketFlexingSelection("oldest");

        public static readonly ModelsRuleSetTicketFlexingSelection Pivot
            = new ModelsRuleSetTicketFlexingSelection("pivot");

        public static readonly ModelsRuleSetTicketFlexingSelection Random
            = new ModelsRuleSetTicketFlexingSelection("random");


        public static implicit operator ModelsRuleSetTicketFlexingSelection(string value)
        {
            return NewValue(value);
        }

        public ModelsRuleSetTicketFlexingSelection(string enumValue)
            : base(enumValue)
        {

        }
    }
}