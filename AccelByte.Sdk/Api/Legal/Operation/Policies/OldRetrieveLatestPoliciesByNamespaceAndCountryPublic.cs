// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// oldRetrieveLatestPoliciesByNamespaceAndCountryPublic
    ///
    /// Retrieve all active latest policies based on a namespace and country.
    /// Other detail info:
    /// 
    ///   * Leave the policyType empty if you want to be responded with all policy type
    ///   *  Fill the tags if you want to filter the responded policy by tags
    ///   *  Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist
    ///   *  Fill the alwaysIncludeDefault with true if you want to be responded with always include default policy. If there are duplicate policies (default policies and country specific policies with same base policy) it'll include policy with same country code, for example:
    ///     * Document 1 (default): Region US (default), UA
    ///     * Document 2 (default): Region US (default)
    ///     * Document 3 (default): Region US (default)
    ///     * User: Region UA
    ///     * Query: alwaysIncludeDefault: true
    ///     * Response: Document 1 (UA), Document 2 (US), Document 3 (US)
    /// </summary>
    public class OldRetrieveLatestPoliciesByNamespaceAndCountryPublic : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder Builder { get => new OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder(); }

        public class OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder
            : OperationBuilder<OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder>
        {

            public bool? AlwaysIncludeDefault { get; set; }

            public bool? DefaultOnEmpty { get; set; }

            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType? PolicyType { get; set; }

            public string? Tags { get; set; }

            public bool? VisibleOnly { get; set; }





            internal OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder() { }


            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder SetAlwaysIncludeDefault(bool _alwaysIncludeDefault)
            {
                AlwaysIncludeDefault = _alwaysIncludeDefault;
                return this;
            }

            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder SetDefaultOnEmpty(bool _defaultOnEmpty)
            {
                DefaultOnEmpty = _defaultOnEmpty;
                return this;
            }

            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder SetPolicyType(OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType _policyType)
            {
                PolicyType = _policyType;
                return this;
            }

            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder SetTags(string _tags)
            {
                Tags = _tags;
                return this;
            }

            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder SetVisibleOnly(bool _visibleOnly)
            {
                VisibleOnly = _visibleOnly;
                return this;
            }





            public OldRetrieveLatestPoliciesByNamespaceAndCountryPublic Build(
                string countryCode,
                string namespace_
            )
            {
                OldRetrieveLatestPoliciesByNamespaceAndCountryPublic op = new OldRetrieveLatestPoliciesByNamespaceAndCountryPublic(this,
                    countryCode,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private OldRetrieveLatestPoliciesByNamespaceAndCountryPublic(OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder builder,
            string countryCode,
            string namespace_
        )
        {
            PathParams["countryCode"] = countryCode;
            PathParams["namespace"] = namespace_;

            if (builder.AlwaysIncludeDefault != null) QueryParams["alwaysIncludeDefault"] = Convert.ToString(builder.AlwaysIncludeDefault)!;
            if (builder.DefaultOnEmpty != null) QueryParams["defaultOnEmpty"] = Convert.ToString(builder.DefaultOnEmpty)!;
            if (builder.PolicyType is not null) QueryParams["policyType"] = builder.PolicyType.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            if (builder.VisibleOnly != null) QueryParams["visibleOnly"] = Convert.ToString(builder.VisibleOnly)!;






        }
        #endregion

        public OldRetrieveLatestPoliciesByNamespaceAndCountryPublic(
            string countryCode,
            string namespace_,
            bool? alwaysIncludeDefault,
            bool? defaultOnEmpty,
            OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType? policyType,
            string? tags,
            bool? visibleOnly
        )
        {
            PathParams["countryCode"] = countryCode;
            PathParams["namespace"] = namespace_;

            if (alwaysIncludeDefault != null) QueryParams["alwaysIncludeDefault"] = Convert.ToString(alwaysIncludeDefault)!;
            if (defaultOnEmpty != null) QueryParams["defaultOnEmpty"] = Convert.ToString(defaultOnEmpty)!;
            if (policyType is not null) QueryParams["policyType"] = policyType.Value;
            if (tags is not null) QueryParams["tags"] = tags;
            if (visibleOnly != null) QueryParams["visibleOnly"] = Convert.ToString(visibleOnly)!;






        }

        public override string Path => "/agreement/public/policies/namespaces/{namespace}/countries/{countryCode}";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public List<Model.RetrievePolicyPublicResponse>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType : StringEnum<OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType>
    {
        public static readonly OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType LEGALDOCUMENTTYPE
            = new OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType("LEGAL_DOCUMENT_TYPE");

        public static readonly OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType MARKETINGPREFERENCETYPE
            = new OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType("MARKETING_PREFERENCE_TYPE");


        public static implicit operator OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType(string value)
        {
            return NewValue(value);
        }

        public OldRetrieveLatestPoliciesByNamespaceAndCountryPublicPolicyType(string enumValue)
            : base(enumValue)
        {

        }
    }

}