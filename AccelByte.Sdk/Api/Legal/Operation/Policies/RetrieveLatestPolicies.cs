// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// retrieveLatestPolicies
    ///
    /// Retrieve all active latest policies based on a country.
    /// Other detail info:
    /// 
    ///   * Leave the policyType empty if you want to be responded with all policy type
    ///   *  Fill the tags if you want to filter the responded policy by tags
    ///   *  Fill the defaultOnEmpty with true if you want to be responded with default country-specific policy if your requested country is not exist
    /// </summary>
    public class RetrieveLatestPolicies : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RetrieveLatestPoliciesBuilder Builder { get => new RetrieveLatestPoliciesBuilder(); }

        public class RetrieveLatestPoliciesBuilder
            : OperationBuilder<RetrieveLatestPoliciesBuilder>
        {

            public bool? DefaultOnEmpty { get; set; }

            public RetrieveLatestPoliciesPolicyType? PolicyType { get; set; }

            public string? Tags { get; set; }





            internal RetrieveLatestPoliciesBuilder() { }


            public RetrieveLatestPoliciesBuilder SetDefaultOnEmpty(bool _defaultOnEmpty)
            {
                DefaultOnEmpty = _defaultOnEmpty;
                return this;
            }

            public RetrieveLatestPoliciesBuilder SetPolicyType(RetrieveLatestPoliciesPolicyType _policyType)
            {
                PolicyType = _policyType;
                return this;
            }

            public RetrieveLatestPoliciesBuilder SetTags(string _tags)
            {
                Tags = _tags;
                return this;
            }





            public RetrieveLatestPolicies Build(
                string countryCode
            )
            {
                RetrieveLatestPolicies op = new RetrieveLatestPolicies(this,
                    countryCode
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private RetrieveLatestPolicies(RetrieveLatestPoliciesBuilder builder,
            string countryCode
        )
        {
            PathParams["countryCode"] = countryCode;

            if (builder.DefaultOnEmpty != null) QueryParams["defaultOnEmpty"] = Convert.ToString(builder.DefaultOnEmpty)!;
            if (builder.PolicyType is not null) QueryParams["policyType"] = builder.PolicyType.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;






        }
        #endregion

        public RetrieveLatestPolicies(
            string countryCode,
            bool? defaultOnEmpty,
            RetrieveLatestPoliciesPolicyType? policyType,
            string? tags
        )
        {
            PathParams["countryCode"] = countryCode;

            if (defaultOnEmpty != null) QueryParams["defaultOnEmpty"] = Convert.ToString(defaultOnEmpty)!;
            if (policyType is not null) QueryParams["policyType"] = policyType.Value;
            if (tags is not null) QueryParams["tags"] = tags;






        }

        public override string Path => "/agreement/public/policies/countries/{countryCode}";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public List<Model.RetrievePolicyPublicResponse>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.RetrievePolicyPublicResponse>>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class RetrieveLatestPoliciesPolicyType : StringEnum<RetrieveLatestPoliciesPolicyType>
    {
        public static readonly RetrieveLatestPoliciesPolicyType LEGALDOCUMENTTYPE
            = new RetrieveLatestPoliciesPolicyType("LEGAL_DOCUMENT_TYPE");

        public static readonly RetrieveLatestPoliciesPolicyType MARKETINGPREFERENCETYPE
            = new RetrieveLatestPoliciesPolicyType("MARKETING_PREFERENCE_TYPE");


        public static implicit operator RetrieveLatestPoliciesPolicyType(string value)
        {
            return NewValue(value);
        }

        public RetrieveLatestPoliciesPolicyType(string enumValue)
            : base(enumValue)
        {

        }
    }

}