// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// oldRetrievePolicyCountry
    ///
    /// Retrieve a Base Legal Policy based on a Particular Country.
    /// </summary>
    public class OldRetrievePolicyCountry : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static OldRetrievePolicyCountryBuilder Builder { get => new OldRetrievePolicyCountryBuilder(); }

        public class OldRetrievePolicyCountryBuilder
            : OperationBuilder<OldRetrievePolicyCountryBuilder>
        {





            internal OldRetrievePolicyCountryBuilder() { }






            public OldRetrievePolicyCountry Build(
                string basePolicyId,
                string countryCode
            )
            {
                OldRetrievePolicyCountry op = new OldRetrievePolicyCountry(this,
                    basePolicyId,
                    countryCode
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private OldRetrievePolicyCountry(OldRetrievePolicyCountryBuilder builder,
            string basePolicyId,
            string countryCode
        )
        {
            PathParams["basePolicyId"] = basePolicyId;
            PathParams["countryCode"] = countryCode;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public OldRetrievePolicyCountry(
            string basePolicyId,
            string countryCode
        )
        {
            PathParams["basePolicyId"] = basePolicyId;
            PathParams["countryCode"] = countryCode;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/base-policies/{basePolicyId}/countries/{countryCode}";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.RetrievePolicyResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.RetrievePolicyResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.RetrievePolicyResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.RetrievePolicyResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}