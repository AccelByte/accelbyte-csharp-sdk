// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// retrieveAcceptedAgreementsForMultiUsers
    ///
    /// This API will return all accepted Legal Agreements for each user, including agreements of game users if publisher user has corresponding game accountOther detail info:
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:LEGAL", action=2 (READ)
    /// </summary>
    public class RetrieveAcceptedAgreementsForMultiUsers : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RetrieveAcceptedAgreementsForMultiUsersBuilder Builder { get => new RetrieveAcceptedAgreementsForMultiUsersBuilder(); }

        public class RetrieveAcceptedAgreementsForMultiUsersBuilder
            : OperationBuilder<RetrieveAcceptedAgreementsForMultiUsersBuilder>
        {


            public Model.UsersAgreementsRequest? Body { get; set; }




            internal RetrieveAcceptedAgreementsForMultiUsersBuilder() { }



            public RetrieveAcceptedAgreementsForMultiUsersBuilder SetBody(Model.UsersAgreementsRequest _body)
            {
                Body = _body;
                return this;
            }




            public RetrieveAcceptedAgreementsForMultiUsers Build(
                string namespace_
            )
            {
                RetrieveAcceptedAgreementsForMultiUsers op = new RetrieveAcceptedAgreementsForMultiUsers(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private RetrieveAcceptedAgreementsForMultiUsers(RetrieveAcceptedAgreementsForMultiUsersBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public RetrieveAcceptedAgreementsForMultiUsers(
            string namespace_,
            Model.UsersAgreementsRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/agreements";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public List<Model.UserAgreementsResponse>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<List<Model.UserAgreementsResponse>>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<List<Model.UserAgreementsResponse>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.UserAgreementsResponse>>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}