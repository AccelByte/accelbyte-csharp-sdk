// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// initiateExportAgreementsToCSV
    ///
    /// This API will initiate a worker to export list of users who has accepted a specific policy version into a CSV file.
    /// To check the export state after initialize it, use `GET /admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/download` API.
    /// 
    /// This Initiate API is not allow multiple export worker running for the same namespace, it will return 409 http error if so.
    /// </summary>
    public class InitiateExportAgreementsToCSV : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static InitiateExportAgreementsToCSVBuilder Builder { get => new InitiateExportAgreementsToCSVBuilder(); }

        public class InitiateExportAgreementsToCSVBuilder
            : OperationBuilder<InitiateExportAgreementsToCSVBuilder>
        {

            public string? End { get; set; }





            internal InitiateExportAgreementsToCSVBuilder() { }


            public InitiateExportAgreementsToCSVBuilder SetEnd(string _end)
            {
                End = _end;
                return this;
            }





            public InitiateExportAgreementsToCSV Build(
                string namespace_,
                string policyVersionId,
                string start
            )
            {
                InitiateExportAgreementsToCSV op = new InitiateExportAgreementsToCSV(this,
                    namespace_,
                    policyVersionId,
                    start
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private InitiateExportAgreementsToCSV(InitiateExportAgreementsToCSVBuilder builder,
            string namespace_,
            string policyVersionId,
            string start
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.End is not null) QueryParams["end"] = builder.End;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;
            if (start is not null) QueryParams["start"] = start;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public InitiateExportAgreementsToCSV(
            string namespace_,
            string? end,
            string policyVersionId,
            string start
        )
        {
            PathParams["namespace"] = namespace_;

            if (end is not null) QueryParams["end"] = end;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;
            if (start is not null) QueryParams["start"] = start;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/agreements/policy-versions/users/export-csv/initiate";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.InitiateExportAgreementsToCSVResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.InitiateExportAgreementsToCSVResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.InitiateExportAgreementsToCSVResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.InitiateExportAgreementsToCSVResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}