// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Legal.Operation
{
    /// <summary>
    /// retrieveAllUsersByPolicyVersion_1
    ///
    /// This API will return all users who has accepted a specific policy version.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:LEGAL", action=2 (READ)
    /// </summary>
    public class RetrieveAllUsersByPolicyVersion1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RetrieveAllUsersByPolicyVersion1Builder Builder { get => new RetrieveAllUsersByPolicyVersion1Builder(); }

        public class RetrieveAllUsersByPolicyVersion1Builder
            : OperationBuilder<RetrieveAllUsersByPolicyVersion1Builder>
        {

            public bool? ConvertGameUserId { get; set; }

            public string? Keyword { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }





            internal RetrieveAllUsersByPolicyVersion1Builder() { }


            public RetrieveAllUsersByPolicyVersion1Builder SetConvertGameUserId(bool _convertGameUserId)
            {
                ConvertGameUserId = _convertGameUserId;
                return this;
            }

            public RetrieveAllUsersByPolicyVersion1Builder SetKeyword(string _keyword)
            {
                Keyword = _keyword;
                return this;
            }

            public RetrieveAllUsersByPolicyVersion1Builder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public RetrieveAllUsersByPolicyVersion1Builder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }





            public RetrieveAllUsersByPolicyVersion1 Build(
                string namespace_,
                string policyVersionId
            )
            {
                RetrieveAllUsersByPolicyVersion1 op = new RetrieveAllUsersByPolicyVersion1(this,
                    namespace_,
                    policyVersionId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private RetrieveAllUsersByPolicyVersion1(RetrieveAllUsersByPolicyVersion1Builder builder,
            string namespace_,
            string policyVersionId
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ConvertGameUserId != null) QueryParams["convertGameUserId"] = Convert.ToString(builder.ConvertGameUserId)!;
            if (builder.Keyword is not null) QueryParams["keyword"] = builder.Keyword;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public RetrieveAllUsersByPolicyVersion1(
            string namespace_,
            bool? convertGameUserId,
            string? keyword,
            int? limit,
            int? offset,
            string policyVersionId
        )
        {
            PathParams["namespace"] = namespace_;

            if (convertGameUserId != null) QueryParams["convertGameUserId"] = Convert.ToString(convertGameUserId)!;
            if (keyword is not null) QueryParams["keyword"] = keyword;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (policyVersionId is not null) QueryParams["policyVersionId"] = policyVersionId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/agreement/admin/namespaces/{namespace}/agreements/policy-versions/users";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.PagedRetrieveUserAcceptedAgreementResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.PagedRetrieveUserAcceptedAgreementResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.PagedRetrieveUserAcceptedAgreementResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.PagedRetrieveUserAcceptedAgreementResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}