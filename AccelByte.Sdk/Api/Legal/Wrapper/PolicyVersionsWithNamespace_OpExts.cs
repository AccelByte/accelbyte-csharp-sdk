// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;
using AccelByte.Sdk.Api.Legal.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LegalPolicyVersionsWithNamespace_OpExts
    {
        public static void Execute(
            this DeletePolicyVersion.DeletePolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            DeletePolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).DeletePolicyVersion(op);
        }
        public static async Task ExecuteAsync(
            this DeletePolicyVersion.DeletePolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            DeletePolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).DeletePolicyVersionAsync(op);
        }
        public static Legal.Model.UpdatePolicyVersionResponse? Execute(
            this UpdatePolicyVersion.UpdatePolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            UpdatePolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            return ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).UpdatePolicyVersion(op);
        }
        public static async Task<Legal.Model.UpdatePolicyVersionResponse?> ExecuteAsync(
            this UpdatePolicyVersion.UpdatePolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            UpdatePolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            return await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).UpdatePolicyVersionAsync(op);
        }
        public static void Execute(
            this PublishPolicyVersion.PublishPolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            PublishPolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).PublishPolicyVersion(op);
        }
        public static async Task ExecuteAsync(
            this PublishPolicyVersion.PublishPolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            PublishPolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).PublishPolicyVersionAsync(op);
        }
        public static void Execute(
            this UnpublishPolicyVersion.UnpublishPolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            UnpublishPolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).UnpublishPolicyVersion(op);
        }
        public static async Task ExecuteAsync(
            this UnpublishPolicyVersion.UnpublishPolicyVersionBuilder builder,
            string namespace_,
            string policyVersionId
        )
        {
            UnpublishPolicyVersion op = builder.Build(
                namespace_,
                policyVersionId
            );

            await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).UnpublishPolicyVersionAsync(op);
        }
        public static List<Legal.Model.RetrievePolicyVersionResponse>? Execute(
            this RetrieveSinglePolicyVersion.RetrieveSinglePolicyVersionBuilder builder,
            string namespace_,
            string policyId
        )
        {
            RetrieveSinglePolicyVersion op = builder.Build(
                namespace_,
                policyId
            );

            return ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).RetrieveSinglePolicyVersion(op);
        }
        public static async Task<List<Legal.Model.RetrievePolicyVersionResponse>?> ExecuteAsync(
            this RetrieveSinglePolicyVersion.RetrieveSinglePolicyVersionBuilder builder,
            string namespace_,
            string policyId
        )
        {
            RetrieveSinglePolicyVersion op = builder.Build(
                namespace_,
                policyId
            );

            return await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).RetrieveSinglePolicyVersionAsync(op);
        }
        public static Legal.Model.CreatePolicyVersionResponse? Execute(
            this CreatePolicyVersion.CreatePolicyVersionBuilder builder,
            string namespace_,
            string policyId
        )
        {
            CreatePolicyVersion op = builder.Build(
                namespace_,
                policyId
            );

            return ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).CreatePolicyVersion(op);
        }
        public static async Task<Legal.Model.CreatePolicyVersionResponse?> ExecuteAsync(
            this CreatePolicyVersion.CreatePolicyVersionBuilder builder,
            string namespace_,
            string policyId
        )
        {
            CreatePolicyVersion op = builder.Build(
                namespace_,
                policyId
            );

            return await ((Legal.Wrapper.PolicyVersionsWithNamespace)builder.WrapperObject!).CreatePolicyVersionAsync(op);
        }
    }
}