// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Legal.Wrapper
{
    public class PolicyVersions
    {
        private readonly AccelByteSDK _sdk;

        public PolicyVersions(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public OldUpdatePolicyVersion.OldUpdatePolicyVersionBuilder OldUpdatePolicyVersionOp
        {
            get { return Operation.OldUpdatePolicyVersion.Builder.SetWrapperObject(this); }
        }
        public OldPublishPolicyVersion.OldPublishPolicyVersionBuilder OldPublishPolicyVersionOp
        {
            get { return Operation.OldPublishPolicyVersion.Builder.SetWrapperObject(this); }
        }
        public OldRetrieveSinglePolicyVersion.OldRetrieveSinglePolicyVersionBuilder OldRetrieveSinglePolicyVersionOp
        {
            get { return Operation.OldRetrieveSinglePolicyVersion.Builder.SetWrapperObject(this); }
        }
        public OldCreatePolicyVersion.OldCreatePolicyVersionBuilder OldCreatePolicyVersionOp
        {
            get { return Operation.OldCreatePolicyVersion.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.UpdatePolicyVersionResponse? OldUpdatePolicyVersion(OldUpdatePolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.UpdatePolicyVersionResponse?> OldUpdatePolicyVersionAsync(OldUpdatePolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void OldPublishPolicyVersion(OldPublishPolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task OldPublishPolicyVersionAsync(OldPublishPolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.RetrievePolicyVersionResponse>? OldRetrieveSinglePolicyVersion(OldRetrieveSinglePolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.RetrievePolicyVersionResponse>?> OldRetrieveSinglePolicyVersionAsync(OldRetrieveSinglePolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CreatePolicyVersionResponse? OldCreatePolicyVersion(OldCreatePolicyVersion input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CreatePolicyVersionResponse?> OldCreatePolicyVersionAsync(OldCreatePolicyVersion input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}