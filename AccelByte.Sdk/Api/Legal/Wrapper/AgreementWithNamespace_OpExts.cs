// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;
using AccelByte.Sdk.Api.Legal.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LegalAgreementWithNamespace_OpExts
    {
        public static List<Legal.Model.UserAgreementsResponse>? Execute(
            this RetrieveAcceptedAgreementsForMultiUsers.RetrieveAcceptedAgreementsForMultiUsersBuilder builder,
            string namespace_
        )
        {
            RetrieveAcceptedAgreementsForMultiUsers op = builder.Build(
                namespace_
            );

            return ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAcceptedAgreementsForMultiUsers(op);
        }
        public static async Task<List<Legal.Model.UserAgreementsResponse>?> ExecuteAsync(
            this RetrieveAcceptedAgreementsForMultiUsers.RetrieveAcceptedAgreementsForMultiUsersBuilder builder,
            string namespace_
        )
        {
            RetrieveAcceptedAgreementsForMultiUsers op = builder.Build(
                namespace_
            );

            return await ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAcceptedAgreementsForMultiUsersAsync(op);
        }
        public static List<Legal.Model.RetrieveAcceptedAgreementResponse>? Execute(
            this RetrieveAcceptedAgreements1.RetrieveAcceptedAgreements1Builder builder,
            string namespace_,
            string userId
        )
        {
            RetrieveAcceptedAgreements1 op = builder.Build(
                namespace_,
                userId
            );

            return ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAcceptedAgreements1(op);
        }
        public static async Task<List<Legal.Model.RetrieveAcceptedAgreementResponse>?> ExecuteAsync(
            this RetrieveAcceptedAgreements1.RetrieveAcceptedAgreements1Builder builder,
            string namespace_,
            string userId
        )
        {
            RetrieveAcceptedAgreements1 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAcceptedAgreements1Async(op);
        }
        public static Legal.Model.PagedRetrieveUserAcceptedAgreementResponse? Execute(
            this RetrieveAllUsersByPolicyVersion1.RetrieveAllUsersByPolicyVersion1Builder builder,
            string namespace_,
            string policyVersionId
        )
        {
            RetrieveAllUsersByPolicyVersion1 op = builder.Build(
                namespace_,
                policyVersionId
            );

            return ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAllUsersByPolicyVersion1(op);
        }
        public static async Task<Legal.Model.PagedRetrieveUserAcceptedAgreementResponse?> ExecuteAsync(
            this RetrieveAllUsersByPolicyVersion1.RetrieveAllUsersByPolicyVersion1Builder builder,
            string namespace_,
            string policyVersionId
        )
        {
            RetrieveAllUsersByPolicyVersion1 op = builder.Build(
                namespace_,
                policyVersionId
            );

            return await ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).RetrieveAllUsersByPolicyVersion1Async(op);
        }
        public static Legal.Model.DownloadExportedAgreementsInCSVResponse? Execute(
            this DownloadExportedAgreementsInCSV.DownloadExportedAgreementsInCSVBuilder builder,
            string namespace_,
            string exportId
        )
        {
            DownloadExportedAgreementsInCSV op = builder.Build(
                namespace_,
                exportId
            );

            return ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).DownloadExportedAgreementsInCSV(op);
        }
        public static async Task<Legal.Model.DownloadExportedAgreementsInCSVResponse?> ExecuteAsync(
            this DownloadExportedAgreementsInCSV.DownloadExportedAgreementsInCSVBuilder builder,
            string namespace_,
            string exportId
        )
        {
            DownloadExportedAgreementsInCSV op = builder.Build(
                namespace_,
                exportId
            );

            return await ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).DownloadExportedAgreementsInCSVAsync(op);
        }
        public static Legal.Model.InitiateExportAgreementsToCSVResponse? Execute(
            this InitiateExportAgreementsToCSV.InitiateExportAgreementsToCSVBuilder builder,
            string namespace_,
            string policyVersionId,
            string start
        )
        {
            InitiateExportAgreementsToCSV op = builder.Build(
                namespace_,
                policyVersionId,
                start
            );

            return ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).InitiateExportAgreementsToCSV(op);
        }
        public static async Task<Legal.Model.InitiateExportAgreementsToCSVResponse?> ExecuteAsync(
            this InitiateExportAgreementsToCSV.InitiateExportAgreementsToCSVBuilder builder,
            string namespace_,
            string policyVersionId,
            string start
        )
        {
            InitiateExportAgreementsToCSV op = builder.Build(
                namespace_,
                policyVersionId,
                start
            );

            return await ((Legal.Wrapper.AgreementWithNamespace)builder.WrapperObject!).InitiateExportAgreementsToCSVAsync(op);
        }
    }
}