// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;
using AccelByte.Sdk.Api.Legal.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LegalAgreement_OpExts
    {
        public static void Execute(
            this ChangePreferenceConsent.ChangePreferenceConsentBuilder builder,
            string namespace_,
            string userId
        )
        {
            ChangePreferenceConsent op = builder.Build(
                namespace_,
                userId
            );

            ((Legal.Wrapper.Agreement)builder.WrapperObject!).ChangePreferenceConsent(op);
        }
        public static async Task ExecuteAsync(
            this ChangePreferenceConsent.ChangePreferenceConsentBuilder builder,
            string namespace_,
            string userId
        )
        {
            ChangePreferenceConsent op = builder.Build(
                namespace_,
                userId
            );

            await ((Legal.Wrapper.Agreement)builder.WrapperObject!).ChangePreferenceConsentAsync(op);
        }
        public static List<Legal.Model.RetrieveAcceptedAgreementResponse>? Execute(
            this OldRetrieveAcceptedAgreements.OldRetrieveAcceptedAgreementsBuilder builder,
            string userId
        )
        {
            OldRetrieveAcceptedAgreements op = builder.Build(
                userId
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).OldRetrieveAcceptedAgreements(op);
        }
        public static async Task<List<Legal.Model.RetrieveAcceptedAgreementResponse>?> ExecuteAsync(
            this OldRetrieveAcceptedAgreements.OldRetrieveAcceptedAgreementsBuilder builder,
            string userId
        )
        {
            OldRetrieveAcceptedAgreements op = builder.Build(
                userId
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).OldRetrieveAcceptedAgreementsAsync(op);
        }
        public static Legal.Model.PagedRetrieveUserAcceptedAgreementResponse? Execute(
            this OldRetrieveAllUsersByPolicyVersion.OldRetrieveAllUsersByPolicyVersionBuilder builder,
            string policyVersionId
        )
        {
            OldRetrieveAllUsersByPolicyVersion op = builder.Build(
                policyVersionId
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).OldRetrieveAllUsersByPolicyVersion(op);
        }
        public static async Task<Legal.Model.PagedRetrieveUserAcceptedAgreementResponse?> ExecuteAsync(
            this OldRetrieveAllUsersByPolicyVersion.OldRetrieveAllUsersByPolicyVersionBuilder builder,
            string policyVersionId
        )
        {
            OldRetrieveAllUsersByPolicyVersion op = builder.Build(
                policyVersionId
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).OldRetrieveAllUsersByPolicyVersionAsync(op);
        }
        public static void Execute(
            this PublicChangePreferenceConsent.PublicChangePreferenceConsentBuilder builder
        )
        {
            PublicChangePreferenceConsent op = builder.Build(
            );

            ((Legal.Wrapper.Agreement)builder.WrapperObject!).PublicChangePreferenceConsent(op);
        }
        public static async Task ExecuteAsync(
            this PublicChangePreferenceConsent.PublicChangePreferenceConsentBuilder builder
        )
        {
            PublicChangePreferenceConsent op = builder.Build(
            );

            await ((Legal.Wrapper.Agreement)builder.WrapperObject!).PublicChangePreferenceConsentAsync(op);
        }
        public static void Execute(
            this AcceptVersionedPolicy.AcceptVersionedPolicyBuilder builder,
            string localizedPolicyVersionId
        )
        {
            AcceptVersionedPolicy op = builder.Build(
                localizedPolicyVersionId
            );

            ((Legal.Wrapper.Agreement)builder.WrapperObject!).AcceptVersionedPolicy(op);
        }
        public static async Task ExecuteAsync(
            this AcceptVersionedPolicy.AcceptVersionedPolicyBuilder builder,
            string localizedPolicyVersionId
        )
        {
            AcceptVersionedPolicy op = builder.Build(
                localizedPolicyVersionId
            );

            await ((Legal.Wrapper.Agreement)builder.WrapperObject!).AcceptVersionedPolicyAsync(op);
        }
        public static List<Legal.Model.RetrieveAcceptedAgreementResponse>? Execute(
            this RetrieveAgreementsPublic.RetrieveAgreementsPublicBuilder builder
        )
        {
            RetrieveAgreementsPublic op = builder.Build(
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).RetrieveAgreementsPublic(op);
        }
        public static async Task<List<Legal.Model.RetrieveAcceptedAgreementResponse>?> ExecuteAsync(
            this RetrieveAgreementsPublic.RetrieveAgreementsPublicBuilder builder
        )
        {
            RetrieveAgreementsPublic op = builder.Build(
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).RetrieveAgreementsPublicAsync(op);
        }
        public static Legal.Model.AcceptAgreementResponse? Execute(
            this BulkAcceptVersionedPolicy.BulkAcceptVersionedPolicyBuilder builder
        )
        {
            BulkAcceptVersionedPolicy op = builder.Build(
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).BulkAcceptVersionedPolicy(op);
        }
        public static async Task<Legal.Model.AcceptAgreementResponse?> ExecuteAsync(
            this BulkAcceptVersionedPolicy.BulkAcceptVersionedPolicyBuilder builder
        )
        {
            BulkAcceptVersionedPolicy op = builder.Build(
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).BulkAcceptVersionedPolicyAsync(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Legal.Model.AcceptAgreementResponse? Execute(
            this IndirectBulkAcceptVersionedPolicyV2.IndirectBulkAcceptVersionedPolicyV2Builder builder,
            string clientId,
            string countryCode,
            string namespace_,
            string userId
        )
        {
            IndirectBulkAcceptVersionedPolicyV2 op = builder.Build(
                clientId,
                countryCode,
                namespace_,
                userId
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).IndirectBulkAcceptVersionedPolicyV2(op);
        }
        public static async Task<Legal.Model.AcceptAgreementResponse?> ExecuteAsync(
            this IndirectBulkAcceptVersionedPolicyV2.IndirectBulkAcceptVersionedPolicyV2Builder builder,
            string clientId,
            string countryCode,
            string namespace_,
            string userId
        )
        {
            IndirectBulkAcceptVersionedPolicyV2 op = builder.Build(
                clientId,
                countryCode,
                namespace_,
                userId
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).IndirectBulkAcceptVersionedPolicyV2Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Legal.Model.AcceptAgreementResponse? Execute(
            this PublicIndirectBulkAcceptVersionedPolicy.PublicIndirectBulkAcceptVersionedPolicyBuilder builder,
            string userId
        )
        {
            PublicIndirectBulkAcceptVersionedPolicy op = builder.Build(
                userId
            );

            return ((Legal.Wrapper.Agreement)builder.WrapperObject!).PublicIndirectBulkAcceptVersionedPolicy(op);
        }
        public static async Task<Legal.Model.AcceptAgreementResponse?> ExecuteAsync(
            this PublicIndirectBulkAcceptVersionedPolicy.PublicIndirectBulkAcceptVersionedPolicyBuilder builder,
            string userId
        )
        {
            PublicIndirectBulkAcceptVersionedPolicy op = builder.Build(
                userId
            );

            return await ((Legal.Wrapper.Agreement)builder.WrapperObject!).PublicIndirectBulkAcceptVersionedPolicyAsync(op);
        }
    }
}