// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Legal.Model;
using AccelByte.Sdk.Api.Legal.Operation;
using AccelByte.Sdk.Api.Legal.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LegalPolicies_OpExts
    {
        public static List<Legal.Model.RetrievePolicyResponse>? Execute(
            this RetrievePolicies.RetrievePoliciesBuilder builder,
            string countryCode
        )
        {
            RetrievePolicies op = builder.Build(
                countryCode
            );

            return ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrievePolicies(op);
        }
        public static async Task<List<Legal.Model.RetrievePolicyResponse>?> ExecuteAsync(
            this RetrievePolicies.RetrievePoliciesBuilder builder,
            string countryCode
        )
        {
            RetrievePolicies op = builder.Build(
                countryCode
            );

            return await ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrievePoliciesAsync(op);
        }
        public static void Execute(
            this OldUpdatePolicy.OldUpdatePolicyBuilder builder,
            string policyId
        )
        {
            OldUpdatePolicy op = builder.Build(
                policyId
            );

            ((Legal.Wrapper.Policies)builder.WrapperObject!).OldUpdatePolicy(op);
        }
        public static async Task ExecuteAsync(
            this OldUpdatePolicy.OldUpdatePolicyBuilder builder,
            string policyId
        )
        {
            OldUpdatePolicy op = builder.Build(
                policyId
            );

            await ((Legal.Wrapper.Policies)builder.WrapperObject!).OldUpdatePolicyAsync(op);
        }
        public static void Execute(
            this OldSetDefaultPolicy.OldSetDefaultPolicyBuilder builder,
            string policyId
        )
        {
            OldSetDefaultPolicy op = builder.Build(
                policyId
            );

            ((Legal.Wrapper.Policies)builder.WrapperObject!).OldSetDefaultPolicy(op);
        }
        public static async Task ExecuteAsync(
            this OldSetDefaultPolicy.OldSetDefaultPolicyBuilder builder,
            string policyId
        )
        {
            OldSetDefaultPolicy op = builder.Build(
                policyId
            );

            await ((Legal.Wrapper.Policies)builder.WrapperObject!).OldSetDefaultPolicyAsync(op);
        }
        public static List<string>? Execute(
            this RetrieveCountryListWithPolicies.RetrieveCountryListWithPoliciesBuilder builder
        )
        {
            RetrieveCountryListWithPolicies op = builder.Build(
            );

            return ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveCountryListWithPolicies(op);
        }
        public static async Task<List<string>?> ExecuteAsync(
            this RetrieveCountryListWithPolicies.RetrieveCountryListWithPoliciesBuilder builder
        )
        {
            RetrieveCountryListWithPolicies op = builder.Build(
            );

            return await ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveCountryListWithPoliciesAsync(op);
        }
        public static List<Legal.Model.RetrievePolicyPublicResponse>? Execute(
            this RetrieveLatestPolicies.RetrieveLatestPoliciesBuilder builder,
            string countryCode
        )
        {
            RetrieveLatestPolicies op = builder.Build(
                countryCode
            );

            return ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveLatestPolicies(op);
        }
        public static async Task<List<Legal.Model.RetrievePolicyPublicResponse>?> ExecuteAsync(
            this RetrieveLatestPolicies.RetrieveLatestPoliciesBuilder builder,
            string countryCode
        )
        {
            RetrieveLatestPolicies op = builder.Build(
                countryCode
            );

            return await ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveLatestPoliciesAsync(op);
        }
        public static List<Legal.Model.RetrievePolicyPublicResponse>? Execute(
            this RetrieveLatestPoliciesPublic.RetrieveLatestPoliciesPublicBuilder builder,
            string namespace_
        )
        {
            RetrieveLatestPoliciesPublic op = builder.Build(
                namespace_
            );

            return ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveLatestPoliciesPublic(op);
        }
        public static async Task<List<Legal.Model.RetrievePolicyPublicResponse>?> ExecuteAsync(
            this RetrieveLatestPoliciesPublic.RetrieveLatestPoliciesPublicBuilder builder,
            string namespace_
        )
        {
            RetrieveLatestPoliciesPublic op = builder.Build(
                namespace_
            );

            return await ((Legal.Wrapper.Policies)builder.WrapperObject!).RetrieveLatestPoliciesPublicAsync(op);
        }
        public static List<Legal.Model.RetrievePolicyPublicResponse>? Execute(
            this OldRetrieveLatestPoliciesByNamespaceAndCountryPublic.OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder builder,
            string countryCode,
            string namespace_
        )
        {
            OldRetrieveLatestPoliciesByNamespaceAndCountryPublic op = builder.Build(
                countryCode,
                namespace_
            );

            return ((Legal.Wrapper.Policies)builder.WrapperObject!).OldRetrieveLatestPoliciesByNamespaceAndCountryPublic(op);
        }
        public static async Task<List<Legal.Model.RetrievePolicyPublicResponse>?> ExecuteAsync(
            this OldRetrieveLatestPoliciesByNamespaceAndCountryPublic.OldRetrieveLatestPoliciesByNamespaceAndCountryPublicBuilder builder,
            string countryCode,
            string namespace_
        )
        {
            OldRetrieveLatestPoliciesByNamespaceAndCountryPublic op = builder.Build(
                countryCode,
                namespace_
            );

            return await ((Legal.Wrapper.Policies)builder.WrapperObject!).OldRetrieveLatestPoliciesByNamespaceAndCountryPublicAsync(op);
        }
    }
}