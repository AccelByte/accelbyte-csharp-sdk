// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;
using AccelByte.Sdk.Api.Iam.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class IamOAuth20V4_OpExts
    {
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this AuthenticationWithPlatformLinkV4.AuthenticationWithPlatformLinkV4Builder builder,
            string clientId,
            string linkingToken,
            string password,
            string username
        )
        {
            AuthenticationWithPlatformLinkV4 op = builder.Build(
                clientId,
                linkingToken,
                password,
                username
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).AuthenticationWithPlatformLinkV4(op);
        }
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this GenerateTokenByNewHeadlessAccountV4.GenerateTokenByNewHeadlessAccountV4Builder builder,
            string linkingToken
        )
        {
            GenerateTokenByNewHeadlessAccountV4 op = builder.Build(
                linkingToken
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).GenerateTokenByNewHeadlessAccountV4(op);
        }
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this Verify2faCodeV4.Verify2faCodeV4Builder builder,
            string code,
            string factor,
            string mfaToken,
            bool rememberDevice
        )
        {
            Verify2faCodeV4 op = builder.Build(
                code,
                factor,
                mfaToken,
                rememberDevice
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).Verify2faCodeV4(op);
        }
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this PlatformTokenGrantV4.PlatformTokenGrantV4Builder builder,
            string platformId
        )
        {
            PlatformTokenGrantV4 op = builder.Build(
                platformId
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).PlatformTokenGrantV4(op);
        }
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this SimultaneousLoginV4.SimultaneousLoginV4Builder builder,
            string nativePlatform,
            string nativePlatformTicket
        )
        {
            SimultaneousLoginV4 op = builder.Build(
                nativePlatform,
                nativePlatformTicket
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).SimultaneousLoginV4(op);
        }
        public static Iam.Model.OauthmodelTokenWithDeviceCookieResponseV3? Execute(
            this TokenGrantV4.TokenGrantV4Builder builder,
            string grantType
        )
        {
            TokenGrantV4 op = builder.Build(
                grantType
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).TokenGrantV4(op);
        }
        public static Iam.Model.OauthmodelTokenResponseV3? Execute(
            this RequestTargetTokenResponseV4.RequestTargetTokenResponseV4Builder builder,
            string code
        )
        {
            RequestTargetTokenResponseV4 op = builder.Build(
                code
            );

            return ((Iam.Wrapper.OAuth20V4)builder.WrapperObject!).RequestTargetTokenResponseV4(op);
        }
    }
}