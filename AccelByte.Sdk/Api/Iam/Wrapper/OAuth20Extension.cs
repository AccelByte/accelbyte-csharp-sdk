// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Iam.Wrapper
{
    public class OAuth20Extension
    {
        private readonly AccelByteSDK _sdk;

        public OAuth20Extension(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public UserAuthenticationV3.UserAuthenticationV3Builder UserAuthenticationV3Op
        {
            get { return Operation.UserAuthenticationV3.Builder.SetWrapperObject(this); }
        }
        public AuthenticationWithPlatformLinkV3.AuthenticationWithPlatformLinkV3Builder AuthenticationWithPlatformLinkV3Op
        {
            get { return Operation.AuthenticationWithPlatformLinkV3.Builder.SetWrapperObject(this); }
        }
        public GenerateTokenByNewHeadlessAccountV3.GenerateTokenByNewHeadlessAccountV3Builder GenerateTokenByNewHeadlessAccountV3Op
        {
            get { return Operation.GenerateTokenByNewHeadlessAccountV3.Builder.SetWrapperObject(this); }
        }
        public RequestOneTimeLinkingCodeV3.RequestOneTimeLinkingCodeV3Builder RequestOneTimeLinkingCodeV3Op
        {
            get { return Operation.RequestOneTimeLinkingCodeV3.Builder.SetWrapperObject(this); }
        }
        public ValidateOneTimeLinkingCodeV3.ValidateOneTimeLinkingCodeV3Builder ValidateOneTimeLinkingCodeV3Op
        {
            get { return Operation.ValidateOneTimeLinkingCodeV3.Builder.SetWrapperObject(this); }
        }
        public RequestTokenByOneTimeLinkCodeResponseV3.RequestTokenByOneTimeLinkCodeResponseV3Builder RequestTokenByOneTimeLinkCodeResponseV3Op
        {
            get { return Operation.RequestTokenByOneTimeLinkCodeResponseV3.Builder.SetWrapperObject(this); }
        }
        public GetCountryLocationV3.GetCountryLocationV3Builder GetCountryLocationV3Op
        {
            get { return Operation.GetCountryLocationV3.Builder.SetWrapperObject(this); }
        }
        public Logout.LogoutBuilder LogoutOp
        {
            get { return Operation.Logout.Builder.SetWrapperObject(this); }
        }
        public RequestTokenExchangeCodeV3.RequestTokenExchangeCodeV3Builder RequestTokenExchangeCodeV3Op
        {
            get { return Operation.RequestTokenExchangeCodeV3.Builder.SetWrapperObject(this); }
        }
        public PlatformAuthenticationV3.PlatformAuthenticationV3Builder PlatformAuthenticationV3Op
        {
            get { return Operation.PlatformAuthenticationV3.Builder.SetWrapperObject(this); }
        }
        public PlatformTokenRefreshV3.PlatformTokenRefreshV3Builder PlatformTokenRefreshV3Op
        {
            get { return Operation.PlatformTokenRefreshV3.Builder.SetWrapperObject(this); }
        }
        public RequestTargetTokenResponseV3.RequestTargetTokenResponseV3Builder RequestTargetTokenResponseV3Op
        {
            get { return Operation.RequestTargetTokenResponseV3.Builder.SetWrapperObject(this); }
        }
        #endregion

        public string UserAuthenticationV3(UserAuthenticationV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<string> UserAuthenticationV3Async(UserAuthenticationV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelTokenResponseV3? AuthenticationWithPlatformLinkV3(AuthenticationWithPlatformLinkV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelTokenResponseV3?> AuthenticationWithPlatformLinkV3Async(AuthenticationWithPlatformLinkV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelTokenResponseV3? GenerateTokenByNewHeadlessAccountV3(GenerateTokenByNewHeadlessAccountV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelTokenResponseV3?> GenerateTokenByNewHeadlessAccountV3Async(GenerateTokenByNewHeadlessAccountV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelOneTimeLinkingCodeResponse? RequestOneTimeLinkingCodeV3(RequestOneTimeLinkingCodeV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelOneTimeLinkingCodeResponse?> RequestOneTimeLinkingCodeV3Async(RequestOneTimeLinkingCodeV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelOneTimeLinkingCodeValidationResponse? ValidateOneTimeLinkingCodeV3(ValidateOneTimeLinkingCodeV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelOneTimeLinkingCodeValidationResponse?> ValidateOneTimeLinkingCodeV3Async(ValidateOneTimeLinkingCodeV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelTokenResponseV3? RequestTokenByOneTimeLinkCodeResponseV3(RequestTokenByOneTimeLinkCodeResponseV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelTokenResponseV3?> RequestTokenByOneTimeLinkCodeResponseV3Async(RequestTokenByOneTimeLinkCodeResponseV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelCountryLocationResponse? GetCountryLocationV3(GetCountryLocationV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelCountryLocationResponse?> GetCountryLocationV3Async(GetCountryLocationV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void Logout(Logout input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task LogoutAsync(Logout input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelTargetTokenCodeResponse? RequestTokenExchangeCodeV3(RequestTokenExchangeCodeV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelTargetTokenCodeResponse?> RequestTokenExchangeCodeV3Async(RequestTokenExchangeCodeV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public string PlatformAuthenticationV3(PlatformAuthenticationV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<string> PlatformAuthenticationV3Async(PlatformAuthenticationV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelPlatformTokenRefreshResponseV3? PlatformTokenRefreshV3(PlatformTokenRefreshV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelPlatformTokenRefreshResponseV3?> PlatformTokenRefreshV3Async(PlatformTokenRefreshV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.OauthmodelTokenResponseV3? RequestTargetTokenResponseV3(RequestTargetTokenResponseV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.OauthmodelTokenResponseV3?> RequestTargetTokenResponseV3Async(RequestTargetTokenResponseV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}