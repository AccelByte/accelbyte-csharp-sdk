// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Api.Iam.Operation;
using AccelByte.Sdk.Api.Iam.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class IamUsersV4_OpExts
    {
        public static Iam.Model.ModelListInvitationHistoriesV4Response? Execute(
            this AdminListInvitationHistoriesV4.AdminListInvitationHistoriesV4Builder builder
        )
        {
            AdminListInvitationHistoriesV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminListInvitationHistoriesV4(op);
        }
        public static async Task<Iam.Model.ModelListInvitationHistoriesV4Response?> ExecuteAsync(
            this AdminListInvitationHistoriesV4.AdminListInvitationHistoriesV4Builder builder
        )
        {
            AdminListInvitationHistoriesV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminListInvitationHistoriesV4Async(op);
        }
        public static Iam.Model.ModelInvitationHistoryResponse? Execute(
            this AdminGetNamespaceInvitationHistoryV4.AdminGetNamespaceInvitationHistoryV4Builder builder,
            string namespace_
        )
        {
            AdminGetNamespaceInvitationHistoryV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetNamespaceInvitationHistoryV4(op);
        }
        public static async Task<Iam.Model.ModelInvitationHistoryResponse?> ExecuteAsync(
            this AdminGetNamespaceInvitationHistoryV4.AdminGetNamespaceInvitationHistoryV4Builder builder,
            string namespace_
        )
        {
            AdminGetNamespaceInvitationHistoryV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetNamespaceInvitationHistoryV4Async(op);
        }
        public static Iam.Model.ModelNamespaceInvitationHistoryUserV4Response? Execute(
            this AdminGetNamespaceUserInvitationHistoryV4.AdminGetNamespaceUserInvitationHistoryV4Builder builder,
            string namespace_
        )
        {
            AdminGetNamespaceUserInvitationHistoryV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetNamespaceUserInvitationHistoryV4(op);
        }
        public static async Task<Iam.Model.ModelNamespaceInvitationHistoryUserV4Response?> ExecuteAsync(
            this AdminGetNamespaceUserInvitationHistoryV4.AdminGetNamespaceUserInvitationHistoryV4Builder builder,
            string namespace_
        )
        {
            AdminGetNamespaceUserInvitationHistoryV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetNamespaceUserInvitationHistoryV4Async(op);
        }
        public static Iam.Model.AccountCreateTestUsersResponseV4? Execute(
            this AdminCreateTestUsersV4.AdminCreateTestUsersV4Builder builder,
            AccountCreateTestUsersRequestV4 body,
            string namespace_
        )
        {
            AdminCreateTestUsersV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminCreateTestUsersV4(op);
        }
        public static async Task<Iam.Model.AccountCreateTestUsersResponseV4?> ExecuteAsync(
            this AdminCreateTestUsersV4.AdminCreateTestUsersV4Builder builder,
            AccountCreateTestUsersRequestV4 body,
            string namespace_
        )
        {
            AdminCreateTestUsersV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminCreateTestUsersV4Async(op);
        }
        public static Iam.Model.AccountCreateUserResponseV4? Execute(
            this AdminCreateUserV4.AdminCreateUserV4Builder builder,
            AccountCreateUserRequestV4 body,
            string namespace_
        )
        {
            AdminCreateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminCreateUserV4(op);
        }
        public static async Task<Iam.Model.AccountCreateUserResponseV4?> ExecuteAsync(
            this AdminCreateUserV4.AdminCreateUserV4Builder builder,
            AccountCreateUserRequestV4 body,
            string namespace_
        )
        {
            AdminCreateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminCreateUserV4Async(op);
        }
        public static void Execute(
            this AdminBulkUpdateUserAccountTypeV4.AdminBulkUpdateUserAccountTypeV4Builder builder,
            ModelBulkAccountTypeUpdateRequestV4 body,
            string namespace_
        )
        {
            AdminBulkUpdateUserAccountTypeV4 op = builder.Build(
                body,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminBulkUpdateUserAccountTypeV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminBulkUpdateUserAccountTypeV4.AdminBulkUpdateUserAccountTypeV4Builder builder,
            ModelBulkAccountTypeUpdateRequestV4 body,
            string namespace_
        )
        {
            AdminBulkUpdateUserAccountTypeV4 op = builder.Build(
                body,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminBulkUpdateUserAccountTypeV4Async(op);
        }
        public static Iam.Model.ModelListValidUserIDResponseV4? Execute(
            this AdminBulkCheckValidUserIDV4.AdminBulkCheckValidUserIDV4Builder builder,
            ModelCheckValidUserIDRequestV4 body,
            string namespace_
        )
        {
            AdminBulkCheckValidUserIDV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminBulkCheckValidUserIDV4(op);
        }
        public static async Task<Iam.Model.ModelListValidUserIDResponseV4?> ExecuteAsync(
            this AdminBulkCheckValidUserIDV4.AdminBulkCheckValidUserIDV4Builder builder,
            ModelCheckValidUserIDRequestV4 body,
            string namespace_
        )
        {
            AdminBulkCheckValidUserIDV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminBulkCheckValidUserIDV4Async(op);
        }
        public static Iam.Model.ModelUserResponseV3? Execute(
            this AdminUpdateUserV4.AdminUpdateUserV4Builder builder,
            ModelUserUpdateRequestV3 body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserV4(op);
        }
        public static async Task<Iam.Model.ModelUserResponseV3?> ExecuteAsync(
            this AdminUpdateUserV4.AdminUpdateUserV4Builder builder,
            ModelUserUpdateRequestV3 body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserV4Async(op);
        }
        public static void Execute(
            this AdminUpdateUserEmailAddressV4.AdminUpdateUserEmailAddressV4Builder builder,
            ModelEmailUpdateRequestV4 body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserEmailAddressV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserEmailAddressV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminUpdateUserEmailAddressV4.AdminUpdateUserEmailAddressV4Builder builder,
            ModelEmailUpdateRequestV4 body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserEmailAddressV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserEmailAddressV4Async(op);
        }
        public static void Execute(
            this AdminDisableUserMFAV4.AdminDisableUserMFAV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_,
            string userId
        )
        {
            AdminDisableUserMFAV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableUserMFAV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminDisableUserMFAV4.AdminDisableUserMFAV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_,
            string userId
        )
        {
            AdminDisableUserMFAV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableUserMFAV4Async(op);
        }
        public static Iam.Model.ModelUserMFAStatusResponseV4? Execute(
            this AdminGetUserMFAStatusV4.AdminGetUserMFAStatusV4Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserMFAStatusV4 op = builder.Build(
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetUserMFAStatusV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFAStatusResponseV4?> ExecuteAsync(
            this AdminGetUserMFAStatusV4.AdminGetUserMFAStatusV4Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserMFAStatusV4 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetUserMFAStatusV4Async(op);
        }
        public static Iam.Model.ModelListUserRolesV4Response? Execute(
            this AdminListUserRolesV4.AdminListUserRolesV4Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminListUserRolesV4 op = builder.Build(
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminListUserRolesV4(op);
        }
        public static async Task<Iam.Model.ModelListUserRolesV4Response?> ExecuteAsync(
            this AdminListUserRolesV4.AdminListUserRolesV4Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminListUserRolesV4 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminListUserRolesV4Async(op);
        }
        public static Iam.Model.ModelListUserRolesV4Response? Execute(
            this AdminUpdateUserRoleV4.AdminUpdateUserRoleV4Builder builder,
            ModelAddUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserRoleV4(op);
        }
        public static async Task<Iam.Model.ModelListUserRolesV4Response?> ExecuteAsync(
            this AdminUpdateUserRoleV4.AdminUpdateUserRoleV4Builder builder,
            ModelAddUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminUpdateUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateUserRoleV4Async(op);
        }
        public static Iam.Model.ModelListUserRolesV4Response? Execute(
            this AdminAddUserRoleV4.AdminAddUserRoleV4Builder builder,
            ModelAddUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminAddUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminAddUserRoleV4(op);
        }
        public static async Task<Iam.Model.ModelListUserRolesV4Response?> ExecuteAsync(
            this AdminAddUserRoleV4.AdminAddUserRoleV4Builder builder,
            ModelAddUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminAddUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminAddUserRoleV4Async(op);
        }
        public static void Execute(
            this AdminRemoveUserRoleV4.AdminRemoveUserRoleV4Builder builder,
            ModelRemoveUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminRemoveUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminRemoveUserRoleV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminRemoveUserRoleV4.AdminRemoveUserRoleV4Builder builder,
            ModelRemoveUserRoleV4Request body,
            string namespace_,
            string userId
        )
        {
            AdminRemoveUserRoleV4 op = builder.Build(
                body,
                namespace_,
                userId
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminRemoveUserRoleV4Async(op);
        }
        public static Iam.Model.ModelInviteUserResponseV3? Execute(
            this AdminInviteUserNewV4.AdminInviteUserNewV4Builder builder,
            ModelInviteUserRequestV4 body
        )
        {
            AdminInviteUserNewV4 op = builder.Build(
                body
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminInviteUserNewV4(op);
        }
        public static async Task<Iam.Model.ModelInviteUserResponseV3?> ExecuteAsync(
            this AdminInviteUserNewV4.AdminInviteUserNewV4Builder builder,
            ModelInviteUserRequestV4 body
        )
        {
            AdminInviteUserNewV4 op = builder.Build(
                body
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminInviteUserNewV4Async(op);
        }
        public static Iam.Model.ModelUserResponseV3? Execute(
            this AdminUpdateMyUserV4.AdminUpdateMyUserV4Builder builder,
            ModelUserUpdateRequestV3 body
        )
        {
            AdminUpdateMyUserV4 op = builder.Build(
                body
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateMyUserV4(op);
        }
        public static async Task<Iam.Model.ModelUserResponseV3?> ExecuteAsync(
            this AdminUpdateMyUserV4.AdminUpdateMyUserV4Builder builder,
            ModelUserUpdateRequestV3 body
        )
        {
            AdminUpdateMyUserV4 op = builder.Build(
                body
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminUpdateMyUserV4Async(op);
        }
        public static void Execute(
            this AdminDisableMyAuthenticatorV4.AdminDisableMyAuthenticatorV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyAuthenticatorV4 op = builder.Build(
                body
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyAuthenticatorV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminDisableMyAuthenticatorV4.AdminDisableMyAuthenticatorV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyAuthenticatorV4 op = builder.Build(
                body
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyAuthenticatorV4Async(op);
        }
        public static void Execute(
            this AdminEnableMyAuthenticatorV4.AdminEnableMyAuthenticatorV4Builder builder,
            string code
        )
        {
            AdminEnableMyAuthenticatorV4 op = builder.Build(
                code
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyAuthenticatorV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminEnableMyAuthenticatorV4.AdminEnableMyAuthenticatorV4Builder builder,
            string code
        )
        {
            AdminEnableMyAuthenticatorV4 op = builder.Build(
                code
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyAuthenticatorV4Async(op);
        }
        public static Iam.Model.ModelAuthenticatorKeyResponseV4? Execute(
            this AdminGenerateMyAuthenticatorKeyV4.AdminGenerateMyAuthenticatorKeyV4Builder builder
        )
        {
            AdminGenerateMyAuthenticatorKeyV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateMyAuthenticatorKeyV4(op);
        }
        public static async Task<Iam.Model.ModelAuthenticatorKeyResponseV4?> ExecuteAsync(
            this AdminGenerateMyAuthenticatorKeyV4.AdminGenerateMyAuthenticatorKeyV4Builder builder
        )
        {
            AdminGenerateMyAuthenticatorKeyV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateMyAuthenticatorKeyV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this AdminGetMyBackupCodesV4.AdminGetMyBackupCodesV4Builder builder
        )
        {
            AdminGetMyBackupCodesV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this AdminGetMyBackupCodesV4.AdminGetMyBackupCodesV4Builder builder
        )
        {
            AdminGetMyBackupCodesV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this AdminGenerateMyBackupCodesV4.AdminGenerateMyBackupCodesV4Builder builder
        )
        {
            AdminGenerateMyBackupCodesV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this AdminGenerateMyBackupCodesV4.AdminGenerateMyBackupCodesV4Builder builder
        )
        {
            AdminGenerateMyBackupCodesV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateMyBackupCodesV4Async(op);
        }
        public static void Execute(
            this AdminDisableMyBackupCodesV4.AdminDisableMyBackupCodesV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyBackupCodesV4 op = builder.Build(
                body
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminDisableMyBackupCodesV4.AdminDisableMyBackupCodesV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyBackupCodesV4 op = builder.Build(
                body
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Stream? Execute(
            this AdminDownloadMyBackupCodesV4.AdminDownloadMyBackupCodesV4Builder builder
        )
        {
            AdminDownloadMyBackupCodesV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDownloadMyBackupCodesV4(op);
        }
        public static async Task<Stream?> ExecuteAsync(
            this AdminDownloadMyBackupCodesV4.AdminDownloadMyBackupCodesV4Builder builder
        )
        {
            AdminDownloadMyBackupCodesV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDownloadMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this AdminEnableMyBackupCodesV4.AdminEnableMyBackupCodesV4Builder builder
        )
        {
            AdminEnableMyBackupCodesV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this AdminEnableMyBackupCodesV4.AdminEnableMyBackupCodesV4Builder builder
        )
        {
            AdminEnableMyBackupCodesV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyBackupCodesV4Async(op);
        }
        public static void Execute(
            this AdminGetBackupCodesV4.AdminGetBackupCodesV4Builder builder
        )
        {
            AdminGetBackupCodesV4 op = builder.Build(
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminGetBackupCodesV4.AdminGetBackupCodesV4Builder builder
        )
        {
            AdminGetBackupCodesV4 op = builder.Build(
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetBackupCodesV4Async(op);
        }
        public static void Execute(
            this AdminGenerateBackupCodesV4.AdminGenerateBackupCodesV4Builder builder
        )
        {
            AdminGenerateBackupCodesV4 op = builder.Build(
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminGenerateBackupCodesV4.AdminGenerateBackupCodesV4Builder builder
        )
        {
            AdminGenerateBackupCodesV4 op = builder.Build(
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGenerateBackupCodesV4Async(op);
        }
        public static void Execute(
            this AdminEnableBackupCodesV4.AdminEnableBackupCodesV4Builder builder
        )
        {
            AdminEnableBackupCodesV4 op = builder.Build(
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminEnableBackupCodesV4.AdminEnableBackupCodesV4Builder builder
        )
        {
            AdminEnableBackupCodesV4 op = builder.Build(
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableBackupCodesV4Async(op);
        }
        public static Iam.Model.ModelUserMFATokenResponseV4? Execute(
            this AdminChallengeMyMFAV4.AdminChallengeMyMFAV4Builder builder
        )
        {
            AdminChallengeMyMFAV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminChallengeMyMFAV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFATokenResponseV4?> ExecuteAsync(
            this AdminChallengeMyMFAV4.AdminChallengeMyMFAV4Builder builder
        )
        {
            AdminChallengeMyMFAV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminChallengeMyMFAV4Async(op);
        }
        public static void Execute(
            this AdminSendMyMFAEmailCodeV4.AdminSendMyMFAEmailCodeV4Builder builder
        )
        {
            AdminSendMyMFAEmailCodeV4 op = builder.Build(
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminSendMyMFAEmailCodeV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminSendMyMFAEmailCodeV4.AdminSendMyMFAEmailCodeV4Builder builder
        )
        {
            AdminSendMyMFAEmailCodeV4 op = builder.Build(
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminSendMyMFAEmailCodeV4Async(op);
        }
        public static void Execute(
            this AdminDisableMyEmailV4.AdminDisableMyEmailV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyEmailV4 op = builder.Build(
                body
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyEmailV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminDisableMyEmailV4.AdminDisableMyEmailV4Builder builder,
            ModelDisableMFARequest body
        )
        {
            AdminDisableMyEmailV4 op = builder.Build(
                body
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminDisableMyEmailV4Async(op);
        }
        public static void Execute(
            this AdminEnableMyEmailV4.AdminEnableMyEmailV4Builder builder,
            string code
        )
        {
            AdminEnableMyEmailV4 op = builder.Build(
                code
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyEmailV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminEnableMyEmailV4.AdminEnableMyEmailV4Builder builder,
            string code
        )
        {
            AdminEnableMyEmailV4 op = builder.Build(
                code
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminEnableMyEmailV4Async(op);
        }
        public static Iam.Model.ModelEnabledFactorsResponseV4? Execute(
            this AdminGetMyEnabledFactorsV4.AdminGetMyEnabledFactorsV4Builder builder
        )
        {
            AdminGetMyEnabledFactorsV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyEnabledFactorsV4(op);
        }
        public static async Task<Iam.Model.ModelEnabledFactorsResponseV4?> ExecuteAsync(
            this AdminGetMyEnabledFactorsV4.AdminGetMyEnabledFactorsV4Builder builder
        )
        {
            AdminGetMyEnabledFactorsV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyEnabledFactorsV4Async(op);
        }
        public static void Execute(
            this AdminMakeFactorMyDefaultV4.AdminMakeFactorMyDefaultV4Builder builder,
            string factor
        )
        {
            AdminMakeFactorMyDefaultV4 op = builder.Build(
                factor
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminMakeFactorMyDefaultV4(op);
        }
        public static async Task ExecuteAsync(
            this AdminMakeFactorMyDefaultV4.AdminMakeFactorMyDefaultV4Builder builder,
            string factor
        )
        {
            AdminMakeFactorMyDefaultV4 op = builder.Build(
                factor
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminMakeFactorMyDefaultV4Async(op);
        }
        public static Iam.Model.ModelUserMFAStatusResponseV4? Execute(
            this AdminGetMyOwnMFAStatusV4.AdminGetMyOwnMFAStatusV4Builder builder
        )
        {
            AdminGetMyOwnMFAStatusV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyOwnMFAStatusV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFAStatusResponseV4?> ExecuteAsync(
            this AdminGetMyOwnMFAStatusV4.AdminGetMyOwnMFAStatusV4Builder builder
        )
        {
            AdminGetMyOwnMFAStatusV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyOwnMFAStatusV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelUserMFAStatusResponseV4? Execute(
            this AdminGetMyMFAStatusV4.AdminGetMyMFAStatusV4Builder builder
        )
        {
            AdminGetMyMFAStatusV4 op = builder.Build(
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyMFAStatusV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFAStatusResponseV4?> ExecuteAsync(
            this AdminGetMyMFAStatusV4.AdminGetMyMFAStatusV4Builder builder
        )
        {
            AdminGetMyMFAStatusV4 op = builder.Build(
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminGetMyMFAStatusV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelInviteUserResponseV3? Execute(
            this AdminInviteUserV4.AdminInviteUserV4Builder builder,
            ModelInviteUserRequestV4 body
        )
        {
            AdminInviteUserV4 op = builder.Build(
                body
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminInviteUserV4(op);
        }
        public static async Task<Iam.Model.ModelInviteUserResponseV3?> ExecuteAsync(
            this AdminInviteUserV4.AdminInviteUserV4Builder builder,
            ModelInviteUserRequestV4 body
        )
        {
            AdminInviteUserV4 op = builder.Build(
                body
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).AdminInviteUserV4Async(op);
        }
        public static Iam.Model.AccountcommonUserPlatforms? Execute(
            this PublicListUserIDByPlatformUserIDsV4.PublicListUserIDByPlatformUserIDsV4Builder builder,
            ModelPlatformUserIDRequestV4 body,
            string namespace_,
            string platformId
        )
        {
            PublicListUserIDByPlatformUserIDsV4 op = builder.Build(
                body,
                namespace_,
                platformId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicListUserIDByPlatformUserIDsV4(op);
        }
        public static async Task<Iam.Model.AccountcommonUserPlatforms?> ExecuteAsync(
            this PublicListUserIDByPlatformUserIDsV4.PublicListUserIDByPlatformUserIDsV4Builder builder,
            ModelPlatformUserIDRequestV4 body,
            string namespace_,
            string platformId
        )
        {
            PublicListUserIDByPlatformUserIDsV4 op = builder.Build(
                body,
                namespace_,
                platformId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicListUserIDByPlatformUserIDsV4Async(op);
        }
        public static Iam.Model.AccountCreateUserResponseV4? Execute(
            this PublicCreateTestUserV4.PublicCreateTestUserV4Builder builder,
            AccountCreateTestUserRequestV4 body,
            string namespace_
        )
        {
            PublicCreateTestUserV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicCreateTestUserV4(op);
        }
        public static async Task<Iam.Model.AccountCreateUserResponseV4?> ExecuteAsync(
            this PublicCreateTestUserV4.PublicCreateTestUserV4Builder builder,
            AccountCreateTestUserRequestV4 body,
            string namespace_
        )
        {
            PublicCreateTestUserV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicCreateTestUserV4Async(op);
        }
        public static Iam.Model.AccountCreateUserResponseV4? Execute(
            this PublicCreateUserV4.PublicCreateUserV4Builder builder,
            AccountCreateUserRequestV4 body,
            string namespace_
        )
        {
            PublicCreateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicCreateUserV4(op);
        }
        public static async Task<Iam.Model.AccountCreateUserResponseV4?> ExecuteAsync(
            this PublicCreateUserV4.PublicCreateUserV4Builder builder,
            AccountCreateUserRequestV4 body,
            string namespace_
        )
        {
            PublicCreateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicCreateUserV4Async(op);
        }
        public static Iam.Model.AccountCreateUserResponseV4? Execute(
            this CreateUserFromInvitationV4.CreateUserFromInvitationV4Builder builder,
            AccountCreateUserRequestV4 body,
            string invitationId,
            string namespace_
        )
        {
            CreateUserFromInvitationV4 op = builder.Build(
                body,
                invitationId,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).CreateUserFromInvitationV4(op);
        }
        public static async Task<Iam.Model.AccountCreateUserResponseV4?> ExecuteAsync(
            this CreateUserFromInvitationV4.CreateUserFromInvitationV4Builder builder,
            AccountCreateUserRequestV4 body,
            string invitationId,
            string namespace_
        )
        {
            CreateUserFromInvitationV4 op = builder.Build(
                body,
                invitationId,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).CreateUserFromInvitationV4Async(op);
        }
        public static Iam.Model.ModelUserResponseV3? Execute(
            this PublicUpdateUserV4.PublicUpdateUserV4Builder builder,
            ModelPublicUserUpdateRequestV3 body,
            string namespace_
        )
        {
            PublicUpdateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpdateUserV4(op);
        }
        public static async Task<Iam.Model.ModelUserResponseV3?> ExecuteAsync(
            this PublicUpdateUserV4.PublicUpdateUserV4Builder builder,
            ModelPublicUserUpdateRequestV3 body,
            string namespace_
        )
        {
            PublicUpdateUserV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpdateUserV4Async(op);
        }
        public static void Execute(
            this PublicUpdateUserEmailAddressV4.PublicUpdateUserEmailAddressV4Builder builder,
            ModelEmailUpdateRequestV4 body,
            string namespace_
        )
        {
            PublicUpdateUserEmailAddressV4 op = builder.Build(
                body,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpdateUserEmailAddressV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicUpdateUserEmailAddressV4.PublicUpdateUserEmailAddressV4Builder builder,
            ModelEmailUpdateRequestV4 body,
            string namespace_
        )
        {
            PublicUpdateUserEmailAddressV4 op = builder.Build(
                body,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpdateUserEmailAddressV4Async(op);
        }
        public static Iam.Model.AccountUserResponseV4? Execute(
            this PublicUpgradeHeadlessAccountWithVerificationCodeV4.PublicUpgradeHeadlessAccountWithVerificationCodeV4Builder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body,
            string namespace_
        )
        {
            PublicUpgradeHeadlessAccountWithVerificationCodeV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessAccountWithVerificationCodeV4(op);
        }
        public static async Task<Iam.Model.AccountUserResponseV4?> ExecuteAsync(
            this PublicUpgradeHeadlessAccountWithVerificationCodeV4.PublicUpgradeHeadlessAccountWithVerificationCodeV4Builder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body,
            string namespace_
        )
        {
            PublicUpgradeHeadlessAccountWithVerificationCodeV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessAccountWithVerificationCodeV4Async(op);
        }
        public static Iam.Model.AccountUserResponseV4? Execute(
            this PublicUpgradeHeadlessAccountV4.PublicUpgradeHeadlessAccountV4Builder builder,
            AccountUpgradeHeadlessAccountRequestV4 body,
            string namespace_
        )
        {
            PublicUpgradeHeadlessAccountV4 op = builder.Build(
                body,
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessAccountV4(op);
        }
        public static async Task<Iam.Model.AccountUserResponseV4?> ExecuteAsync(
            this PublicUpgradeHeadlessAccountV4.PublicUpgradeHeadlessAccountV4Builder builder,
            AccountUpgradeHeadlessAccountRequestV4 body,
            string namespace_
        )
        {
            PublicUpgradeHeadlessAccountV4 op = builder.Build(
                body,
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessAccountV4Async(op);
        }
        public static void Execute(
            this PublicDisableMyAuthenticatorV4.PublicDisableMyAuthenticatorV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyAuthenticatorV4 op = builder.Build(
                body,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyAuthenticatorV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicDisableMyAuthenticatorV4.PublicDisableMyAuthenticatorV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyAuthenticatorV4 op = builder.Build(
                body,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyAuthenticatorV4Async(op);
        }
        public static void Execute(
            this PublicEnableMyAuthenticatorV4.PublicEnableMyAuthenticatorV4Builder builder,
            string code,
            string namespace_
        )
        {
            PublicEnableMyAuthenticatorV4 op = builder.Build(
                code,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyAuthenticatorV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicEnableMyAuthenticatorV4.PublicEnableMyAuthenticatorV4Builder builder,
            string code,
            string namespace_
        )
        {
            PublicEnableMyAuthenticatorV4 op = builder.Build(
                code,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyAuthenticatorV4Async(op);
        }
        public static Iam.Model.ModelAuthenticatorKeyResponseV4? Execute(
            this PublicGenerateMyAuthenticatorKeyV4.PublicGenerateMyAuthenticatorKeyV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateMyAuthenticatorKeyV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateMyAuthenticatorKeyV4(op);
        }
        public static async Task<Iam.Model.ModelAuthenticatorKeyResponseV4?> ExecuteAsync(
            this PublicGenerateMyAuthenticatorKeyV4.PublicGenerateMyAuthenticatorKeyV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateMyAuthenticatorKeyV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateMyAuthenticatorKeyV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this PublicGetMyBackupCodesV4.PublicGetMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this PublicGetMyBackupCodesV4.PublicGetMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this PublicGenerateMyBackupCodesV4.PublicGenerateMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this PublicGenerateMyBackupCodesV4.PublicGenerateMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateMyBackupCodesV4Async(op);
        }
        public static void Execute(
            this PublicDisableMyBackupCodesV4.PublicDisableMyBackupCodesV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyBackupCodesV4 op = builder.Build(
                body,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicDisableMyBackupCodesV4.PublicDisableMyBackupCodesV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyBackupCodesV4 op = builder.Build(
                body,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Stream? Execute(
            this PublicDownloadMyBackupCodesV4.PublicDownloadMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicDownloadMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDownloadMyBackupCodesV4(op);
        }
        public static async Task<Stream?> ExecuteAsync(
            this PublicDownloadMyBackupCodesV4.PublicDownloadMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicDownloadMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDownloadMyBackupCodesV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelBackupCodesResponseV4? Execute(
            this PublicEnableMyBackupCodesV4.PublicEnableMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicEnableMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyBackupCodesV4(op);
        }
        public static async Task<Iam.Model.ModelBackupCodesResponseV4?> ExecuteAsync(
            this PublicEnableMyBackupCodesV4.PublicEnableMyBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicEnableMyBackupCodesV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyBackupCodesV4Async(op);
        }
        public static void Execute(
            this PublicGetBackupCodesV4.PublicGetBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGetBackupCodesV4 op = builder.Build(
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicGetBackupCodesV4.PublicGetBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGetBackupCodesV4 op = builder.Build(
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetBackupCodesV4Async(op);
        }
        public static void Execute(
            this PublicGenerateBackupCodesV4.PublicGenerateBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateBackupCodesV4 op = builder.Build(
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicGenerateBackupCodesV4.PublicGenerateBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicGenerateBackupCodesV4 op = builder.Build(
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGenerateBackupCodesV4Async(op);
        }
        public static void Execute(
            this PublicEnableBackupCodesV4.PublicEnableBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicEnableBackupCodesV4 op = builder.Build(
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableBackupCodesV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicEnableBackupCodesV4.PublicEnableBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PublicEnableBackupCodesV4 op = builder.Build(
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableBackupCodesV4Async(op);
        }
        public static Iam.Model.ModelUserMFATokenResponseV4? Execute(
            this PublicChallengeMyMFAV4.PublicChallengeMyMFAV4Builder builder,
            string namespace_
        )
        {
            PublicChallengeMyMFAV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicChallengeMyMFAV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFATokenResponseV4?> ExecuteAsync(
            this PublicChallengeMyMFAV4.PublicChallengeMyMFAV4Builder builder,
            string namespace_
        )
        {
            PublicChallengeMyMFAV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicChallengeMyMFAV4Async(op);
        }
        public static void Execute(
            this PublicRemoveTrustedDeviceV4.PublicRemoveTrustedDeviceV4Builder builder,
            string namespace_,
            string deviceToken
        )
        {
            PublicRemoveTrustedDeviceV4 op = builder.Build(
                namespace_,
                deviceToken
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicRemoveTrustedDeviceV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicRemoveTrustedDeviceV4.PublicRemoveTrustedDeviceV4Builder builder,
            string namespace_,
            string deviceToken
        )
        {
            PublicRemoveTrustedDeviceV4 op = builder.Build(
                namespace_,
                deviceToken
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicRemoveTrustedDeviceV4Async(op);
        }
        public static void Execute(
            this PublicSendMyMFAEmailCodeV4.PublicSendMyMFAEmailCodeV4Builder builder,
            string namespace_
        )
        {
            PublicSendMyMFAEmailCodeV4 op = builder.Build(
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicSendMyMFAEmailCodeV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicSendMyMFAEmailCodeV4.PublicSendMyMFAEmailCodeV4Builder builder,
            string namespace_
        )
        {
            PublicSendMyMFAEmailCodeV4 op = builder.Build(
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicSendMyMFAEmailCodeV4Async(op);
        }
        public static void Execute(
            this PublicDisableMyEmailV4.PublicDisableMyEmailV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyEmailV4 op = builder.Build(
                body,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyEmailV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicDisableMyEmailV4.PublicDisableMyEmailV4Builder builder,
            ModelDisableMFARequest body,
            string namespace_
        )
        {
            PublicDisableMyEmailV4 op = builder.Build(
                body,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicDisableMyEmailV4Async(op);
        }
        public static void Execute(
            this PublicEnableMyEmailV4.PublicEnableMyEmailV4Builder builder,
            string code,
            string namespace_
        )
        {
            PublicEnableMyEmailV4 op = builder.Build(
                code,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyEmailV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicEnableMyEmailV4.PublicEnableMyEmailV4Builder builder,
            string code,
            string namespace_
        )
        {
            PublicEnableMyEmailV4 op = builder.Build(
                code,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicEnableMyEmailV4Async(op);
        }
        public static Iam.Model.ModelEnabledFactorsResponseV4? Execute(
            this PublicGetMyEnabledFactorsV4.PublicGetMyEnabledFactorsV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyEnabledFactorsV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyEnabledFactorsV4(op);
        }
        public static async Task<Iam.Model.ModelEnabledFactorsResponseV4?> ExecuteAsync(
            this PublicGetMyEnabledFactorsV4.PublicGetMyEnabledFactorsV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyEnabledFactorsV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyEnabledFactorsV4Async(op);
        }
        public static void Execute(
            this PublicMakeFactorMyDefaultV4.PublicMakeFactorMyDefaultV4Builder builder,
            string factor,
            string namespace_
        )
        {
            PublicMakeFactorMyDefaultV4 op = builder.Build(
                factor,
                namespace_
            );

            ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicMakeFactorMyDefaultV4(op);
        }
        public static async Task ExecuteAsync(
            this PublicMakeFactorMyDefaultV4.PublicMakeFactorMyDefaultV4Builder builder,
            string factor,
            string namespace_
        )
        {
            PublicMakeFactorMyDefaultV4 op = builder.Build(
                factor,
                namespace_
            );

            await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicMakeFactorMyDefaultV4Async(op);
        }
        public static Iam.Model.ModelUserMFAStatusResponseV4? Execute(
            this PublicGetMyOwnMFAStatusV4.PublicGetMyOwnMFAStatusV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyOwnMFAStatusV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyOwnMFAStatusV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFAStatusResponseV4?> ExecuteAsync(
            this PublicGetMyOwnMFAStatusV4.PublicGetMyOwnMFAStatusV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyOwnMFAStatusV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyOwnMFAStatusV4Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Iam.Model.ModelUserMFAStatusResponseV4? Execute(
            this PublicGetMyMFAStatusV4.PublicGetMyMFAStatusV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyMFAStatusV4 op = builder.Build(
                namespace_
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyMFAStatusV4(op);
        }
        public static async Task<Iam.Model.ModelUserMFAStatusResponseV4?> ExecuteAsync(
            this PublicGetMyMFAStatusV4.PublicGetMyMFAStatusV4Builder builder,
            string namespace_
        )
        {
            PublicGetMyMFAStatusV4 op = builder.Build(
                namespace_
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetMyMFAStatusV4Async(op);
        }
        public static Iam.Model.ModelUserPublicInfoResponseV4? Execute(
            this PublicGetUserPublicInfoByUserIdV4.PublicGetUserPublicInfoByUserIdV4Builder builder,
            string namespace_,
            string userId
        )
        {
            PublicGetUserPublicInfoByUserIdV4 op = builder.Build(
                namespace_,
                userId
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetUserPublicInfoByUserIdV4(op);
        }
        public static async Task<Iam.Model.ModelUserPublicInfoResponseV4?> ExecuteAsync(
            this PublicGetUserPublicInfoByUserIdV4.PublicGetUserPublicInfoByUserIdV4Builder builder,
            string namespace_,
            string userId
        )
        {
            PublicGetUserPublicInfoByUserIdV4 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicGetUserPublicInfoByUserIdV4Async(op);
        }
        public static Iam.Model.ModelInviteUserResponseV3? Execute(
            this PublicInviteUserV4.PublicInviteUserV4Builder builder,
            ModelPublicInviteUserRequestV4 body
        )
        {
            PublicInviteUserV4 op = builder.Build(
                body
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicInviteUserV4(op);
        }
        public static async Task<Iam.Model.ModelInviteUserResponseV3?> ExecuteAsync(
            this PublicInviteUserV4.PublicInviteUserV4Builder builder,
            ModelPublicInviteUserRequestV4 body
        )
        {
            PublicInviteUserV4 op = builder.Build(
                body
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicInviteUserV4Async(op);
        }
        public static string Execute(
            this PublicUpgradeHeadlessWithCodeV4Forward.PublicUpgradeHeadlessWithCodeV4ForwardBuilder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body
        )
        {
            PublicUpgradeHeadlessWithCodeV4Forward op = builder.Build(
                body
            );

            return ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessWithCodeV4Forward(op);
        }
        public static async Task<string> ExecuteAsync(
            this PublicUpgradeHeadlessWithCodeV4Forward.PublicUpgradeHeadlessWithCodeV4ForwardBuilder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body
        )
        {
            PublicUpgradeHeadlessWithCodeV4Forward op = builder.Build(
                body
            );

            return await ((Iam.Wrapper.UsersV4)builder.WrapperObject!).PublicUpgradeHeadlessWithCodeV4ForwardAsync(op);
        }
    }
}