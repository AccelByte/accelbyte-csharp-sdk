// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminChangeRoleOverrideConfigStatusV3
    ///
    /// Enable or disable the target role override feature in path namespace.
    /// Note:
    /// This API has upsert behavior, if there is no config yet, it will create a new one first.
    /// </summary>
    public class AdminChangeRoleOverrideConfigStatusV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminChangeRoleOverrideConfigStatusV3Builder Builder { get => new AdminChangeRoleOverrideConfigStatusV3Builder(); }

        public class AdminChangeRoleOverrideConfigStatusV3Builder
            : OperationBuilder<AdminChangeRoleOverrideConfigStatusV3Builder>
        {





            internal AdminChangeRoleOverrideConfigStatusV3Builder() { }






            public AdminChangeRoleOverrideConfigStatusV3 Build(
                ModelRoleOverrideStatsUpdateRequest body,
                string namespace_,
                AdminChangeRoleOverrideConfigStatusV3Identity identity
            )
            {
                AdminChangeRoleOverrideConfigStatusV3 op = new AdminChangeRoleOverrideConfigStatusV3(this,
                    body,
                    namespace_,
                    identity
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminChangeRoleOverrideConfigStatusV3(AdminChangeRoleOverrideConfigStatusV3Builder builder,
            ModelRoleOverrideStatsUpdateRequest body,
            string namespace_,
            AdminChangeRoleOverrideConfigStatusV3Identity identity
        )
        {
            PathParams["namespace"] = namespace_;

            if (identity is not null) QueryParams["identity"] = identity.Value;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminChangeRoleOverrideConfigStatusV3(
            string namespace_,
            AdminChangeRoleOverrideConfigStatusV3Identity identity,
            Model.ModelRoleOverrideStatsUpdateRequest body
        )
        {
            PathParams["namespace"] = namespace_;

            if (identity is not null) QueryParams["identity"] = identity.Value;




            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/roleoverride/status";

        public override HttpMethod Method => HttpMethod.Patch;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelRoleOverrideResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelRoleOverrideResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelRoleOverrideResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelRoleOverrideResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class AdminChangeRoleOverrideConfigStatusV3Identity : StringEnum<AdminChangeRoleOverrideConfigStatusV3Identity>
    {
        public static readonly AdminChangeRoleOverrideConfigStatusV3Identity GAMEADMIN
            = new AdminChangeRoleOverrideConfigStatusV3Identity("GAME_ADMIN");

        public static readonly AdminChangeRoleOverrideConfigStatusV3Identity USER
            = new AdminChangeRoleOverrideConfigStatusV3Identity("USER");

        public static readonly AdminChangeRoleOverrideConfigStatusV3Identity VIEWONLY
            = new AdminChangeRoleOverrideConfigStatusV3Identity("VIEW_ONLY");


        public static implicit operator AdminChangeRoleOverrideConfigStatusV3Identity(string value)
        {
            return NewValue(value);
        }

        public AdminChangeRoleOverrideConfigStatusV3Identity(string enumValue)
            : base(enumValue)
        {

        }
    }

}