// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicCreateUserV2
    ///
    /// 
    /// 
    /// ## The endpoint is going to be deprecated
    /// 
    /// 
    /// Endpoint migration guide
    /// 
    /// 
    ///             *  Substitute endpoint: /iam/v3/public/namespaces/{namespace}/users [POST]
    /// 
    ///             *  Substitute endpoint: /iam/v4/public/namespaces/{namespace}/users [POST]
    /// 
    /// 
    /// 
    ///             *  Note:
    ///      1. v3 & v4 introduce optional verification code
    /// 
    ///      2. format differenceï¼Pascal case => Camel case)
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Available Authentication Types:
    /// 
    /// 
    /// 
    /// 
    ///             1.  EMAILPASSWD : an authentication type used for new user registration through email.
    /// 
    /// 
    /// 
    /// 
    /// Country use ISO3166-1 alpha-2 two letter, e.g. US.
    /// </summary>
    [Obsolete(DiagnosticId = "ab_deprecated_operation")]
    public class PublicCreateUserV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicCreateUserV2Builder Builder { get => new PublicCreateUserV2Builder(); }

        public class PublicCreateUserV2Builder
            : OperationBuilder<PublicCreateUserV2Builder>
        {





            internal PublicCreateUserV2Builder() { }






            public PublicCreateUserV2 Build(
                ModelUserCreateRequest body,
                string namespace_
            )
            {
                PublicCreateUserV2 op = new PublicCreateUserV2(this,
                    body,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private PublicCreateUserV2(PublicCreateUserV2Builder builder,
            ModelUserCreateRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicCreateUserV2(
            string namespace_,
            Model.ModelUserCreateRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v2/public/namespaces/{namespace}/users";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelUserCreateResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelUserCreateResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelUserCreateResponse>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}