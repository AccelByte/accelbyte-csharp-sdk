// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminPlatformUnlinkAllV3
    ///
    /// Unlink user's account from third platform in all namespaces.
    /// Several platforms are grouped under account groups, you can use either platform ID or platform group as platformId path parameter.
    /// example: to unlink steam third party account, you can use steamnetwork / steam / steamopenid as platformId path parameter
    /// 
    /// Supported platform:
    /// - Steam group(steamnetwork)
    /// - steam
    /// - steamopenid
    /// - PSN group(psn)
    /// - ps4web
    /// - ps4
    /// - ps5
    /// - XBOX group(xbox)
    /// - live
    /// - xblweb
    /// - Oculus group(oculusgroup)
    /// - oculus
    /// - oculusweb
    /// - facebook
    /// - google
    /// - twitch
    /// - discord
    /// - android
    /// - ios
    /// - apple
    /// - device
    /// - justice
    /// - epicgames
    /// - nintendo
    /// - awscognito
    /// - netflix
    /// - snapchat
    /// - oidc platform id
    /// 
    /// Note:
    /// if user unlink platform account that have group, the API logic will unlink all of platform account under that group as well.
    /// example: if user unlink from ps4, the API logic will unlink ps5 and ps4web as well
    /// </summary>
    public class AdminPlatformUnlinkAllV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminPlatformUnlinkAllV3Builder Builder { get => new AdminPlatformUnlinkAllV3Builder(); }

        public class AdminPlatformUnlinkAllV3Builder
            : OperationBuilder<AdminPlatformUnlinkAllV3Builder>
        {





            internal AdminPlatformUnlinkAllV3Builder() { }






            public AdminPlatformUnlinkAllV3 Build(
                string namespace_,
                string platformId,
                string userId
            )
            {
                AdminPlatformUnlinkAllV3 op = new AdminPlatformUnlinkAllV3(this,
                    namespace_,
                    platformId,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminPlatformUnlinkAllV3(AdminPlatformUnlinkAllV3Builder builder,
            string namespace_,
            string platformId,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminPlatformUnlinkAllV3(
            string namespace_,
            string platformId,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/{platformId}/all";

        public override HttpMethod Method => HttpMethod.Delete;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}