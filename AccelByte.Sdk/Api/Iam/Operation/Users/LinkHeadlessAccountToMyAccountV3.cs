// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// LinkHeadlessAccountToMyAccountV3
    ///
    /// Note:
    /// 
    /// 1. My account should be full account
    /// 2. My account not linked to headless account's third platform.
    /// </summary>
    public class LinkHeadlessAccountToMyAccountV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static LinkHeadlessAccountToMyAccountV3Builder Builder { get => new LinkHeadlessAccountToMyAccountV3Builder(); }

        public class LinkHeadlessAccountToMyAccountV3Builder
            : OperationBuilder<LinkHeadlessAccountToMyAccountV3Builder>
        {





            internal LinkHeadlessAccountToMyAccountV3Builder() { }






            public LinkHeadlessAccountToMyAccountV3 Build(
                ModelLinkHeadlessAccountRequest body
            )
            {
                LinkHeadlessAccountToMyAccountV3 op = new LinkHeadlessAccountToMyAccountV3(this,
                    body
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private LinkHeadlessAccountToMyAccountV3(LinkHeadlessAccountToMyAccountV3Builder builder,
            ModelLinkHeadlessAccountRequest body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public LinkHeadlessAccountToMyAccountV3(
            Model.ModelLinkHeadlessAccountRequest body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/users/me/headless/linkWithProgression";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}