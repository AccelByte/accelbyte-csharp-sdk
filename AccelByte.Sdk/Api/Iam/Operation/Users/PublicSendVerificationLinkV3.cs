// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicSendVerificationLinkV3
    ///
    /// Required valid user authorization
    /// 
    /// 
    /// The verification link is sent to email address
    /// 
    /// 
    /// 
    /// 
    /// It will not send request if user email is already verified
    /// </summary>
    public class PublicSendVerificationLinkV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicSendVerificationLinkV3Builder Builder { get => new PublicSendVerificationLinkV3Builder(); }

        public class PublicSendVerificationLinkV3Builder
            : OperationBuilder<PublicSendVerificationLinkV3Builder>
        {





            internal PublicSendVerificationLinkV3Builder() { }






            public PublicSendVerificationLinkV3 Build(
                ModelSendVerificationLinkRequest body
            )
            {
                PublicSendVerificationLinkV3 op = new PublicSendVerificationLinkV3(this,
                    body
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private PublicSendVerificationLinkV3(PublicSendVerificationLinkV3Builder builder,
            ModelSendVerificationLinkRequest body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicSendVerificationLinkV3(
            Model.ModelSendVerificationLinkRequest body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/users/me/verify_link/request";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}