// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminListAllDistinctPlatformAccountsV3
    ///
    /// This endpoint only retrieves 3rd party platform accounts linked to user.
    /// It will query platform accounts and result will be distinct & grouped, same platform we will pick oldest linked one.
    /// ------
    /// Supported status:
    /// - LINKED
    /// - RESTRICTIVELY_UNLINKED
    /// - UNLINKED
    /// - ALL
    /// </summary>
    public class AdminListAllDistinctPlatformAccountsV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminListAllDistinctPlatformAccountsV3Builder Builder { get => new AdminListAllDistinctPlatformAccountsV3Builder(); }

        public class AdminListAllDistinctPlatformAccountsV3Builder
            : OperationBuilder<AdminListAllDistinctPlatformAccountsV3Builder>
        {

            public string? Status { get; set; }





            internal AdminListAllDistinctPlatformAccountsV3Builder() { }


            public AdminListAllDistinctPlatformAccountsV3Builder SetStatus(string _status)
            {
                Status = _status;
                return this;
            }





            public AdminListAllDistinctPlatformAccountsV3 Build(
                string namespace_,
                string userId
            )
            {
                AdminListAllDistinctPlatformAccountsV3 op = new AdminListAllDistinctPlatformAccountsV3(this,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminListAllDistinctPlatformAccountsV3(AdminListAllDistinctPlatformAccountsV3Builder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.Status is not null) QueryParams["status"] = builder.Status;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminListAllDistinctPlatformAccountsV3(
            string namespace_,
            string userId,
            string? status
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (status is not null) QueryParams["status"] = status;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/users/{userId}/platforms/distinct";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.AccountcommonDistinctPlatformResponseV3? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.AccountcommonDistinctPlatformResponseV3>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.AccountcommonDistinctPlatformResponseV3>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.AccountcommonDistinctPlatformResponseV3>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}