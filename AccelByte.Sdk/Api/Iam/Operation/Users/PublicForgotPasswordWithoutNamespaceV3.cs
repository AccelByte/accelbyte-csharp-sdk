// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicForgotPasswordWithoutNamespaceV3
    ///
    /// This endpoint does not need a namespace in the path, we will find the namespace based on:
    /// 
    /// - If this is premium environment, the namespace will be the publisher namespace.
    /// - If this is shared cloud:
    /// - If this is from Admin Portal, we will find the user by the email.
    /// - If this is not from Admin Portal, we will find the namespace based on the client id.
    /// 
    /// **Note**:
    /// - The param **clientId** is required in Shared Cloud
    /// - The namespace in the response is publisher/studio namespace
    /// </summary>
    public class PublicForgotPasswordWithoutNamespaceV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicForgotPasswordWithoutNamespaceV3Builder Builder { get => new PublicForgotPasswordWithoutNamespaceV3Builder(); }

        public class PublicForgotPasswordWithoutNamespaceV3Builder
            : OperationBuilder<PublicForgotPasswordWithoutNamespaceV3Builder>
        {





            internal PublicForgotPasswordWithoutNamespaceV3Builder() { }






            public PublicForgotPasswordWithoutNamespaceV3 Build(
                ModelForgotPasswordWithoutNamespaceRequestV3 body
            )
            {
                PublicForgotPasswordWithoutNamespaceV3 op = new PublicForgotPasswordWithoutNamespaceV3(this,
                    body
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicForgotPasswordWithoutNamespaceV3(PublicForgotPasswordWithoutNamespaceV3Builder builder,
            ModelForgotPasswordWithoutNamespaceRequestV3 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicForgotPasswordWithoutNamespaceV3(
            Model.ModelForgotPasswordWithoutNamespaceRequestV3 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/users/forgot";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelForgotPasswordResponseV3? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelForgotPasswordResponseV3>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelForgotPasswordResponseV3>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelForgotPasswordResponseV3>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}