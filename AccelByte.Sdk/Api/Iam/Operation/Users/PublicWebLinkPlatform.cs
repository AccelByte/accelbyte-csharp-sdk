// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicWebLinkPlatform
    ///
    /// This endpoint is used to generate third party login page which will redirected to establish endpoint.
    /// </summary>
    public class PublicWebLinkPlatform : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicWebLinkPlatformBuilder Builder { get => new PublicWebLinkPlatformBuilder(); }

        public class PublicWebLinkPlatformBuilder
            : OperationBuilder<PublicWebLinkPlatformBuilder>
        {

            public string? ClientId { get; set; }

            public string? RedirectUri { get; set; }





            internal PublicWebLinkPlatformBuilder() { }


            public PublicWebLinkPlatformBuilder SetClientId(string _clientId)
            {
                ClientId = _clientId;
                return this;
            }

            public PublicWebLinkPlatformBuilder SetRedirectUri(string _redirectUri)
            {
                RedirectUri = _redirectUri;
                return this;
            }





            public PublicWebLinkPlatform Build(
                string namespace_,
                string platformId
            )
            {
                PublicWebLinkPlatform op = new PublicWebLinkPlatform(this,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private PublicWebLinkPlatform(PublicWebLinkPlatformBuilder builder,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;

            if (builder.ClientId is not null) QueryParams["clientId"] = builder.ClientId;
            if (builder.RedirectUri is not null) QueryParams["redirectUri"] = builder.RedirectUri;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicWebLinkPlatform(
            string namespace_,
            string platformId,
            string? clientId,
            string? redirectUri
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;

            if (clientId is not null) QueryParams["clientId"] = clientId;
            if (redirectUri is not null) QueryParams["redirectUri"] = redirectUri;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/namespaces/{namespace}/users/me/platforms/{platformId}/web/link";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelWebLinkingResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelWebLinkingResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelWebLinkingResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelWebLinkingResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}