// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminCursorGetUserV3
    ///
    /// 1. **Cursor-Based User Retrieval**
    /// This API fetches user records ordered by created_at ASC, user_id ASC to ensure a stable pagination order.
    /// Pagination is handled using a cursor, which consists of created_at and user_id.
    /// 2. **GraphQL-Like Querying**
    /// By default, the API only returns the user ID.
    /// To include additional fields in the response, specify them in the request body under the fields parameter.
    /// ***Supported fields***:
    /// ['created_at', 'email_address']
    /// ***Note***: If a value is not in the allowed list, the API will ignore it.
    /// 3. **Cursor Mechanics**
    /// The cursor consists of created_at and user_id from the last retrieved record.
    /// The next query fetches records strictly after the provided cursor.
    /// ***The query applies the following ordering logic***:
    /// Records with a later created_at timestamp are included.
    /// If multiple records have the same created_at, only records with a higher user_id are included.
    /// This ensures that records with the exact same created_at as the cursor are excluded from the next page to prevent duplication.
    /// 4. **Usage**
    /// For the first-time query, the request body does not require a cursor.
    /// If the data array is empty, it indicates that the cursor has reached the end of the available records.
    /// </summary>
    public class AdminCursorGetUserV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCursorGetUserV3Builder Builder { get => new AdminCursorGetUserV3Builder(); }

        public class AdminCursorGetUserV3Builder
            : OperationBuilder<AdminCursorGetUserV3Builder>
        {





            internal AdminCursorGetUserV3Builder() { }






            public AdminCursorGetUserV3 Build(
                ModelCursorGetUserRequest body,
                string namespace_
            )
            {
                AdminCursorGetUserV3 op = new AdminCursorGetUserV3(this,
                    body,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminCursorGetUserV3(AdminCursorGetUserV3Builder builder,
            ModelCursorGetUserRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminCursorGetUserV3(
            string namespace_,
            Model.ModelCursorGetUserRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/users/cursor";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelCursorGetUserResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelCursorGetUserResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelCursorGetUserResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelCursorGetUserResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}