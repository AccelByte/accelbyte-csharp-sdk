// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PlatformLink
    ///
    /// 
    /// 
    /// Required permission 'NAMESPACE:{namespace}:USER:{userId} [UPDATE]'.
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Prerequisite: Platform client configuration need to be added to database for specific platformId. Namespace service URL need to be specified (refer to required environment variables).
    /// 
    /// 
    /// ## Supported platforms:
    /// 
    /// 
    /// 
    /// 
    ///         * steam : The ticketâs value is the authentication code returned by Steam.
    /// 
    /// 
    ///         * steamopenid : Steam's user authentication method using OpenID 2.0. The ticket's value is URL generated by Steam on web authentication
    /// 
    /// 
    ///         * facebook : The ticketâs value is the authorization code returned by Facebook OAuth
    /// 
    /// 
    ///         * google : The ticketâs value is the authorization code returned by Google OAuth
    /// 
    /// 
    ///         * oculus : The ticketâs value is a string composed of Oculus's user ID and the nonce separated by a colon (:).
    /// 
    /// 
    ///         * twitch : The ticketâs value is the authorization code returned by Twitch OAuth.
    /// 
    /// 
    ///         * android : The ticket's value is the Androidâs device ID
    /// 
    /// 
    ///         * ios : The ticket's value is the iOSâs device ID.
    /// 
    /// 
    ///         * apple : The ticketâs value is the authorization code returned by Apple OAuth.
    /// 
    /// 
    ///         * device : Every device that doesânt run Android and iOS is categorized as a device platform. The ticket's value is the deviceâs ID.
    /// 
    /// 
    ///         * discord : The ticketâs value is the authorization code returned by Discord OAuth.
    /// </summary>
    public class PlatformLink : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PlatformLinkBuilder Builder = new PlatformLinkBuilder();

        public class PlatformLinkBuilder
        {
            
            
            
            
            internal PlatformLinkBuilder() { }





            public PlatformLink Build(
                string ticket,
                string namespace_,
                string platformId,
                string userId
            )
            {
                return new PlatformLink(this,
                    ticket,                    
                    namespace_,                    
                    platformId,                    
                    userId                    
                );
            }
        }

        private PlatformLink(PlatformLinkBuilder builder,
            string ticket,
            string namespace_,
            string platformId,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;
            PathParams["userId"] = userId;
            
            
            if (ticket != null) FormParams["ticket"] = ticket;
            
            
            
        }
        #endregion

        public PlatformLink(
            string namespace_,            
            string platformId,            
            string userId,            
            string ticket            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;
            PathParams["userId"] = userId;
            
            
            if (ticket != null) FormParams["ticket"] = ticket;
            
            
            
        }

        public override string Path => "/iam/namespaces/{namespace}/users/{userId}/platforms/{platformId}/link";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        public override string? Security {get; set;} = "Bearer";
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }
}