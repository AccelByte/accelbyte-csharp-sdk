// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// UpgradeAndAuthenticateForwardV3
    ///
    /// In login website based flow, after account upgraded, we need this API to handle the forward
    /// </summary>
    public class UpgradeAndAuthenticateForwardV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpgradeAndAuthenticateForwardV3Builder Builder { get => new UpgradeAndAuthenticateForwardV3Builder(); }

        public class UpgradeAndAuthenticateForwardV3Builder
            : OperationBuilder<UpgradeAndAuthenticateForwardV3Builder>
        {





            internal UpgradeAndAuthenticateForwardV3Builder() { }






            public UpgradeAndAuthenticateForwardV3 Build(
                string clientId,
                string upgradeSuccessToken
            )
            {
                UpgradeAndAuthenticateForwardV3 op = new UpgradeAndAuthenticateForwardV3(this,
                    clientId,
                    upgradeSuccessToken
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private UpgradeAndAuthenticateForwardV3(UpgradeAndAuthenticateForwardV3Builder builder,
            string clientId,
            string upgradeSuccessToken
        )
        {


            if (clientId is not null) FormParams["client_id"] = clientId;
            if (upgradeSuccessToken is not null) FormParams["upgrade_success_token"] = upgradeSuccessToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpgradeAndAuthenticateForwardV3(
            string clientId,
            string upgradeSuccessToken
        )
        {


            if (clientId is not null) FormParams["client_id"] = clientId;
            if (upgradeSuccessToken is not null) FormParams["upgrade_success_token"] = upgradeSuccessToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/upgrade/forward";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public string ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var payloadString = Helper.ConvertInputStreamToString(payload);

            if (code == (HttpStatusCode)302)
            {
                return payloadString;
            }

            throw new HttpResponseException(code, payloadString);
        }
    }

}