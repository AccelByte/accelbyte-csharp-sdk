// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// RequestTokenByOneTimeLinkCodeResponseV3
    ///
    /// This endpoint is being used to generate user's token by one time link code.
    /// It require publisher ClientID
    /// It required a code which can be generated from `/iam/v3/link/code/request`.
    /// 
    /// This endpoint support creating transient token by utilizing **isTransient** param:
    /// **isTransient=true** will generate a transient token with a short Time Expiration and without a refresh token
    /// **isTransient=false** will consume the one-time code and generate the access token with a refresh token.
    /// </summary>
    public class RequestTokenByOneTimeLinkCodeResponseV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static RequestTokenByOneTimeLinkCodeResponseV3Builder Builder { get => new RequestTokenByOneTimeLinkCodeResponseV3Builder(); }

        public class RequestTokenByOneTimeLinkCodeResponseV3Builder
            : OperationBuilder<RequestTokenByOneTimeLinkCodeResponseV3Builder>
        {



            public string? AdditionalData { get; set; }

            public bool? IsTransient { get; set; }



            internal RequestTokenByOneTimeLinkCodeResponseV3Builder() { }




            public RequestTokenByOneTimeLinkCodeResponseV3Builder SetAdditionalData(string _additionalData)
            {
                AdditionalData = _additionalData;
                return this;
            }

            public RequestTokenByOneTimeLinkCodeResponseV3Builder SetIsTransient(bool _isTransient)
            {
                IsTransient = _isTransient;
                return this;
            }



            public RequestTokenByOneTimeLinkCodeResponseV3 Build(
                string clientId,
                string oneTimeLinkCode
            )
            {
                RequestTokenByOneTimeLinkCodeResponseV3 op = new RequestTokenByOneTimeLinkCodeResponseV3(this,
                    clientId,
                    oneTimeLinkCode
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private RequestTokenByOneTimeLinkCodeResponseV3(RequestTokenByOneTimeLinkCodeResponseV3Builder builder,
            string clientId,
            string oneTimeLinkCode
        )
        {


            if (builder.AdditionalData is not null) FormParams["additionalData"] = builder.AdditionalData;
            if (builder.IsTransient != null) FormParams["isTransient"] = Convert.ToString(builder.IsTransient)!;
            if (clientId is not null) FormParams["client_id"] = clientId;
            if (oneTimeLinkCode is not null) FormParams["oneTimeLinkCode"] = oneTimeLinkCode;





        }
        #endregion

        public RequestTokenByOneTimeLinkCodeResponseV3(
            string? additionalData,
            bool? isTransient,
            string clientId,
            string oneTimeLinkCode
        )
        {


            if (additionalData is not null) FormParams["additionalData"] = additionalData;
            if (isTransient != null) FormParams["isTransient"] = Convert.ToString(isTransient)!;
            if (clientId is not null) FormParams["client_id"] = clientId;
            if (oneTimeLinkCode is not null) FormParams["oneTimeLinkCode"] = oneTimeLinkCode;





        }

        public override string Path => "/iam/v3/link/token/exchange";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.OauthmodelTokenResponseV3? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}