// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicGetProfileUpdateStrategyV3
    ///
    /// This API is for public user to get profile update strategy by namespace and field.
    /// Note: If the config is not found, this API will return a config with unlimited.
    /// </summary>
    public class PublicGetProfileUpdateStrategyV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetProfileUpdateStrategyV3Builder Builder { get => new PublicGetProfileUpdateStrategyV3Builder(); }

        public class PublicGetProfileUpdateStrategyV3Builder
            : OperationBuilder<PublicGetProfileUpdateStrategyV3Builder>
        {

            public PublicGetProfileUpdateStrategyV3Field? Field { get; set; }





            internal PublicGetProfileUpdateStrategyV3Builder() { }


            public PublicGetProfileUpdateStrategyV3Builder SetField(PublicGetProfileUpdateStrategyV3Field _field)
            {
                Field = _field;
                return this;
            }





            public PublicGetProfileUpdateStrategyV3 Build(
                string namespace_
            )
            {
                PublicGetProfileUpdateStrategyV3 op = new PublicGetProfileUpdateStrategyV3(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicGetProfileUpdateStrategyV3(PublicGetProfileUpdateStrategyV3Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Field is not null) QueryParams["field"] = builder.Field.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetProfileUpdateStrategyV3(
            string namespace_,
            PublicGetProfileUpdateStrategyV3Field? field
        )
        {
            PathParams["namespace"] = namespace_;

            if (field is not null) QueryParams["field"] = field.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/public/namespaces/{namespace}/profileUpdateStrategies";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelGetProfileUpdateStrategyConfigResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelGetProfileUpdateStrategyConfigResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelGetProfileUpdateStrategyConfigResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelGetProfileUpdateStrategyConfigResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicGetProfileUpdateStrategyV3Field : StringEnum<PublicGetProfileUpdateStrategyV3Field>
    {
        public static readonly PublicGetProfileUpdateStrategyV3Field Country
            = new PublicGetProfileUpdateStrategyV3Field("country");

        public static readonly PublicGetProfileUpdateStrategyV3Field DisplayName
            = new PublicGetProfileUpdateStrategyV3Field("display_name");

        public static readonly PublicGetProfileUpdateStrategyV3Field Dob
            = new PublicGetProfileUpdateStrategyV3Field("dob");

        public static readonly PublicGetProfileUpdateStrategyV3Field Username
            = new PublicGetProfileUpdateStrategyV3Field("username");


        public static implicit operator PublicGetProfileUpdateStrategyV3Field(string value)
        {
            return NewValue(value);
        }

        public PublicGetProfileUpdateStrategyV3Field(string enumValue)
            : base(enumValue)
        {

        }
    }

}