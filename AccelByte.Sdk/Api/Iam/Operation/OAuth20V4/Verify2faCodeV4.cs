// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// Verify2FACodeV4
    ///
    /// Verify 2FA code
    /// This endpoint is used for verifying 2FA code.
    /// ## 2FA remember device
    /// To remember device for 2FA, should provide cookie: device_token or header: Device-Token
    /// </summary>
    public class Verify2faCodeV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static Verify2faCodeV4Builder Builder { get => new Verify2faCodeV4Builder(); }

        public class Verify2faCodeV4Builder
            : OperationBuilder<Verify2faCodeV4Builder>
        {





            internal Verify2faCodeV4Builder() { }






            public Verify2faCodeV4 Build(
                string code,
                string factor,
                string mfaToken,
                bool rememberDevice
            )
            {
                Verify2faCodeV4 op = new Verify2faCodeV4(this,
                    code,
                    factor,
                    mfaToken,
                    rememberDevice
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private Verify2faCodeV4(Verify2faCodeV4Builder builder,
            string code,
            string factor,
            string mfaToken,
            bool rememberDevice
        )
        {


            if (code is not null) FormParams["code"] = code;
            if (factor is not null) FormParams["factor"] = factor;
            if (mfaToken is not null) FormParams["mfaToken"] = mfaToken;
            FormParams["rememberDevice"] = Convert.ToString(rememberDevice)!;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public Verify2faCodeV4(
            string code,
            string factor,
            string mfaToken,
            bool rememberDevice
        )
        {


            if (code is not null) FormParams["code"] = code;
            if (factor is not null) FormParams["factor"] = factor;
            if (mfaToken is not null) FormParams["mfaToken"] = mfaToken;
            FormParams["rememberDevice"] = Convert.ToString(rememberDevice)!;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/oauth/mfa/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.OauthmodelTokenResponseV3? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.OauthmodelTokenResponseV3>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}