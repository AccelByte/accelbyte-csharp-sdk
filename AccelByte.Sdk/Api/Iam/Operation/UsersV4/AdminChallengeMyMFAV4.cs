// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminChallengeMyMFAV4
    ///
    /// This endpoint will verify user's' MFA code and generate a MFA token.
    /// </summary>
    public class AdminChallengeMyMFAV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminChallengeMyMFAV4Builder Builder { get => new AdminChallengeMyMFAV4Builder(); }

        public class AdminChallengeMyMFAV4Builder
            : OperationBuilder<AdminChallengeMyMFAV4Builder>
        {



            public string? Code { get; set; }

            public string? Factor { get; set; }



            internal AdminChallengeMyMFAV4Builder() { }




            public AdminChallengeMyMFAV4Builder SetCode(string _code)
            {
                Code = _code;
                return this;
            }

            public AdminChallengeMyMFAV4Builder SetFactor(string _factor)
            {
                Factor = _factor;
                return this;
            }



            public AdminChallengeMyMFAV4 Build(
            )
            {
                AdminChallengeMyMFAV4 op = new AdminChallengeMyMFAV4(this
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminChallengeMyMFAV4(AdminChallengeMyMFAV4Builder builder
        )
        {


            if (builder.Code is not null) FormParams["code"] = builder.Code;
            if (builder.Factor is not null) FormParams["factor"] = builder.Factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminChallengeMyMFAV4(
            string? code,
            string? factor
        )
        {


            if (code is not null) FormParams["code"] = code;
            if (factor is not null) FormParams["factor"] = factor;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/admin/users/me/mfa/challenge/verify";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelUserMFATokenResponseV4? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelUserMFATokenResponseV4>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}