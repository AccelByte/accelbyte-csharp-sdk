// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicUpgradeHeadlessWithCodeV4Forward
    ///
    /// This is a forward version for code verify.
    /// The endpoint upgrades a headless account by linking the headless account with the email address, username, and password.
    /// By upgrading the headless account into a full account, the user could use the email address, username, and password for using Justice IAM.
    /// 
    /// The endpoint is a shortcut for upgrading a headless account and verifying the email address in one call.
    /// In order to get a verification code for the endpoint, please check the [send verification code endpoint](#operations-Users-PublicSendCodeForwardV3).
    /// 
    /// This endpoint also have an ability to update user data (if the user data field is specified) right after the upgrade account process is done.
    /// </summary>
    public class PublicUpgradeHeadlessWithCodeV4Forward : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicUpgradeHeadlessWithCodeV4ForwardBuilder Builder { get => new PublicUpgradeHeadlessWithCodeV4ForwardBuilder(); }

        public class PublicUpgradeHeadlessWithCodeV4ForwardBuilder
            : OperationBuilder<PublicUpgradeHeadlessWithCodeV4ForwardBuilder>
        {





            internal PublicUpgradeHeadlessWithCodeV4ForwardBuilder() { }






            public PublicUpgradeHeadlessWithCodeV4Forward Build(
                AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body
            )
            {
                PublicUpgradeHeadlessWithCodeV4Forward op = new PublicUpgradeHeadlessWithCodeV4Forward(this,
                    body
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicUpgradeHeadlessWithCodeV4Forward(PublicUpgradeHeadlessWithCodeV4ForwardBuilder builder,
            AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicUpgradeHeadlessWithCodeV4Forward(
            Model.AccountUpgradeHeadlessAccountWithVerificationCodeRequestV4 body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/public/users/me/headless/code/verify/forward";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public string ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            var payloadString = Helper.ConvertInputStreamToString(payload);

            if (code == (HttpStatusCode)302)
            {
                return payloadString;
            }

            throw new HttpResponseException(code, payloadString);
        }
    }

}