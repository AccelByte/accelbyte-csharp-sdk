// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// PublicGetBackupCodesV4
    ///
    /// This endpoint is used to get existing 8-digits backup codes.
    /// Each codes is a one-time code and will be deleted once used.
    /// The codes will be sent through linked email.
    /// </summary>
    public class PublicGetBackupCodesV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetBackupCodesV4Builder Builder { get => new PublicGetBackupCodesV4Builder(); }

        public class PublicGetBackupCodesV4Builder
            : OperationBuilder<PublicGetBackupCodesV4Builder>
        {

            public string? LanguageTag { get; set; }





            internal PublicGetBackupCodesV4Builder() { }


            public PublicGetBackupCodesV4Builder SetLanguageTag(string _languageTag)
            {
                LanguageTag = _languageTag;
                return this;
            }





            public PublicGetBackupCodesV4 Build(
                string namespace_
            )
            {
                PublicGetBackupCodesV4 op = new PublicGetBackupCodesV4(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicGetBackupCodesV4(PublicGetBackupCodesV4Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.LanguageTag is not null) QueryParams["languageTag"] = builder.LanguageTag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetBackupCodesV4(
            string namespace_,
            string? languageTag
        )
        {
            PathParams["namespace"] = namespace_;

            if (languageTag is not null) QueryParams["languageTag"] = languageTag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/public/namespaces/{namespace}/users/me/mfa/backupCodes";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}