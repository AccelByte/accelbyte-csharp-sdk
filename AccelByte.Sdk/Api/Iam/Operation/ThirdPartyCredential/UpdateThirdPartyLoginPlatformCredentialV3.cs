// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// UpdateThirdPartyLoginPlatformCredentialV3
    ///
    /// 
    /// 
    /// This is the API to Add 3rd Platform Credential.
    /// 
    /// 
    /// 
    /// 
    /// It needs ADMIN:NAMESPACE:{namespace}:PLATFORM:{platformId}:CLIENT [CREATE] resource.
    /// 
    /// 
    /// 
    /// 
    /// The secret for apple is base64 encoded private key.
    /// 
    /// 
    /// 
    /// 
    /// No secret for awscognito , we only need to configure AWS Cognito Region and User Pool
    /// 
    /// 
    /// 
    /// 
    /// The secret for discord is client secret of the twitch client id.
    /// 
    /// 
    /// 
    /// 
    /// The secret for epicgames is client secret of the epicgames client id.
    /// 
    /// 
    /// 
    /// 
    /// The secret for facebook is client secret of the facebook client id.
    /// 
    /// 
    /// 
    /// 
    /// The secret for google is client secret of the google OAuth client.
    /// 
    /// 
    /// 
    /// 
    /// No secret for nintendo , we only need to configure app id of the game
    /// 
    /// 
    /// 
    /// 
    /// No secret for netflix , we configure the Root, Public, Private Key certificate pem file and target environment; value: [sandbox, production]
    /// 
    /// 
    /// 
    /// 
    /// The secret for oculus is app secret of the oculus app.
    /// 
    /// 
    /// 
    /// 
    /// The secret for ps4, ps5, and ps4web is client secret of the psn web server.
    /// 
    /// 
    /// 
    /// 
    /// The secret for steam is the Steam Web API Key.
    /// 
    /// 
    /// 
    /// 
    /// The secret for steamopenid is the Steam Web API Key.
    /// 
    /// 
    /// 
    /// 
    /// The secret for twitch is client secret of the twitch client.
    /// 
    /// 
    /// 
    /// 
    /// The secret for live is the Relying Party Private Key in base64 encode PEM format.
    /// 
    /// 
    /// 
    /// 
    /// The secret for xblwebapi is client secret of the xbl client.
    /// 
    /// 
    /// 
    /// 
    /// If generic oauth flow is set to true:
    /// 
    /// 
    /// 
    /// 
    ///             * Current supported value for TokenAuthenticationType is code, idToken and bearerToken
    /// 
    /// 
    ///             * `TokenClaimsMapping` is used to extract user info from idToken claims or user info endpoint response accessed using bearerToken.
    /// Its a JSON format with key should be `name`, `email` and `avatarUrl`
    /// since IAM will look up for these key when extracting user info. default claims keys : userIdentity/sub, name, email and avatarUrl/picture
    /// </summary>
    public class UpdateThirdPartyLoginPlatformCredentialV3 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateThirdPartyLoginPlatformCredentialV3Builder Builder { get => new UpdateThirdPartyLoginPlatformCredentialV3Builder(); }

        public class UpdateThirdPartyLoginPlatformCredentialV3Builder
            : OperationBuilder<UpdateThirdPartyLoginPlatformCredentialV3Builder>
        {





            internal UpdateThirdPartyLoginPlatformCredentialV3Builder() { }






            public UpdateThirdPartyLoginPlatformCredentialV3 Build(
                ModelThirdPartyLoginPlatformCredentialRequest body,
                string namespace_,
                string platformId
            )
            {
                UpdateThirdPartyLoginPlatformCredentialV3 op = new UpdateThirdPartyLoginPlatformCredentialV3(this,
                    body,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private UpdateThirdPartyLoginPlatformCredentialV3(UpdateThirdPartyLoginPlatformCredentialV3Builder builder,
            ModelThirdPartyLoginPlatformCredentialRequest body,
            string namespace_,
            string platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateThirdPartyLoginPlatformCredentialV3(
            string namespace_,
            string platformId,
            Model.ModelThirdPartyLoginPlatformCredentialRequest body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v3/admin/namespaces/{namespace}/platforms/{platformId}/clients";

        public override HttpMethod Method => HttpMethod.Patch;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelThirdPartyLoginPlatformCredentialResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ModelThirdPartyLoginPlatformCredentialResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelThirdPartyLoginPlatformCredentialResponse>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}