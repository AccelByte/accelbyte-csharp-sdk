// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Iam.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Iam.Operation
{
    /// <summary>
    /// AdminUpdateDeviceBanV4
    ///
    /// 
    /// 
    /// This is the endpoint for an admin to update a device ban config.
    /// 
    /// 
    /// 
    /// Required permission
    /// 
    ///                                                                                                 'ADMIN:NAMESPACE:{namespace}:DEVICE [UPDATE]'
    /// </summary>
    public class AdminUpdateDeviceBanV4 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateDeviceBanV4Builder Builder { get => new AdminUpdateDeviceBanV4Builder(); }

        public class AdminUpdateDeviceBanV4Builder
            : OperationBuilder<AdminUpdateDeviceBanV4Builder>
        {





            internal AdminUpdateDeviceBanV4Builder() { }






            public AdminUpdateDeviceBanV4 Build(
                ModelDeviceBanUpdateRequestV4 body,
                string banId,
                string namespace_
            )
            {
                AdminUpdateDeviceBanV4 op = new AdminUpdateDeviceBanV4(this,
                    body,                    
                    banId,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private AdminUpdateDeviceBanV4(AdminUpdateDeviceBanV4Builder builder,
            ModelDeviceBanUpdateRequestV4 body,
            string banId,
            string namespace_
        )
        {
            PathParams["banId"] = banId;
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminUpdateDeviceBanV4(
            string banId,            
            string namespace_,            
            Model.ModelDeviceBanUpdateRequestV4 body            
        )
        {
            PathParams["banId"] = banId;
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/iam/v4/admin/namespaces/{namespace}/devices/bans/{banId}";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}