// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Social.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Social.Operation
{
    /// <summary>
    /// getStats
    ///
    /// List stats by pagination.
    /// Other detail info:
    ///         *  Required permission : resource="ADMIN:NAMESPACE:{namespace}:STAT", action=2 (READ)
    ///         *  Returns : stats
    /// </summary>
    public class GetStats : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetStatsBuilder Builder { get => new GetStatsBuilder(); }

        public class GetStatsBuilder
            : OperationBuilder<GetStatsBuilder>
        {

            public string? CycleIds { get; set; }

            public bool? IsGlobal { get; set; }

            public bool? IsPublic { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }





            internal GetStatsBuilder() { }


            public GetStatsBuilder SetCycleIds(string _cycleIds)
            {
                CycleIds = _cycleIds;
                return this;
            }

            public GetStatsBuilder SetIsGlobal(bool _isGlobal)
            {
                IsGlobal = _isGlobal;
                return this;
            }

            public GetStatsBuilder SetIsPublic(bool _isPublic)
            {
                IsPublic = _isPublic;
                return this;
            }

            public GetStatsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetStatsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }





            public GetStats Build(
                string namespace_
            )
            {
                GetStats op = new GetStats(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetStats(GetStatsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.CycleIds is not null) QueryParams["cycleIds"] = builder.CycleIds;
            if (builder.IsGlobal != null) QueryParams["isGlobal"] = Convert.ToString(builder.IsGlobal)!;
            if (builder.IsPublic != null) QueryParams["isPublic"] = Convert.ToString(builder.IsPublic)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetStats(
            string namespace_,
            string? cycleIds,
            bool? isGlobal,
            bool? isPublic,
            int? limit,
            int? offset
        )
        {
            PathParams["namespace"] = namespace_;

            if (cycleIds is not null) QueryParams["cycleIds"] = cycleIds;
            if (isGlobal != null) QueryParams["isGlobal"] = Convert.ToString(isGlobal)!;
            if (isPublic != null) QueryParams["isPublic"] = Convert.ToString(isPublic)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/social/v1/admin/namespaces/{namespace}/stats";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.StatPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.StatPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.StatPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.StatPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}