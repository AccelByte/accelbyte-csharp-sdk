// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Social.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Social.Operation
{
    /// <summary>
    /// getUserStatCycleItems
    ///
    /// List user's statCycleItems by statCycle.
    /// Other detail info:
    ///         *  Returns : stat cycle items
    /// </summary>
    public class GetUserStatCycleItems : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetUserStatCycleItemsBuilder Builder { get => new GetUserStatCycleItemsBuilder(); }

        public class GetUserStatCycleItemsBuilder
            : OperationBuilder<GetUserStatCycleItemsBuilder>
        {

            public bool? IsPublic { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public string? SortBy { get; set; }

            public string? StatCodes { get; set; }





            internal GetUserStatCycleItemsBuilder() { }


            public GetUserStatCycleItemsBuilder SetIsPublic(bool _isPublic)
            {
                IsPublic = _isPublic;
                return this;
            }

            public GetUserStatCycleItemsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetUserStatCycleItemsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetUserStatCycleItemsBuilder SetSortBy(string _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public GetUserStatCycleItemsBuilder SetStatCodes(string _statCodes)
            {
                StatCodes = _statCodes;
                return this;
            }





            public GetUserStatCycleItems Build(
                string cycleId,
                string namespace_,
                string userId
            )
            {
                GetUserStatCycleItems op = new GetUserStatCycleItems(this,
                    cycleId,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetUserStatCycleItems(GetUserStatCycleItemsBuilder builder,
            string cycleId,
            string namespace_,
            string userId
        )
        {
            PathParams["cycleId"] = cycleId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.IsPublic != null) QueryParams["isPublic"] = Convert.ToString(builder.IsPublic)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy;
            if (builder.StatCodes is not null) QueryParams["statCodes"] = builder.StatCodes;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetUserStatCycleItems(
            string cycleId,
            string namespace_,
            string userId,
            bool? isPublic,
            int? limit,
            int? offset,
            string? sortBy,
            string? statCodes
        )
        {
            PathParams["cycleId"] = cycleId;
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (isPublic != null) QueryParams["isPublic"] = Convert.ToString(isPublic)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy;
            if (statCodes is not null) QueryParams["statCodes"] = statCodes;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/social/v1/admin/namespaces/{namespace}/users/{userId}/statCycles/{cycleId}/statCycleitems";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.UserStatCycleItemPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.UserStatCycleItemPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.UserStatCycleItemPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.UserStatCycleItemPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}