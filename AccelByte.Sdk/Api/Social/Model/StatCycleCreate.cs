// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Social.Model
{
    public class StatCycleCreate : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("cycleType")]
        [JsonStringEnum]
        public StatCycleCreateCycleType? CycleType { get; set; }

        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        [JsonPropertyName("end")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? End { get; set; }

        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("resetDate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetDate { get; set; }

        [JsonPropertyName("resetDay")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetDay { get; set; }

        [JsonPropertyName("resetMonth")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetMonth { get; set; }

        [JsonPropertyName("resetTime")]
        public string? ResetTime { get; set; }

        [JsonPropertyName("seasonPeriod")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? SeasonPeriod { get; set; }

        [JsonPropertyName("start")]
        public DateTime? Start { get; set; }

    }



    public class StatCycleCreateCycleType : StringEnum<StatCycleCreateCycleType>
    {
        public static readonly StatCycleCreateCycleType ANNUALLY
            = new StatCycleCreateCycleType("ANNUALLY");

        public static readonly StatCycleCreateCycleType DAILY
            = new StatCycleCreateCycleType("DAILY");

        public static readonly StatCycleCreateCycleType MONTHLY
            = new StatCycleCreateCycleType("MONTHLY");

        public static readonly StatCycleCreateCycleType SEASONAL
            = new StatCycleCreateCycleType("SEASONAL");

        public static readonly StatCycleCreateCycleType WEEKLY
            = new StatCycleCreateCycleType("WEEKLY");


        public static implicit operator StatCycleCreateCycleType(string value)
        {
            return NewValue(value);
        }

        public StatCycleCreateCycleType(string enumValue)
            : base(enumValue)
        {

        }
    }
}