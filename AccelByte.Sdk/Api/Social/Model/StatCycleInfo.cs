// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Social.Model
{
    public class StatCycleInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("currentVersion")]
        public int? CurrentVersion { get; set; }

        [JsonPropertyName("cycleType")]
        [JsonStringEnum]
        public StatCycleInfoCycleType? CycleType { get; set; }

        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        [JsonPropertyName("end")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? End { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("nextReset")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? NextReset { get; set; }

        [JsonPropertyName("resetDate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetDate { get; set; }

        [JsonPropertyName("resetDay")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetDay { get; set; }

        [JsonPropertyName("resetMonth")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ResetMonth { get; set; }

        [JsonPropertyName("resetTime")]
        public string? ResetTime { get; set; }

        [JsonPropertyName("seasonPeriod")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? SeasonPeriod { get; set; }

        [JsonPropertyName("start")]
        public DateTime? Start { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public StatCycleInfoStatus? Status { get; set; }

        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; set; }

    }



    public class StatCycleInfoCycleType : StringEnum<StatCycleInfoCycleType>
    {
        public static readonly StatCycleInfoCycleType ANNUALLY
            = new StatCycleInfoCycleType("ANNUALLY");

        public static readonly StatCycleInfoCycleType DAILY
            = new StatCycleInfoCycleType("DAILY");

        public static readonly StatCycleInfoCycleType MONTHLY
            = new StatCycleInfoCycleType("MONTHLY");

        public static readonly StatCycleInfoCycleType SEASONAL
            = new StatCycleInfoCycleType("SEASONAL");

        public static readonly StatCycleInfoCycleType WEEKLY
            = new StatCycleInfoCycleType("WEEKLY");


        public static implicit operator StatCycleInfoCycleType(string value)
        {
            return NewValue(value);
        }

        public StatCycleInfoCycleType(string enumValue)
            : base(enumValue)
        {

        }
    }    

    public class StatCycleInfoStatus : StringEnum<StatCycleInfoStatus>
    {
        public static readonly StatCycleInfoStatus ACTIVE
            = new StatCycleInfoStatus("ACTIVE");

        public static readonly StatCycleInfoStatus INIT
            = new StatCycleInfoStatus("INIT");

        public static readonly StatCycleInfoStatus STOPPED
            = new StatCycleInfoStatus("STOPPED");


        public static implicit operator StatCycleInfoStatus(string value)
        {
            return NewValue(value);
        }

        public StatCycleInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }    
}