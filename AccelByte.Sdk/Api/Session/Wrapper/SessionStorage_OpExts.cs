// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;
using AccelByte.Sdk.Api.Session.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class SessionSessionStorage_OpExts
    {
        public static Dictionary<string, object>? Execute(
            this AdminReadPartySessionStorage.AdminReadPartySessionStorageBuilder builder,
            string namespace_,
            string partyId
        )
        {
            AdminReadPartySessionStorage op = builder.Build(
                namespace_,
                partyId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadPartySessionStorage(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this AdminReadPartySessionStorage.AdminReadPartySessionStorageBuilder builder,
            string namespace_,
            string partyId
        )
        {
            AdminReadPartySessionStorage op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadPartySessionStorageAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this AdminReadSessionStorage.AdminReadSessionStorageBuilder builder,
            string namespace_,
            string sessionId
        )
        {
            AdminReadSessionStorage op = builder.Build(
                namespace_,
                sessionId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadSessionStorage(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this AdminReadSessionStorage.AdminReadSessionStorageBuilder builder,
            string namespace_,
            string sessionId
        )
        {
            AdminReadSessionStorage op = builder.Build(
                namespace_,
                sessionId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadSessionStorageAsync(op);
        }
        public static void Execute(
            this AdminDeleteUserSessionStorage.AdminDeleteUserSessionStorageBuilder builder,
            string namespace_,
            string sessionId
        )
        {
            AdminDeleteUserSessionStorage op = builder.Build(
                namespace_,
                sessionId
            );

            ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminDeleteUserSessionStorage(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeleteUserSessionStorage.AdminDeleteUserSessionStorageBuilder builder,
            string namespace_,
            string sessionId
        )
        {
            AdminDeleteUserSessionStorage op = builder.Build(
                namespace_,
                sessionId
            );

            await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminDeleteUserSessionStorageAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this AdminReadUserSessionStorage.AdminReadUserSessionStorageBuilder builder,
            string namespace_,
            string sessionId,
            string userId
        )
        {
            AdminReadUserSessionStorage op = builder.Build(
                namespace_,
                sessionId,
                userId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadUserSessionStorage(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this AdminReadUserSessionStorage.AdminReadUserSessionStorageBuilder builder,
            string namespace_,
            string sessionId,
            string userId
        )
        {
            AdminReadUserSessionStorage op = builder.Build(
                namespace_,
                sessionId,
                userId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).AdminReadUserSessionStorageAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this PublicReadPartySessionStorage.PublicReadPartySessionStorageBuilder builder,
            string namespace_,
            string partyId
        )
        {
            PublicReadPartySessionStorage op = builder.Build(
                namespace_,
                partyId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicReadPartySessionStorage(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this PublicReadPartySessionStorage.PublicReadPartySessionStorageBuilder builder,
            string namespace_,
            string partyId
        )
        {
            PublicReadPartySessionStorage op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicReadPartySessionStorageAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this PublicUpdateInsertPartySessionStorageReserved.PublicUpdateInsertPartySessionStorageReservedBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string partyId,
            string userId
        )
        {
            PublicUpdateInsertPartySessionStorageReserved op = builder.Build(
                body,
                namespace_,
                partyId,
                userId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertPartySessionStorageReserved(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this PublicUpdateInsertPartySessionStorageReserved.PublicUpdateInsertPartySessionStorageReservedBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string partyId,
            string userId
        )
        {
            PublicUpdateInsertPartySessionStorageReserved op = builder.Build(
                body,
                namespace_,
                partyId,
                userId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertPartySessionStorageReservedAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this PublicUpdateInsertSessionStorageLeader.PublicUpdateInsertSessionStorageLeaderBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string sessionId
        )
        {
            PublicUpdateInsertSessionStorageLeader op = builder.Build(
                body,
                namespace_,
                sessionId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertSessionStorageLeader(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this PublicUpdateInsertSessionStorageLeader.PublicUpdateInsertSessionStorageLeaderBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string sessionId
        )
        {
            PublicUpdateInsertSessionStorageLeader op = builder.Build(
                body,
                namespace_,
                sessionId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertSessionStorageLeaderAsync(op);
        }
        public static Dictionary<string, object>? Execute(
            this PublicUpdateInsertSessionStorage.PublicUpdateInsertSessionStorageBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string sessionId,
            string userId
        )
        {
            PublicUpdateInsertSessionStorage op = builder.Build(
                body,
                namespace_,
                sessionId,
                userId
            );

            return ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertSessionStorage(op);
        }
        public static async Task<Dictionary<string, object>?> ExecuteAsync(
            this PublicUpdateInsertSessionStorage.PublicUpdateInsertSessionStorageBuilder builder,
            Dictionary<string, object> body,
            string namespace_,
            string sessionId,
            string userId
        )
        {
            PublicUpdateInsertSessionStorage op = builder.Build(
                body,
                namespace_,
                sessionId,
                userId
            );

            return await ((Session.Wrapper.SessionStorage)builder.WrapperObject!).PublicUpdateInsertSessionStorageAsync(op);
        }
    }
}