// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;
using AccelByte.Sdk.Api.Session.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class SessionRecentPlayer_OpExts
    {
        public static Session.Model.ModelsRecentPlayerQueryResponse? Execute(
            this AdminGetRecentPlayer.AdminGetRecentPlayerBuilder builder,
            string namespace_
        )
        {
            AdminGetRecentPlayer op = builder.Build(
                namespace_
            );

            return ((Session.Wrapper.RecentPlayer)builder.WrapperObject!).AdminGetRecentPlayer(op);
        }
        public static async Task<Session.Model.ModelsRecentPlayerQueryResponse?> ExecuteAsync(
            this AdminGetRecentPlayer.AdminGetRecentPlayerBuilder builder,
            string namespace_
        )
        {
            AdminGetRecentPlayer op = builder.Build(
                namespace_
            );

            return await ((Session.Wrapper.RecentPlayer)builder.WrapperObject!).AdminGetRecentPlayerAsync(op);
        }
        public static Session.Model.ModelsRecentPlayerQueryResponse? Execute(
            this PublicGetRecentPlayer.PublicGetRecentPlayerBuilder builder,
            string namespace_
        )
        {
            PublicGetRecentPlayer op = builder.Build(
                namespace_
            );

            return ((Session.Wrapper.RecentPlayer)builder.WrapperObject!).PublicGetRecentPlayer(op);
        }
        public static async Task<Session.Model.ModelsRecentPlayerQueryResponse?> ExecuteAsync(
            this PublicGetRecentPlayer.PublicGetRecentPlayerBuilder builder,
            string namespace_
        )
        {
            PublicGetRecentPlayer op = builder.Build(
                namespace_
            );

            return await ((Session.Wrapper.RecentPlayer)builder.WrapperObject!).PublicGetRecentPlayerAsync(op);
        }
    }
}