// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Api.Session.Operation;
using AccelByte.Sdk.Api.Session.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class SessionOperations_OpExts
    {
        public static void Execute(
            this GetHealthcheckInfo.GetHealthcheckInfoBuilder builder
        )
        {
            GetHealthcheckInfo op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).GetHealthcheckInfo(op);
        }
        public static async Task ExecuteAsync(
            this GetHealthcheckInfo.GetHealthcheckInfoBuilder builder
        )
        {
            GetHealthcheckInfo op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).GetHealthcheckInfoAsync(op);
        }
        public static void Execute(
            this PprofHandler.PprofHandlerBuilder builder
        )
        {
            PprofHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).PprofHandler(op);
        }
        public static async Task ExecuteAsync(
            this PprofHandler.PprofHandlerBuilder builder
        )
        {
            PprofHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).PprofHandlerAsync(op);
        }
        public static void Execute(
            this AllocsHandler.AllocsHandlerBuilder builder
        )
        {
            AllocsHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).AllocsHandler(op);
        }
        public static async Task ExecuteAsync(
            this AllocsHandler.AllocsHandlerBuilder builder
        )
        {
            AllocsHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).AllocsHandlerAsync(op);
        }
        public static void Execute(
            this BlockHandler.BlockHandlerBuilder builder
        )
        {
            BlockHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).BlockHandler(op);
        }
        public static async Task ExecuteAsync(
            this BlockHandler.BlockHandlerBuilder builder
        )
        {
            BlockHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).BlockHandlerAsync(op);
        }
        public static void Execute(
            this CmdlineHandler.CmdlineHandlerBuilder builder
        )
        {
            CmdlineHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).CmdlineHandler(op);
        }
        public static async Task ExecuteAsync(
            this CmdlineHandler.CmdlineHandlerBuilder builder
        )
        {
            CmdlineHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).CmdlineHandlerAsync(op);
        }
        public static void Execute(
            this GoroutineHandler.GoroutineHandlerBuilder builder
        )
        {
            GoroutineHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).GoroutineHandler(op);
        }
        public static async Task ExecuteAsync(
            this GoroutineHandler.GoroutineHandlerBuilder builder
        )
        {
            GoroutineHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).GoroutineHandlerAsync(op);
        }
        public static void Execute(
            this HeapHandler.HeapHandlerBuilder builder
        )
        {
            HeapHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).HeapHandler(op);
        }
        public static async Task ExecuteAsync(
            this HeapHandler.HeapHandlerBuilder builder
        )
        {
            HeapHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).HeapHandlerAsync(op);
        }
        public static void Execute(
            this MutexHandler.MutexHandlerBuilder builder
        )
        {
            MutexHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).MutexHandler(op);
        }
        public static async Task ExecuteAsync(
            this MutexHandler.MutexHandlerBuilder builder
        )
        {
            MutexHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).MutexHandlerAsync(op);
        }
        public static void Execute(
            this Profile.ProfileBuilder builder
        )
        {
            Profile op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).Profile(op);
        }
        public static async Task ExecuteAsync(
            this Profile.ProfileBuilder builder
        )
        {
            Profile op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).ProfileAsync(op);
        }
        public static void Execute(
            this SymbolHandler.SymbolHandlerBuilder builder
        )
        {
            SymbolHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).SymbolHandler(op);
        }
        public static async Task ExecuteAsync(
            this SymbolHandler.SymbolHandlerBuilder builder
        )
        {
            SymbolHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).SymbolHandlerAsync(op);
        }
        public static void Execute(
            this ThreadcreateHandler.ThreadcreateHandlerBuilder builder
        )
        {
            ThreadcreateHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).ThreadcreateHandler(op);
        }
        public static async Task ExecuteAsync(
            this ThreadcreateHandler.ThreadcreateHandlerBuilder builder
        )
        {
            ThreadcreateHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).ThreadcreateHandlerAsync(op);
        }
        public static void Execute(
            this TraceHandler.TraceHandlerBuilder builder
        )
        {
            TraceHandler op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).TraceHandler(op);
        }
        public static async Task ExecuteAsync(
            this TraceHandler.TraceHandlerBuilder builder
        )
        {
            TraceHandler op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).TraceHandlerAsync(op);
        }
        public static void Execute(
            this GetHealthcheckInfoV1.GetHealthcheckInfoV1Builder builder
        )
        {
            GetHealthcheckInfoV1 op = builder.Build(
            );

            ((Session.Wrapper.Operations)builder.WrapperObject!).GetHealthcheckInfoV1(op);
        }
        public static async Task ExecuteAsync(
            this GetHealthcheckInfoV1.GetHealthcheckInfoV1Builder builder
        )
        {
            GetHealthcheckInfoV1 op = builder.Build(
            );

            await ((Session.Wrapper.Operations)builder.WrapperObject!).GetHealthcheckInfoV1Async(op);
        }
    }
}