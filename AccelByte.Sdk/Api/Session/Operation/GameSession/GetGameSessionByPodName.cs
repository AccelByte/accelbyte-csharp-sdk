// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// getGameSessionByPodName
    ///
    /// Get game session detail by podname.
    /// Session service has several DSInformation status to track DS request to DSMC:
    /// 
    /// 
    /// 
    /// 
    ///   * NEED_TO_REQUEST : number of active players hasn't reached session's minPlayers therefore DS has not yet requested.
    /// 
    /// 
    ///   * REQUESTED : DS is being requested to DSMC.
    /// 
    /// 
    ///   * AVAILABLE : DS is ready to use. The DSMC status for this DS is either READY/BUSY.
    /// 
    /// 
    ///   * FAILED_TO_REQUEST : DSMC fails to create the DS.
    /// </summary>
    public class GetGameSessionByPodName : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetGameSessionByPodNameBuilder Builder = new GetGameSessionByPodNameBuilder();

        public class GetGameSessionByPodNameBuilder
            : OperationBuilder<GetGameSessionByPodNameBuilder>
        {





            internal GetGameSessionByPodNameBuilder() { }






            public GetGameSessionByPodName Build(
                string namespace_,
                string podName
            )
            {
                GetGameSessionByPodName op = new GetGameSessionByPodName(this,
                    namespace_,                    
                    podName                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private GetGameSessionByPodName(GetGameSessionByPodNameBuilder builder,
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetGameSessionByPodName(
            string namespace_,            
            string podName            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;
            
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/public/namespaces/{namespace}/gamesessions/servers/{podName}";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.ApimodelsGameSessionResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsGameSessionResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsGameSessionResponse>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}