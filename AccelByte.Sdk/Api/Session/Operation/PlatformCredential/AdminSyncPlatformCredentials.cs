// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Session.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Session.Operation
{
    /// <summary>
    /// adminSyncPlatformCredentials
    ///
    /// Sync Platform Credentials.
    /// 
    /// Supported Platforms:
    /// 1. XBOX
    /// With this method, we will be performing sync to Platform Service to retrieve the existing PFX certificate which uploaded through IAP.
    /// If the API returns Not Found, alternatively what you can do is either:
    /// a. upload PFX file to IAP. You can access it from Admin Portal {BASE_URL}/admin/namespaces/{NAMESPACE}/in-app-purchase/xbox, or directly through API /platform/admin/namespaces/{NAMESPACE}/iap/config/xbl/cert.
    /// b. upload PFX file through Session API /session/v1/admin/namespaces/{namespace}/certificates/pfx/platforms/xbl
    /// We recommend approach #a, since you need to only upload the file once, and the service will do the sync.
    /// If you set the PFX through Session service, when this API is invoked, we will sync and replace the existing PFX file with the one from Platform (IAP).
    /// </summary>
    public class AdminSyncPlatformCredentials : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminSyncPlatformCredentialsBuilder Builder { get => new AdminSyncPlatformCredentialsBuilder(); }

        public class AdminSyncPlatformCredentialsBuilder
            : OperationBuilder<AdminSyncPlatformCredentialsBuilder>
        {





            internal AdminSyncPlatformCredentialsBuilder() { }






            public AdminSyncPlatformCredentials Build(
                string namespace_,
                AdminSyncPlatformCredentialsPlatformId platformId
            )
            {
                AdminSyncPlatformCredentials op = new AdminSyncPlatformCredentials(this,
                    namespace_,
                    platformId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminSyncPlatformCredentials(AdminSyncPlatformCredentialsBuilder builder,
            string namespace_,
            AdminSyncPlatformCredentialsPlatformId platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId.Value;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminSyncPlatformCredentials(
            string namespace_,
            AdminSyncPlatformCredentialsPlatformId platformId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platformId"] = platformId.Value;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/session/v1/admin/namespaces/{namespace}/platform-credentials/{platformId}/sync";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelsXblCertificateResponseBody? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelsXblCertificateResponseBody>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelsXblCertificateResponseBody>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsXblCertificateResponseBody>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class AdminSyncPlatformCredentialsPlatformId : StringEnum<AdminSyncPlatformCredentialsPlatformId>
    {
        public static readonly AdminSyncPlatformCredentialsPlatformId XBOX
            = new AdminSyncPlatformCredentialsPlatformId("XBOX");


        public static implicit operator AdminSyncPlatformCredentialsPlatformId(string value)
        {
            return NewValue(value);
        }

        public AdminSyncPlatformCredentialsPlatformId(string enumValue)
            : base(enumValue)
        {

        }
    }

}