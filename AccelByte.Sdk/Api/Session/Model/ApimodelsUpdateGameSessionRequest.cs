// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Session.Model
{
    public class ApimodelsUpdateGameSessionRequest : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("attributes")]
        public Dictionary<string, object>? Attributes { get; set; }

        [JsonPropertyName("backfillTicketID")]
        public string? BackfillTicketID { get; set; }

        [JsonPropertyName("clientVersion")]
        public string? ClientVersion { get; set; }

        [JsonPropertyName("deployment")]
        public string? Deployment { get; set; }

        [JsonPropertyName("fallbackClaimKeys")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? FallbackClaimKeys { get; set; }

        [JsonPropertyName("inactiveTimeout")]
        public int? InactiveTimeout { get; set; }

        [JsonPropertyName("inviteTimeout")]
        public int? InviteTimeout { get; set; }

        [JsonPropertyName("joinability")]
        [JsonStringEnum]
        public ApimodelsUpdateGameSessionRequestJoinability? Joinability { get; set; }

        [JsonPropertyName("matchPool")]
        public string? MatchPool { get; set; }

        [JsonPropertyName("maxPlayers")]
        public int? MaxPlayers { get; set; }

        [JsonPropertyName("minPlayers")]
        public int? MinPlayers { get; set; }

        [JsonPropertyName("preferredClaimKeys")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? PreferredClaimKeys { get; set; }

        [JsonPropertyName("requestedRegions")]
        public List<string>? RequestedRegions { get; set; }

        [JsonPropertyName("teams")]
        public List<ModelsTeam>? Teams { get; set; }

        [JsonPropertyName("ticketIDs")]
        public List<string>? TicketIDs { get; set; }

        [JsonPropertyName("tieTeamsSessionLifetime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? TieTeamsSessionLifetime { get; set; }

        [JsonPropertyName("type")]
        [JsonStringEnum]
        public ApimodelsUpdateGameSessionRequestType? Type { get; set; }

        [JsonPropertyName("version")]
        public int? Version { get; set; }

    }

    public class ApimodelsUpdateGameSessionRequest<T1> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("attributes")]
        public T1? Attributes { get; set; }

        [JsonPropertyName("backfillTicketID")]
        public string? BackfillTicketID { get; set; }

        [JsonPropertyName("clientVersion")]
        public string? ClientVersion { get; set; }

        [JsonPropertyName("deployment")]
        public string? Deployment { get; set; }

        [JsonPropertyName("fallbackClaimKeys")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? FallbackClaimKeys { get; set; }

        [JsonPropertyName("inactiveTimeout")]
        public int? InactiveTimeout { get; set; }

        [JsonPropertyName("inviteTimeout")]
        public int? InviteTimeout { get; set; }

        [JsonPropertyName("joinability")]
        [JsonStringEnum]
        public ApimodelsUpdateGameSessionRequestJoinability? Joinability { get; set; }

        [JsonPropertyName("matchPool")]
        public string? MatchPool { get; set; }

        [JsonPropertyName("maxPlayers")]
        public int? MaxPlayers { get; set; }

        [JsonPropertyName("minPlayers")]
        public int? MinPlayers { get; set; }

        [JsonPropertyName("preferredClaimKeys")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? PreferredClaimKeys { get; set; }

        [JsonPropertyName("requestedRegions")]
        public List<string>? RequestedRegions { get; set; }

        [JsonPropertyName("teams")]
        public List<ModelsTeam>? Teams { get; set; }

        [JsonPropertyName("ticketIDs")]
        public List<string>? TicketIDs { get; set; }

        [JsonPropertyName("tieTeamsSessionLifetime")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? TieTeamsSessionLifetime { get; set; }

        [JsonPropertyName("type")]
        [JsonStringEnum]
        public ApimodelsUpdateGameSessionRequestType? Type { get; set; }

        [JsonPropertyName("version")]
        public int? Version { get; set; }

    }


    public class ApimodelsUpdateGameSessionRequestJoinability : StringEnum<ApimodelsUpdateGameSessionRequestJoinability>
    {
        public static readonly ApimodelsUpdateGameSessionRequestJoinability CLOSED
            = new ApimodelsUpdateGameSessionRequestJoinability("CLOSED");

        public static readonly ApimodelsUpdateGameSessionRequestJoinability FRIENDSOFFRIENDS
            = new ApimodelsUpdateGameSessionRequestJoinability("FRIENDS_OF_FRIENDS");

        public static readonly ApimodelsUpdateGameSessionRequestJoinability FRIENDSOFLEADER
            = new ApimodelsUpdateGameSessionRequestJoinability("FRIENDS_OF_LEADER");

        public static readonly ApimodelsUpdateGameSessionRequestJoinability FRIENDSOFMEMBERS
            = new ApimodelsUpdateGameSessionRequestJoinability("FRIENDS_OF_MEMBERS");

        public static readonly ApimodelsUpdateGameSessionRequestJoinability INVITEONLY
            = new ApimodelsUpdateGameSessionRequestJoinability("INVITE_ONLY");

        public static readonly ApimodelsUpdateGameSessionRequestJoinability OPEN
            = new ApimodelsUpdateGameSessionRequestJoinability("OPEN");


        public static implicit operator ApimodelsUpdateGameSessionRequestJoinability(string value)
        {
            return NewValue(value);
        }

        public ApimodelsUpdateGameSessionRequestJoinability(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ApimodelsUpdateGameSessionRequestType : StringEnum<ApimodelsUpdateGameSessionRequestType>
    {
        public static readonly ApimodelsUpdateGameSessionRequestType DS
            = new ApimodelsUpdateGameSessionRequestType("DS");

        public static readonly ApimodelsUpdateGameSessionRequestType NONE
            = new ApimodelsUpdateGameSessionRequestType("NONE");

        public static readonly ApimodelsUpdateGameSessionRequestType P2P
            = new ApimodelsUpdateGameSessionRequestType("P2P");


        public static implicit operator ApimodelsUpdateGameSessionRequestType(string value)
        {
            return NewValue(value);
        }

        public ApimodelsUpdateGameSessionRequestType(string enumValue)
            : base(enumValue)
        {

        }
    }
}