// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Csm.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Csm.Operation
{
    /// <summary>
    /// GetNoSQLClusterV2
    ///
    /// Required permission : `ADMIN:NAMESPACE:{namespace}:EXTEND:NOSQL:CLUSTERS [READ]`
    /// 
    /// Get NoSQL cluster information returns the NoSQL cluster related information by given studio/publisher namespace.
    /// 
    /// `status` field - indicates the NoSQL cluster status:
    /// - `available` : The cluster is accessible.
    /// - `updating` : The cluster is being modified and is not yet accessible (e.g., updating min/max DCU).
    /// - `deleting` : The cluster is in the process of being deleted and is not accessible.
    /// - `failed` : The cluster failed to provision or is in an error state and not accessible.
    /// - `stopped` : The cluster is stopped and not accessible.
    /// - `maintenance` : The cluster is undergoing maintenance operations and is not accessible.
    /// - `unknown` : The cluster status is not recognized
    /// - `creating` : The cluster or instance is being created and is not yet accessible.
    /// - `stopping` : The cluster is in the process of stopping and will soon become inaccessible.
    /// - `starting` : The cluster is transitioning from stopped to running, or is rebooting.
    /// </summary>
    public class GetNoSQLClusterV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetNoSQLClusterV2Builder Builder { get => new GetNoSQLClusterV2Builder(); }

        public class GetNoSQLClusterV2Builder
            : OperationBuilder<GetNoSQLClusterV2Builder>
        {





            internal GetNoSQLClusterV2Builder() { }






            public GetNoSQLClusterV2 Build(
                string namespace_
            )
            {
                GetNoSQLClusterV2 op = new GetNoSQLClusterV2(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetNoSQLClusterV2(GetNoSQLClusterV2Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetNoSQLClusterV2(
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/csm/v2/admin/namespaces/{namespace}/nosql/clusters";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelNoSQLResourceResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelNoSQLResourceResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelNoSQLResourceResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelNoSQLResourceResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}