// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Csm.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Csm.Operation
{
    /// <summary>
    /// SaveVariableV2
    ///
    /// Required permission : `ADMIN:NAMESPACE:{namespace}:EXTEND:VARIABLE [CREATE]`
    /// 
    /// Save an environment variable.
    /// Request body:
    /// - configName : environment variable name - Required.
    /// - source : source of the configuration value (plaintext or ssm) - Required.
    /// - value : configuration value - Required.
    /// - description : description of the configuration - Optional.
    /// - applyMask : mask the value in the Helm manifest for sensitive information (true or false) - Optional.
    /// </summary>
    public class SaveVariableV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SaveVariableV2Builder Builder { get => new SaveVariableV2Builder(); }

        public class SaveVariableV2Builder
            : OperationBuilder<SaveVariableV2Builder>
        {





            internal SaveVariableV2Builder() { }






            public SaveVariableV2 Build(
                ApimodelSaveConfigurationV2Request body,
                string app,
                string namespace_
            )
            {
                SaveVariableV2 op = new SaveVariableV2(this,
                    body,
                    app,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private SaveVariableV2(SaveVariableV2Builder builder,
            ApimodelSaveConfigurationV2Request body,
            string app,
            string namespace_
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SaveVariableV2(
            string app,
            string namespace_,
            Model.ApimodelSaveConfigurationV2Request body
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/csm/v2/admin/namespaces/{namespace}/apps/{app}/variables";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelSaveConfigurationV2Response? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelSaveConfigurationV2Response>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelSaveConfigurationV2Response>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelSaveConfigurationV2Response>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}