// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Csm.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Csm.Operation
{
    /// <summary>
    /// CreateAppV2
    ///
    /// Required permission : `ADMIN:NAMESPACE:{namespace}:EXTEND:APP [CREATE]`
    /// 
    /// Create new extend app with name provided by {app} path parameter and specified scenario type
    /// 
    /// Available scenario:
    /// - scenario 1: `function-override`
    /// - scenario 2: `service-extension`
    /// - scenario 3: `event-handler`
    /// 
    /// 
    /// Available app status:
    /// - `app-creating`
    /// - `app-creation-failed`
    /// - `app-creation-timeout`
    /// - `app-undeployed`
    /// - `deployment-in-progress`
    /// - `deployment-failed`
    /// - `deployment-timeout`
    /// - `deployment-running`
    /// - `deployment-down`
    /// - `app-stopping`
    /// - `app-stop-failed`
    /// - `app-stop-timeout`
    /// - `app-stopped`
    /// - `app-removing`
    /// - `app-removed`
    /// - `app-remove-timeout`
    /// </summary>
    public class CreateAppV2 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateAppV2Builder Builder { get => new CreateAppV2Builder(); }

        public class CreateAppV2Builder
            : OperationBuilder<CreateAppV2Builder>
        {





            internal CreateAppV2Builder() { }






            public CreateAppV2 Build(
                ApimodelCreateAppV2Request body,
                string app,
                string namespace_
            )
            {
                CreateAppV2 op = new CreateAppV2(this,
                    body,
                    app,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private CreateAppV2(CreateAppV2Builder builder,
            ApimodelCreateAppV2Request body,
            string app,
            string namespace_
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateAppV2(
            string app,
            string namespace_,
            Model.ApimodelCreateAppV2Request body
        )
        {
            PathParams["app"] = app;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/csm/v2/admin/namespaces/{namespace}/apps/{app}";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelAppItem? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelAppItem>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelAppItem>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelAppItem>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}