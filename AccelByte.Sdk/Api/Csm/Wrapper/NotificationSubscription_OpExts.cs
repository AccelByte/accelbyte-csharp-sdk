// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Csm.Model;
using AccelByte.Sdk.Api.Csm.Operation;
using AccelByte.Sdk.Api.Csm.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class CsmNotificationSubscription_OpExts
    {
        public static Csm.Model.ApimodelGetNotificationSubscriberListResponse? Execute(
            this GetNotificationSubscriberListV2.GetNotificationSubscriberListV2Builder builder,
            string app,
            string namespace_
        )
        {
            GetNotificationSubscriberListV2 op = builder.Build(
                app,
                namespace_
            );

            return ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).GetNotificationSubscriberListV2(op);
        }
        public static async Task<Csm.Model.ApimodelGetNotificationSubscriberListResponse?> ExecuteAsync(
            this GetNotificationSubscriberListV2.GetNotificationSubscriberListV2Builder builder,
            string app,
            string namespace_
        )
        {
            GetNotificationSubscriberListV2 op = builder.Build(
                app,
                namespace_
            );

            return await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).GetNotificationSubscriberListV2Async(op);
        }
        public static Csm.Model.ApimodelGetNotificationSubscriberListResponse? Execute(
            this BulkSaveSubscriptionAppNotificationV2.BulkSaveSubscriptionAppNotificationV2Builder builder,
            ApimodelBulkSubscribeRequest body,
            string app,
            string namespace_
        )
        {
            BulkSaveSubscriptionAppNotificationV2 op = builder.Build(
                body,
                app,
                namespace_
            );

            return ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).BulkSaveSubscriptionAppNotificationV2(op);
        }
        public static async Task<Csm.Model.ApimodelGetNotificationSubscriberListResponse?> ExecuteAsync(
            this BulkSaveSubscriptionAppNotificationV2.BulkSaveSubscriptionAppNotificationV2Builder builder,
            ApimodelBulkSubscribeRequest body,
            string app,
            string namespace_
        )
        {
            BulkSaveSubscriptionAppNotificationV2 op = builder.Build(
                body,
                app,
                namespace_
            );

            return await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).BulkSaveSubscriptionAppNotificationV2Async(op);
        }
        public static Csm.Model.ApimodelSubscribeNotificationResponse? Execute(
            this SubscribeAppNotificationV2.SubscribeAppNotificationV2Builder builder,
            ApimodelSubscribeNotificationRequest body,
            string app,
            string namespace_
        )
        {
            SubscribeAppNotificationV2 op = builder.Build(
                body,
                app,
                namespace_
            );

            return ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).SubscribeAppNotificationV2(op);
        }
        public static async Task<Csm.Model.ApimodelSubscribeNotificationResponse?> ExecuteAsync(
            this SubscribeAppNotificationV2.SubscribeAppNotificationV2Builder builder,
            ApimodelSubscribeNotificationRequest body,
            string app,
            string namespace_
        )
        {
            SubscribeAppNotificationV2 op = builder.Build(
                body,
                app,
                namespace_
            );

            return await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).SubscribeAppNotificationV2Async(op);
        }
        public static Csm.Model.ApimodelGetNotificationSubscriberStatusResponse? Execute(
            this GetSubscriptionV2Handler.GetSubscriptionV2HandlerBuilder builder,
            string app,
            string namespace_
        )
        {
            GetSubscriptionV2Handler op = builder.Build(
                app,
                namespace_
            );

            return ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).GetSubscriptionV2Handler(op);
        }
        public static async Task<Csm.Model.ApimodelGetNotificationSubscriberStatusResponse?> ExecuteAsync(
            this GetSubscriptionV2Handler.GetSubscriptionV2HandlerBuilder builder,
            string app,
            string namespace_
        )
        {
            GetSubscriptionV2Handler op = builder.Build(
                app,
                namespace_
            );

            return await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).GetSubscriptionV2HandlerAsync(op);
        }
        public static void Execute(
            this SubscribeV2Handler.SubscribeV2HandlerBuilder builder,
            ApimodelSelfSubscribeNotificationRequest body,
            string app,
            string namespace_
        )
        {
            SubscribeV2Handler op = builder.Build(
                body,
                app,
                namespace_
            );

            ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).SubscribeV2Handler(op);
        }
        public static async Task ExecuteAsync(
            this SubscribeV2Handler.SubscribeV2HandlerBuilder builder,
            ApimodelSelfSubscribeNotificationRequest body,
            string app,
            string namespace_
        )
        {
            SubscribeV2Handler op = builder.Build(
                body,
                app,
                namespace_
            );

            await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).SubscribeV2HandlerAsync(op);
        }
        public static void Execute(
            this UnsubscribeV2Handler.UnsubscribeV2HandlerBuilder builder,
            string app,
            string namespace_
        )
        {
            UnsubscribeV2Handler op = builder.Build(
                app,
                namespace_
            );

            ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).UnsubscribeV2Handler(op);
        }
        public static async Task ExecuteAsync(
            this UnsubscribeV2Handler.UnsubscribeV2HandlerBuilder builder,
            string app,
            string namespace_
        )
        {
            UnsubscribeV2Handler op = builder.Build(
                app,
                namespace_
            );

            await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).UnsubscribeV2HandlerAsync(op);
        }
        public static void Execute(
            this DeleteSubscriptionAppNotificationByUserIDV2.DeleteSubscriptionAppNotificationByUserIDV2Builder builder,
            string app,
            string namespace_,
            string userId
        )
        {
            DeleteSubscriptionAppNotificationByUserIDV2 op = builder.Build(
                app,
                namespace_,
                userId
            );

            ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).DeleteSubscriptionAppNotificationByUserIDV2(op);
        }
        public static async Task ExecuteAsync(
            this DeleteSubscriptionAppNotificationByUserIDV2.DeleteSubscriptionAppNotificationByUserIDV2Builder builder,
            string app,
            string namespace_,
            string userId
        )
        {
            DeleteSubscriptionAppNotificationByUserIDV2 op = builder.Build(
                app,
                namespace_,
                userId
            );

            await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).DeleteSubscriptionAppNotificationByUserIDV2Async(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static void Execute(
            this DeleteSubscriptionAppNotificationV2.DeleteSubscriptionAppNotificationV2Builder builder,
            string app,
            string namespace_,
            string subscriptionId
        )
        {
            DeleteSubscriptionAppNotificationV2 op = builder.Build(
                app,
                namespace_,
                subscriptionId
            );

            ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).DeleteSubscriptionAppNotificationV2(op);
        }
        public static async Task ExecuteAsync(
            this DeleteSubscriptionAppNotificationV2.DeleteSubscriptionAppNotificationV2Builder builder,
            string app,
            string namespace_,
            string subscriptionId
        )
        {
            DeleteSubscriptionAppNotificationV2 op = builder.Build(
                app,
                namespace_,
                subscriptionId
            );

            await ((Csm.Wrapper.NotificationSubscription)builder.WrapperObject!).DeleteSubscriptionAppNotificationV2Async(op);
        }
    }
}