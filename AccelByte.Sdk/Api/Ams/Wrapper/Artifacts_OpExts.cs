// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;
using AccelByte.Sdk.Api.Ams.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class AmsArtifacts_OpExts
    {
        public static Ams.Model.ApiArtifactListResponse? Execute(
            this ArtifactGet.ArtifactGetBuilder builder,
            string namespace_
        )
        {
            ArtifactGet op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactGet(op);
        }
        public static async Task<Ams.Model.ApiArtifactListResponse?> ExecuteAsync(
            this ArtifactGet.ArtifactGetBuilder builder,
            string namespace_
        )
        {
            ArtifactGet op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactGetAsync(op);
        }
        public static void Execute(
            this ArtifactBulkDelete.ArtifactBulkDeleteBuilder builder,
            string namespace_
        )
        {
            ArtifactBulkDelete op = builder.Build(
                namespace_
            );

            ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactBulkDelete(op);
        }
        public static async Task ExecuteAsync(
            this ArtifactBulkDelete.ArtifactBulkDeleteBuilder builder,
            string namespace_
        )
        {
            ArtifactBulkDelete op = builder.Build(
                namespace_
            );

            await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactBulkDeleteAsync(op);
        }
        public static Ams.Model.ApiArtifactUsageResponse? Execute(
            this ArtifactUsageGet.ArtifactUsageGetBuilder builder,
            string namespace_
        )
        {
            ArtifactUsageGet op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactUsageGet(op);
        }
        public static async Task<Ams.Model.ApiArtifactUsageResponse?> ExecuteAsync(
            this ArtifactUsageGet.ArtifactUsageGetBuilder builder,
            string namespace_
        )
        {
            ArtifactUsageGet op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactUsageGetAsync(op);
        }
        public static void Execute(
            this ArtifactDelete.ArtifactDeleteBuilder builder,
            string artifactID,
            string namespace_
        )
        {
            ArtifactDelete op = builder.Build(
                artifactID,
                namespace_
            );

            ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactDelete(op);
        }
        public static async Task ExecuteAsync(
            this ArtifactDelete.ArtifactDeleteBuilder builder,
            string artifactID,
            string namespace_
        )
        {
            ArtifactDelete op = builder.Build(
                artifactID,
                namespace_
            );

            await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactDeleteAsync(op);
        }
        public static Ams.Model.ApiArtifactURLResponse? Execute(
            this ArtifactGetURL.ArtifactGetURLBuilder builder,
            string artifactID,
            string namespace_
        )
        {
            ArtifactGetURL op = builder.Build(
                artifactID,
                namespace_
            );

            return ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactGetURL(op);
        }
        public static async Task<Ams.Model.ApiArtifactURLResponse?> ExecuteAsync(
            this ArtifactGetURL.ArtifactGetURLBuilder builder,
            string artifactID,
            string namespace_
        )
        {
            ArtifactGetURL op = builder.Build(
                artifactID,
                namespace_
            );

            return await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).ArtifactGetURLAsync(op);
        }
        public static Ams.Model.ApiFleetArtifactsSampleRules? Execute(
            this FleetArtifactSamplingRulesGet.FleetArtifactSamplingRulesGetBuilder builder,
            string fleetID,
            string namespace_
        )
        {
            FleetArtifactSamplingRulesGet op = builder.Build(
                fleetID,
                namespace_
            );

            return ((Ams.Wrapper.Artifacts)builder.WrapperObject!).FleetArtifactSamplingRulesGet(op);
        }
        public static async Task<Ams.Model.ApiFleetArtifactsSampleRules?> ExecuteAsync(
            this FleetArtifactSamplingRulesGet.FleetArtifactSamplingRulesGetBuilder builder,
            string fleetID,
            string namespace_
        )
        {
            FleetArtifactSamplingRulesGet op = builder.Build(
                fleetID,
                namespace_
            );

            return await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).FleetArtifactSamplingRulesGetAsync(op);
        }
        public static Ams.Model.ApiFleetArtifactsSampleRules? Execute(
            this FleetArtifactSamplingRulesSet.FleetArtifactSamplingRulesSetBuilder builder,
            ApiFleetArtifactsSampleRules body,
            string fleetID,
            string namespace_
        )
        {
            FleetArtifactSamplingRulesSet op = builder.Build(
                body,
                fleetID,
                namespace_
            );

            return ((Ams.Wrapper.Artifacts)builder.WrapperObject!).FleetArtifactSamplingRulesSet(op);
        }
        public static async Task<Ams.Model.ApiFleetArtifactsSampleRules?> ExecuteAsync(
            this FleetArtifactSamplingRulesSet.FleetArtifactSamplingRulesSetBuilder builder,
            ApiFleetArtifactsSampleRules body,
            string fleetID,
            string namespace_
        )
        {
            FleetArtifactSamplingRulesSet op = builder.Build(
                body,
                fleetID,
                namespace_
            );

            return await ((Ams.Wrapper.Artifacts)builder.WrapperObject!).FleetArtifactSamplingRulesSetAsync(op);
        }
    }
}