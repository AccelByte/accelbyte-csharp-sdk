// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;
using AccelByte.Sdk.Api.Ams.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class AmsAMSInfo_OpExts
    {
        public static Ams.Model.ApiAMSRegionsResponse? Execute(
            this InfoRegions.InfoRegionsBuilder builder,
            string namespace_
        )
        {
            InfoRegions op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).InfoRegions(op);
        }
        public static async Task<Ams.Model.ApiAMSRegionsResponse?> ExecuteAsync(
            this InfoRegions.InfoRegionsBuilder builder,
            string namespace_
        )
        {
            InfoRegions op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).InfoRegionsAsync(op);
        }
        public static Ams.Model.ApiInstanceTypesResponse? Execute(
            this InfoSupportedInstances.InfoSupportedInstancesBuilder builder,
            string namespace_
        )
        {
            InfoSupportedInstances op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).InfoSupportedInstances(op);
        }
        public static async Task<Ams.Model.ApiInstanceTypesResponse?> ExecuteAsync(
            this InfoSupportedInstances.InfoSupportedInstancesBuilder builder,
            string namespace_
        )
        {
            InfoSupportedInstances op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).InfoSupportedInstancesAsync(op);
        }
        public static void Execute(
            this UploadURLGet.UploadURLGetBuilder builder
        )
        {
            UploadURLGet op = builder.Build(
            );

            ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).UploadURLGet(op);
        }
        public static async Task ExecuteAsync(
            this UploadURLGet.UploadURLGetBuilder builder
        )
        {
            UploadURLGet op = builder.Build(
            );

            await ((Ams.Wrapper.AMSInfo)builder.WrapperObject!).UploadURLGetAsync(op);
        }
    }
}