// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;
using AccelByte.Sdk.Api.Ams.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class AmsAMSQoS_OpExts
    {
        public static Ams.Model.ApiQoSEndpointResponse? Execute(
            this QoSRegionsGet.QoSRegionsGetBuilder builder,
            string namespace_
        )
        {
            QoSRegionsGet op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.AMSQoS)builder.WrapperObject!).QoSRegionsGet(op);
        }
        public static async Task<Ams.Model.ApiQoSEndpointResponse?> ExecuteAsync(
            this QoSRegionsGet.QoSRegionsGetBuilder builder,
            string namespace_
        )
        {
            QoSRegionsGet op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.AMSQoS)builder.WrapperObject!).QoSRegionsGetAsync(op);
        }
        public static void Execute(
            this QoSRegionsUpdate.QoSRegionsUpdateBuilder builder,
            ApiUpdateServerRequest body,
            string namespace_,
            string region
        )
        {
            QoSRegionsUpdate op = builder.Build(
                body,
                namespace_,
                region
            );

            ((Ams.Wrapper.AMSQoS)builder.WrapperObject!).QoSRegionsUpdate(op);
        }
        public static async Task ExecuteAsync(
            this QoSRegionsUpdate.QoSRegionsUpdateBuilder builder,
            ApiUpdateServerRequest body,
            string namespace_,
            string region
        )
        {
            QoSRegionsUpdate op = builder.Build(
                body,
                namespace_,
                region
            );

            await ((Ams.Wrapper.AMSQoS)builder.WrapperObject!).QoSRegionsUpdateAsync(op);
        }
    }
}