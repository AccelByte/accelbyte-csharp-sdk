// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Api.Ams.Operation;
using AccelByte.Sdk.Api.Ams.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class AmsImages_OpExts
    {
        public static Ams.Model.ApiImageList? Execute(
            this ImageList.ImageListBuilder builder,
            string namespace_
        )
        {
            ImageList op = builder.Build(
                namespace_
            );

            return ((Ams.Wrapper.Images)builder.WrapperObject!).ImageList(op);
        }
        public static async Task<Ams.Model.ApiImageList?> ExecuteAsync(
            this ImageList.ImageListBuilder builder,
            string namespace_
        )
        {
            ImageList op = builder.Build(
                namespace_
            );

            return await ((Ams.Wrapper.Images)builder.WrapperObject!).ImageListAsync(op);
        }
        public static Ams.Model.ApiImageDetails? Execute(
            this ImageGet.ImageGetBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageGet op = builder.Build(
                imageID,
                namespace_
            );

            return ((Ams.Wrapper.Images)builder.WrapperObject!).ImageGet(op);
        }
        public static async Task<Ams.Model.ApiImageDetails?> ExecuteAsync(
            this ImageGet.ImageGetBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageGet op = builder.Build(
                imageID,
                namespace_
            );

            return await ((Ams.Wrapper.Images)builder.WrapperObject!).ImageGetAsync(op);
        }
        public static void Execute(
            this ImageMarkForDeletion.ImageMarkForDeletionBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageMarkForDeletion op = builder.Build(
                imageID,
                namespace_
            );

            ((Ams.Wrapper.Images)builder.WrapperObject!).ImageMarkForDeletion(op);
        }
        public static async Task ExecuteAsync(
            this ImageMarkForDeletion.ImageMarkForDeletionBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageMarkForDeletion op = builder.Build(
                imageID,
                namespace_
            );

            await ((Ams.Wrapper.Images)builder.WrapperObject!).ImageMarkForDeletionAsync(op);
        }
        public static Ams.Model.ApiImageDetails? Execute(
            this ImagePatch.ImagePatchBuilder builder,
            ApiImageUpdate body,
            string imageID,
            string namespace_
        )
        {
            ImagePatch op = builder.Build(
                body,
                imageID,
                namespace_
            );

            return ((Ams.Wrapper.Images)builder.WrapperObject!).ImagePatch(op);
        }
        public static async Task<Ams.Model.ApiImageDetails?> ExecuteAsync(
            this ImagePatch.ImagePatchBuilder builder,
            ApiImageUpdate body,
            string imageID,
            string namespace_
        )
        {
            ImagePatch op = builder.Build(
                body,
                imageID,
                namespace_
            );

            return await ((Ams.Wrapper.Images)builder.WrapperObject!).ImagePatchAsync(op);
        }
        public static void Execute(
            this ImageUnmarkForDeletion.ImageUnmarkForDeletionBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageUnmarkForDeletion op = builder.Build(
                imageID,
                namespace_
            );

            ((Ams.Wrapper.Images)builder.WrapperObject!).ImageUnmarkForDeletion(op);
        }
        public static async Task ExecuteAsync(
            this ImageUnmarkForDeletion.ImageUnmarkForDeletionBuilder builder,
            string imageID,
            string namespace_
        )
        {
            ImageUnmarkForDeletion op = builder.Build(
                imageID,
                namespace_
            );

            await ((Ams.Wrapper.Images)builder.WrapperObject!).ImageUnmarkForDeletionAsync(op);
        }
    }
}