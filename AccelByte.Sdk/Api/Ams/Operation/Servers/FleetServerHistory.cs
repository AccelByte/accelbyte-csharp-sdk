// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// FleetServerHistory
    ///
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [READ]
    /// </summary>
    public class FleetServerHistory : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static FleetServerHistoryBuilder Builder { get => new FleetServerHistoryBuilder(); }

        public class FleetServerHistoryBuilder
            : OperationBuilder<FleetServerHistoryBuilder>
        {

            public long? Count { get; set; }

            public long? Offset { get; set; }

            public string? Reason { get; set; }

            public string? Region { get; set; }

            public string? ServerId { get; set; }

            public string? SortDirection { get; set; }

            public string? Status { get; set; }





            internal FleetServerHistoryBuilder() { }


            public FleetServerHistoryBuilder SetCount(long _count)
            {
                Count = _count;
                return this;
            }

            public FleetServerHistoryBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public FleetServerHistoryBuilder SetReason(string _reason)
            {
                Reason = _reason;
                return this;
            }

            public FleetServerHistoryBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public FleetServerHistoryBuilder SetServerId(string _serverId)
            {
                ServerId = _serverId;
                return this;
            }

            public FleetServerHistoryBuilder SetSortDirection(string _sortDirection)
            {
                SortDirection = _sortDirection;
                return this;
            }

            public FleetServerHistoryBuilder SetStatus(string _status)
            {
                Status = _status;
                return this;
            }





            public FleetServerHistory Build(
                string fleetID,
                string namespace_
            )
            {
                FleetServerHistory op = new FleetServerHistory(this,
                    fleetID,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private FleetServerHistory(FleetServerHistoryBuilder builder,
            string fleetID,
            string namespace_
        )
        {
            PathParams["fleetID"] = fleetID;
            PathParams["namespace"] = namespace_;
            
            if (builder.Count != null) QueryParams["count"] = Convert.ToString(builder.Count)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Reason is not null) QueryParams["reason"] = builder.Reason;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.ServerId is not null) QueryParams["serverId"] = builder.ServerId;
            if (builder.SortDirection is not null) QueryParams["sortDirection"] = builder.SortDirection;
            if (builder.Status is not null) QueryParams["status"] = builder.Status;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public FleetServerHistory(
            string fleetID,            
            string namespace_,            
            long? count,            
            long? offset,            
            string? reason,            
            string? region,            
            string? serverId,            
            string? sortDirection,            
            string? status            
        )
        {
            PathParams["fleetID"] = fleetID;
            PathParams["namespace"] = namespace_;
            
            if (count != null) QueryParams["count"] = Convert.ToString(count)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (reason is not null) QueryParams["reason"] = reason;
            if (region is not null) QueryParams["region"] = region;
            if (serverId is not null) QueryParams["serverId"] = serverId;
            if (sortDirection is not null) QueryParams["sortDirection"] = sortDirection;
            if (status is not null) QueryParams["status"] = status;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/fleets/{fleetID}/servers/history";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.ApiDSHistoryList? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiDSHistoryList>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiDSHistoryList>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiDSHistoryList>(payload, ResponseJsonOptions);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}