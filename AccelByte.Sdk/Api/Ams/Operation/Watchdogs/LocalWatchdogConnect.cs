// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// LocalWatchdogConnect
    ///
    /// This is to support local ds development scenarios
    /// 
    /// Required Permission: NAMESPACE:{namespace}:AMS:LOCALDS [CREATE]
    /// </summary>
    public class LocalWatchdogConnect : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static LocalWatchdogConnectBuilder Builder { get => new LocalWatchdogConnectBuilder(); }

        public class LocalWatchdogConnectBuilder
            : OperationBuilder<LocalWatchdogConnectBuilder>
        {





            internal LocalWatchdogConnectBuilder() { }






            public LocalWatchdogConnect Build(
                string namespace_,
                string watchdogID
            )
            {
                LocalWatchdogConnect op = new LocalWatchdogConnect(this,
                    namespace_,
                    watchdogID
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private LocalWatchdogConnect(LocalWatchdogConnectBuilder builder,
            string namespace_,
            string watchdogID
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["watchdogID"] = watchdogID;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public LocalWatchdogConnect(
            string namespace_,
            string watchdogID
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["watchdogID"] = watchdogID;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/namespaces/{namespace}/local/{watchdogID}/connect";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)200)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}