// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// DevelopmentServerConfigurationCreate
    ///
    /// Configuration name can be up to 128 characters and must conform to ^[.a-zA-Z0-9_-]+$
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [CREATE]
    /// </summary>
    public class DevelopmentServerConfigurationCreate : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DevelopmentServerConfigurationCreateBuilder Builder { get => new DevelopmentServerConfigurationCreateBuilder(); }

        public class DevelopmentServerConfigurationCreateBuilder
            : OperationBuilder<DevelopmentServerConfigurationCreateBuilder>
        {





            internal DevelopmentServerConfigurationCreateBuilder() { }






            public DevelopmentServerConfigurationCreate Build(
                ApiDevelopmentServerConfigurationCreateRequest body,
                string namespace_
            )
            {
                DevelopmentServerConfigurationCreate op = new DevelopmentServerConfigurationCreate(this,
                    body,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private DevelopmentServerConfigurationCreate(DevelopmentServerConfigurationCreateBuilder builder,
            ApiDevelopmentServerConfigurationCreateRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DevelopmentServerConfigurationCreate(
            string namespace_,            
            Model.ApiDevelopmentServerConfigurationCreateRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/development/server-configurations";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.ApiDevelopmentServerConfigurationCreateResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationCreateResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationCreateResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiDevelopmentServerConfigurationCreateResponse>(payload, ResponseJsonOptions);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}