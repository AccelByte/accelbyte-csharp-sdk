// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// ImagePatch
    ///
    /// This allows editing of the image name, toggling `IsProtected`, or adding & removal of tags
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:ACCOUNT [UPDATE]
    /// </summary>
    public class ImagePatch : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImagePatchBuilder Builder { get => new ImagePatchBuilder(); }

        public class ImagePatchBuilder
            : OperationBuilder<ImagePatchBuilder>
        {





            internal ImagePatchBuilder() { }






            public ImagePatch Build(
                ApiImageUpdate body,
                string imageID,
                string namespace_
            )
            {
                ImagePatch op = new ImagePatch(this,
                    body,
                    imageID,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private ImagePatch(ImagePatchBuilder builder,
            ApiImageUpdate body,
            string imageID,
            string namespace_
        )
        {
            PathParams["imageID"] = imageID;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImagePatch(
            string imageID,
            string namespace_,
            Model.ApiImageUpdate body
        )
        {
            PathParams["imageID"] = imageID;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/images/{imageID}";

        public override HttpMethod Method => HttpMethod.Patch;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApiImageDetails? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiImageDetails>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiImageDetails>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiImageDetails>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}