// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// ImageList
    ///
    /// Returns images which exist (uploaded, uploading, or building) in the linked account. This route fails if no account is linked
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:AMS:IMAGE [READ]
    /// </summary>
    public class ImageList : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImageListBuilder Builder { get => new ImageListBuilder(); }

        public class ImageListBuilder
            : OperationBuilder<ImageListBuilder>
        {

            public long? Count { get; set; }

            public string? InUse { get; set; }

            public bool? IsProtected { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public string? SortBy { get; set; }

            public string? SortDirection { get; set; }

            public string? Status { get; set; }

            public string? Tag { get; set; }





            internal ImageListBuilder() { }


            public ImageListBuilder SetCount(long _count)
            {
                Count = _count;
                return this;
            }

            public ImageListBuilder SetInUse(string _inUse)
            {
                InUse = _inUse;
                return this;
            }

            public ImageListBuilder SetIsProtected(bool _isProtected)
            {
                IsProtected = _isProtected;
                return this;
            }

            public ImageListBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public ImageListBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public ImageListBuilder SetSortBy(string _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public ImageListBuilder SetSortDirection(string _sortDirection)
            {
                SortDirection = _sortDirection;
                return this;
            }

            public ImageListBuilder SetStatus(string _status)
            {
                Status = _status;
                return this;
            }

            public ImageListBuilder SetTag(string _tag)
            {
                Tag = _tag;
                return this;
            }





            public ImageList Build(
                string namespace_
            )
            {
                ImageList op = new ImageList(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private ImageList(ImageListBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Count != null) QueryParams["count"] = Convert.ToString(builder.Count)!;
            if (builder.InUse is not null) QueryParams["inUse"] = builder.InUse;
            if (builder.IsProtected != null) QueryParams["isProtected"] = Convert.ToString(builder.IsProtected)!;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy;
            if (builder.SortDirection is not null) QueryParams["sortDirection"] = builder.SortDirection;
            if (builder.Status is not null) QueryParams["status"] = builder.Status;
            if (builder.Tag is not null) QueryParams["tag"] = builder.Tag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImageList(
            string namespace_,
            long? count,
            string? inUse,
            bool? isProtected,
            string? name,
            long? offset,
            string? sortBy,
            string? sortDirection,
            string? status,
            string? tag
        )
        {
            PathParams["namespace"] = namespace_;

            if (count != null) QueryParams["count"] = Convert.ToString(count)!;
            if (inUse is not null) QueryParams["inUse"] = inUse;
            if (isProtected != null) QueryParams["isProtected"] = Convert.ToString(isProtected)!;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy;
            if (sortDirection is not null) QueryParams["sortDirection"] = sortDirection;
            if (status is not null) QueryParams["status"] = status;
            if (tag is not null) QueryParams["tag"] = tag;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/images";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApiImageList? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiImageList>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiImageList>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiImageList>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}