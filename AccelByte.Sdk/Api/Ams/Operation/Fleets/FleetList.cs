// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Ams.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Ams.Operation
{
    /// <summary>
    /// FleetList
    ///
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:ARMADA:FLEET [READ]
    /// </summary>
    public class FleetList : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static FleetListBuilder Builder { get => new FleetListBuilder(); }

        public class FleetListBuilder
            : OperationBuilder<FleetListBuilder>
        {

            public bool? Active { get; set; }

            public long? Count { get; set; }

            public FleetListDesc? Desc { get; set; }

            public string? Name { get; set; }

            public long? Offset { get; set; }

            public string? Region { get; set; }

            public FleetListSortBy? SortBy { get; set; }





            internal FleetListBuilder() { }


            public FleetListBuilder SetActive(bool _active)
            {
                Active = _active;
                return this;
            }

            public FleetListBuilder SetCount(long _count)
            {
                Count = _count;
                return this;
            }

            public FleetListBuilder SetDesc(FleetListDesc _desc)
            {
                Desc = _desc;
                return this;
            }

            public FleetListBuilder SetName(string _name)
            {
                Name = _name;
                return this;
            }

            public FleetListBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public FleetListBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public FleetListBuilder SetSortBy(FleetListSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }





            public FleetList Build(
                string namespace_
            )
            {
                FleetList op = new FleetList(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private FleetList(FleetListBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Active != null) QueryParams["active"] = Convert.ToString(builder.Active)!;
            if (builder.Count != null) QueryParams["count"] = Convert.ToString(builder.Count)!;
            if (builder.Desc is not null) QueryParams["desc"] = builder.Desc.Value;
            if (builder.Name is not null) QueryParams["name"] = builder.Name;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public FleetList(
            string namespace_,
            bool? active,
            long? count,
            FleetListDesc? desc,
            string? name,
            long? offset,
            string? region,
            FleetListSortBy? sortBy
        )
        {
            PathParams["namespace"] = namespace_;

            if (active != null) QueryParams["active"] = Convert.ToString(active)!;
            if (count != null) QueryParams["count"] = Convert.ToString(count)!;
            if (desc is not null) QueryParams["desc"] = desc.Value;
            if (name is not null) QueryParams["name"] = name;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (region is not null) QueryParams["region"] = region;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/ams/v1/admin/namespaces/{namespace}/fleets";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApiFleetListResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiFleetListResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiFleetListResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiFleetListResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class FleetListDesc : StringEnum<FleetListDesc>
    {
        public static readonly FleetListDesc Asc
            = new FleetListDesc("asc");

        public static readonly FleetListDesc Desc
            = new FleetListDesc("desc");


        public static implicit operator FleetListDesc(string value)
        {
            return NewValue(value);
        }

        public FleetListDesc(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class FleetListSortBy : StringEnum<FleetListSortBy>
    {
        public static readonly FleetListSortBy Active
            = new FleetListSortBy("active");

        public static readonly FleetListSortBy Name
            = new FleetListSortBy("name");


        public static implicit operator FleetListSortBy(string value)
        {
            return NewValue(value);
        }

        public FleetListSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}