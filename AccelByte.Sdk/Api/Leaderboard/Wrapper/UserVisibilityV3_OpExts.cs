// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Leaderboard.Model;
using AccelByte.Sdk.Api.Leaderboard.Operation;
using AccelByte.Sdk.Api.Leaderboard.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LeaderboardUserVisibilityV3_OpExts
    {
        public static Leaderboard.Model.ModelsGetHiddenUserResponse? Execute(
            this GetHiddenUsersV3.GetHiddenUsersV3Builder builder,
            string leaderboardCode,
            string namespace_
        )
        {
            GetHiddenUsersV3 op = builder.Build(
                leaderboardCode,
                namespace_
            );

            return ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).GetHiddenUsersV3(op);
        }
        public static async Task<Leaderboard.Model.ModelsGetHiddenUserResponse?> ExecuteAsync(
            this GetHiddenUsersV3.GetHiddenUsersV3Builder builder,
            string leaderboardCode,
            string namespace_
        )
        {
            GetHiddenUsersV3 op = builder.Build(
                leaderboardCode,
                namespace_
            );

            return await ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).GetHiddenUsersV3Async(op);
        }
        public static Leaderboard.Model.ModelsGetUserVisibilityResponse? Execute(
            this GetUserVisibilityStatusV3.GetUserVisibilityStatusV3Builder builder,
            string leaderboardCode,
            string namespace_,
            string userId
        )
        {
            GetUserVisibilityStatusV3 op = builder.Build(
                leaderboardCode,
                namespace_,
                userId
            );

            return ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).GetUserVisibilityStatusV3(op);
        }
        public static async Task<Leaderboard.Model.ModelsGetUserVisibilityResponse?> ExecuteAsync(
            this GetUserVisibilityStatusV3.GetUserVisibilityStatusV3Builder builder,
            string leaderboardCode,
            string namespace_,
            string userId
        )
        {
            GetUserVisibilityStatusV3 op = builder.Build(
                leaderboardCode,
                namespace_,
                userId
            );

            return await ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).GetUserVisibilityStatusV3Async(op);
        }
        public static Leaderboard.Model.ModelsGetUserVisibilityResponse? Execute(
            this SetUserLeaderboardVisibilityV3.SetUserLeaderboardVisibilityV3Builder builder,
            ModelsSetUserVisibilityRequest body,
            string leaderboardCode,
            string namespace_,
            string userId
        )
        {
            SetUserLeaderboardVisibilityV3 op = builder.Build(
                body,
                leaderboardCode,
                namespace_,
                userId
            );

            return ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).SetUserLeaderboardVisibilityV3(op);
        }
        public static async Task<Leaderboard.Model.ModelsGetUserVisibilityResponse?> ExecuteAsync(
            this SetUserLeaderboardVisibilityV3.SetUserLeaderboardVisibilityV3Builder builder,
            ModelsSetUserVisibilityRequest body,
            string leaderboardCode,
            string namespace_,
            string userId
        )
        {
            SetUserLeaderboardVisibilityV3 op = builder.Build(
                body,
                leaderboardCode,
                namespace_,
                userId
            );

            return await ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).SetUserLeaderboardVisibilityV3Async(op);
        }
        public static Leaderboard.Model.ModelsGetUserVisibilityResponse? Execute(
            this SetUserVisibilityV3.SetUserVisibilityV3Builder builder,
            ModelsSetUserVisibilityRequest body,
            string namespace_,
            string userId
        )
        {
            SetUserVisibilityV3 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).SetUserVisibilityV3(op);
        }
        public static async Task<Leaderboard.Model.ModelsGetUserVisibilityResponse?> ExecuteAsync(
            this SetUserVisibilityV3.SetUserVisibilityV3Builder builder,
            ModelsSetUserVisibilityRequest body,
            string namespace_,
            string userId
        )
        {
            SetUserVisibilityV3 op = builder.Build(
                body,
                namespace_,
                userId
            );

            return await ((Leaderboard.Wrapper.UserVisibilityV3)builder.WrapperObject!).SetUserVisibilityV3Async(op);
        }
    }
}