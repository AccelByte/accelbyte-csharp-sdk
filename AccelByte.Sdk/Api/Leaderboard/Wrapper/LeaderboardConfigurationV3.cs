// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Leaderboard.Model;
using AccelByte.Sdk.Api.Leaderboard.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Leaderboard.Wrapper
{
    public class LeaderboardConfigurationV3
    {
        private readonly AccelByteSDK _sdk;

        public LeaderboardConfigurationV3(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public GetLeaderboardConfigurationsAdminV3.GetLeaderboardConfigurationsAdminV3Builder GetLeaderboardConfigurationsAdminV3Op
        {
            get { return Operation.GetLeaderboardConfigurationsAdminV3.Builder.SetWrapperObject(this); }
        }
        public CreateLeaderboardConfigurationAdminV3.CreateLeaderboardConfigurationAdminV3Builder CreateLeaderboardConfigurationAdminV3Op
        {
            get { return Operation.CreateLeaderboardConfigurationAdminV3.Builder.SetWrapperObject(this); }
        }
        public DeleteBulkLeaderboardConfigurationAdminV3.DeleteBulkLeaderboardConfigurationAdminV3Builder DeleteBulkLeaderboardConfigurationAdminV3Op
        {
            get { return Operation.DeleteBulkLeaderboardConfigurationAdminV3.Builder.SetWrapperObject(this); }
        }
        public GetLeaderboardConfigurationAdminV3.GetLeaderboardConfigurationAdminV3Builder GetLeaderboardConfigurationAdminV3Op
        {
            get { return Operation.GetLeaderboardConfigurationAdminV3.Builder.SetWrapperObject(this); }
        }
        public UpdateLeaderboardConfigurationAdminV3.UpdateLeaderboardConfigurationAdminV3Builder UpdateLeaderboardConfigurationAdminV3Op
        {
            get { return Operation.UpdateLeaderboardConfigurationAdminV3.Builder.SetWrapperObject(this); }
        }
        public DeleteLeaderboardConfigurationAdminV3.DeleteLeaderboardConfigurationAdminV3Builder DeleteLeaderboardConfigurationAdminV3Op
        {
            get { return Operation.DeleteLeaderboardConfigurationAdminV3.Builder.SetWrapperObject(this); }
        }
        public HardDeleteLeaderboardAdminV3.HardDeleteLeaderboardAdminV3Builder HardDeleteLeaderboardAdminV3Op
        {
            get { return Operation.HardDeleteLeaderboardAdminV3.Builder.SetWrapperObject(this); }
        }
        public GetLeaderboardConfigurationsPublicV3.GetLeaderboardConfigurationsPublicV3Builder GetLeaderboardConfigurationsPublicV3Op
        {
            get { return Operation.GetLeaderboardConfigurationsPublicV3.Builder.SetWrapperObject(this); }
        }
        public GetLeaderboardConfigurationPublicV3.GetLeaderboardConfigurationPublicV3Builder GetLeaderboardConfigurationPublicV3Op
        {
            get { return Operation.GetLeaderboardConfigurationPublicV3.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.ModelsGetAllLeaderboardConfigsRespV3? GetLeaderboardConfigurationsAdminV3(GetLeaderboardConfigurationsAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetAllLeaderboardConfigsRespV3?> GetLeaderboardConfigurationsAdminV3Async(GetLeaderboardConfigurationsAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetLeaderboardConfigRespV3? CreateLeaderboardConfigurationAdminV3(CreateLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetLeaderboardConfigRespV3?> CreateLeaderboardConfigurationAdminV3Async(CreateLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsDeleteBulkLeaderboardsResp? DeleteBulkLeaderboardConfigurationAdminV3(DeleteBulkLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsDeleteBulkLeaderboardsResp?> DeleteBulkLeaderboardConfigurationAdminV3Async(DeleteBulkLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetLeaderboardConfigRespV3? GetLeaderboardConfigurationAdminV3(GetLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetLeaderboardConfigRespV3?> GetLeaderboardConfigurationAdminV3Async(GetLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetLeaderboardConfigRespV3? UpdateLeaderboardConfigurationAdminV3(UpdateLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetLeaderboardConfigRespV3?> UpdateLeaderboardConfigurationAdminV3Async(UpdateLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteLeaderboardConfigurationAdminV3(DeleteLeaderboardConfigurationAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteLeaderboardConfigurationAdminV3Async(DeleteLeaderboardConfigurationAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void HardDeleteLeaderboardAdminV3(HardDeleteLeaderboardAdminV3 input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task HardDeleteLeaderboardAdminV3Async(HardDeleteLeaderboardAdminV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetAllLeaderboardConfigsPublicRespV3? GetLeaderboardConfigurationsPublicV3(GetLeaderboardConfigurationsPublicV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetAllLeaderboardConfigsPublicRespV3?> GetLeaderboardConfigurationsPublicV3Async(GetLeaderboardConfigurationsPublicV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetLeaderboardConfigPublicRespV3? GetLeaderboardConfigurationPublicV3(GetLeaderboardConfigurationPublicV3 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetLeaderboardConfigPublicRespV3?> GetLeaderboardConfigurationPublicV3Async(GetLeaderboardConfigurationPublicV3 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}