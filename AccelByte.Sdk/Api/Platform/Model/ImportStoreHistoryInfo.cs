// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class ImportStoreHistoryInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("errors")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ImportStoreError>? Errors { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("importFileFormat")]
        [JsonStringEnum]
        public ImportStoreHistoryInfoImportFileFormat? ImportFileFormat { get; set; }

        [JsonPropertyName("initiatedBy")]
        public string? InitiatedBy { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("note")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Note { get; set; }

        [JsonPropertyName("storeId")]
        public string? StoreId { get; set; }

        [JsonPropertyName("success")]
        public bool? Success { get; set; }

    }



    public class ImportStoreHistoryInfoImportFileFormat : StringEnum<ImportStoreHistoryInfoImportFileFormat>
    {
        public static readonly ImportStoreHistoryInfoImportFileFormat CSV
            = new ImportStoreHistoryInfoImportFileFormat("CSV");

        public static readonly ImportStoreHistoryInfoImportFileFormat JSON
            = new ImportStoreHistoryInfoImportFileFormat("JSON");


        public static implicit operator ImportStoreHistoryInfoImportFileFormat(string value)
        {
            return NewValue(value);
        }

        public ImportStoreHistoryInfoImportFileFormat(string enumValue)
            : base(enumValue)
        {

        }
    }
}