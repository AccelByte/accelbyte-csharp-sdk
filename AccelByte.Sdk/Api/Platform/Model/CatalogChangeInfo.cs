// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class CatalogChangeInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("action")]
        [JsonStringEnum]
        public CatalogChangeInfoAction? Action { get; set; }

        [JsonPropertyName("categoryPath")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? CategoryPath { get; set; }

        [JsonPropertyName("changeId")]
        public string? ChangeId { get; set; }

        [JsonPropertyName("createdAt")]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        [JsonPropertyName("itemId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemId { get; set; }

        [JsonPropertyName("itemType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public CatalogChangeInfoItemType? ItemType { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("publishedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? PublishedAt { get; set; }

        [JsonPropertyName("sectionId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SectionId { get; set; }

        [JsonPropertyName("selected")]
        public bool? Selected { get; set; }

        [JsonPropertyName("sku")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Sku { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public CatalogChangeInfoStatus? Status { get; set; }

        [JsonPropertyName("storeId")]
        public string? StoreId { get; set; }

        [JsonPropertyName("title")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Title { get; set; }

        [JsonPropertyName("type")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public CatalogChangeInfoType? Type { get; set; }

        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("viewId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ViewId { get; set; }

    }



    public class CatalogChangeInfoAction : StringEnum<CatalogChangeInfoAction>
    {
        public static readonly CatalogChangeInfoAction CREATE
            = new CatalogChangeInfoAction("CREATE");

        public static readonly CatalogChangeInfoAction DELETE
            = new CatalogChangeInfoAction("DELETE");

        public static readonly CatalogChangeInfoAction UPDATE
            = new CatalogChangeInfoAction("UPDATE");


        public static implicit operator CatalogChangeInfoAction(string value)
        {
            return NewValue(value);
        }

        public CatalogChangeInfoAction(string enumValue)
            : base(enumValue)
        {

        }
    }    

    public class CatalogChangeInfoItemType : StringEnum<CatalogChangeInfoItemType>
    {
        public static readonly CatalogChangeInfoItemType APP
            = new CatalogChangeInfoItemType("APP");

        public static readonly CatalogChangeInfoItemType BUNDLE
            = new CatalogChangeInfoItemType("BUNDLE");

        public static readonly CatalogChangeInfoItemType CODE
            = new CatalogChangeInfoItemType("CODE");

        public static readonly CatalogChangeInfoItemType COINS
            = new CatalogChangeInfoItemType("COINS");

        public static readonly CatalogChangeInfoItemType EXTENSION
            = new CatalogChangeInfoItemType("EXTENSION");

        public static readonly CatalogChangeInfoItemType INGAMEITEM
            = new CatalogChangeInfoItemType("INGAMEITEM");

        public static readonly CatalogChangeInfoItemType LOOTBOX
            = new CatalogChangeInfoItemType("LOOTBOX");

        public static readonly CatalogChangeInfoItemType MEDIA
            = new CatalogChangeInfoItemType("MEDIA");

        public static readonly CatalogChangeInfoItemType OPTIONBOX
            = new CatalogChangeInfoItemType("OPTIONBOX");

        public static readonly CatalogChangeInfoItemType SEASON
            = new CatalogChangeInfoItemType("SEASON");

        public static readonly CatalogChangeInfoItemType SUBSCRIPTION
            = new CatalogChangeInfoItemType("SUBSCRIPTION");


        public static implicit operator CatalogChangeInfoItemType(string value)
        {
            return NewValue(value);
        }

        public CatalogChangeInfoItemType(string enumValue)
            : base(enumValue)
        {

        }
    }    

    public class CatalogChangeInfoStatus : StringEnum<CatalogChangeInfoStatus>
    {
        public static readonly CatalogChangeInfoStatus PUBLISHED
            = new CatalogChangeInfoStatus("PUBLISHED");

        public static readonly CatalogChangeInfoStatus UNPUBLISHED
            = new CatalogChangeInfoStatus("UNPUBLISHED");


        public static implicit operator CatalogChangeInfoStatus(string value)
        {
            return NewValue(value);
        }

        public CatalogChangeInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }    

    public class CatalogChangeInfoType : StringEnum<CatalogChangeInfoType>
    {
        public static readonly CatalogChangeInfoType CATEGORY
            = new CatalogChangeInfoType("CATEGORY");

        public static readonly CatalogChangeInfoType ITEM
            = new CatalogChangeInfoType("ITEM");

        public static readonly CatalogChangeInfoType SECTION
            = new CatalogChangeInfoType("SECTION");

        public static readonly CatalogChangeInfoType STORE
            = new CatalogChangeInfoType("STORE");

        public static readonly CatalogChangeInfoType VIEW
            = new CatalogChangeInfoType("VIEW");


        public static implicit operator CatalogChangeInfoType(string value)
        {
            return NewValue(value);
        }

        public CatalogChangeInfoType(string enumValue)
            : base(enumValue)
        {

        }
    }    
}