// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class IAPConsumeHistoryInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("clientRequestParameter")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ClientRequestParameter? ClientRequestParameter { get; set; }

        [JsonPropertyName("consumeItems")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ConsumeItem>? ConsumeItems { get; set; }

        [JsonPropertyName("iapType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public IAPConsumeHistoryInfoIapType? IapType { get; set; }

        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Id { get; set; }

        [JsonPropertyName("namespace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Namespace { get; set; }

        [JsonPropertyName("requestBody")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? RequestBody { get; set; }

        [JsonPropertyName("requestHistories")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<RequestHistory>? RequestHistories { get; set; }

        [JsonPropertyName("requestUrl")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? RequestUrl { get; set; }

        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public IAPConsumeHistoryInfoStatus? Status { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }

    public class IAPConsumeHistoryInfoIapType : StringEnum<IAPConsumeHistoryInfoIapType>
    {
        public static readonly IAPConsumeHistoryInfoIapType APPLE
            = new IAPConsumeHistoryInfoIapType("APPLE");

        public static readonly IAPConsumeHistoryInfoIapType EPICGAMES
            = new IAPConsumeHistoryInfoIapType("EPICGAMES");

        public static readonly IAPConsumeHistoryInfoIapType GOOGLE
            = new IAPConsumeHistoryInfoIapType("GOOGLE");

        public static readonly IAPConsumeHistoryInfoIapType PLAYSTATION
            = new IAPConsumeHistoryInfoIapType("PLAYSTATION");

        public static readonly IAPConsumeHistoryInfoIapType STADIA
            = new IAPConsumeHistoryInfoIapType("STADIA");

        public static readonly IAPConsumeHistoryInfoIapType STEAM
            = new IAPConsumeHistoryInfoIapType("STEAM");

        public static readonly IAPConsumeHistoryInfoIapType TWITCH
            = new IAPConsumeHistoryInfoIapType("TWITCH");

        public static readonly IAPConsumeHistoryInfoIapType XBOX
            = new IAPConsumeHistoryInfoIapType("XBOX");


        public static implicit operator IAPConsumeHistoryInfoIapType(string value)
        {
            return NewValue(value);
        }

        public IAPConsumeHistoryInfoIapType(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class IAPConsumeHistoryInfoStatus : StringEnum<IAPConsumeHistoryInfoStatus>
    {
        public static readonly IAPConsumeHistoryInfoStatus FAIL
            = new IAPConsumeHistoryInfoStatus("FAIL");

        public static readonly IAPConsumeHistoryInfoStatus PENDING
            = new IAPConsumeHistoryInfoStatus("PENDING");

        public static readonly IAPConsumeHistoryInfoStatus SUCCESS
            = new IAPConsumeHistoryInfoStatus("SUCCESS");


        public static implicit operator IAPConsumeHistoryInfoStatus(string value)
        {
            return NewValue(value);
        }

        public IAPConsumeHistoryInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}