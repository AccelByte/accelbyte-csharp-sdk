// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class AvailableComparison : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("comparison")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public AvailableComparisonComparison? Comparison { get; set; }

        [JsonPropertyName("text")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Text { get; set; }

    }



    public class AvailableComparisonComparison : StringEnum<AvailableComparisonComparison>
    {
        public static readonly AvailableComparisonComparison Excludes
            = new AvailableComparisonComparison("excludes");

        public static readonly AvailableComparisonComparison Includes
            = new AvailableComparisonComparison("includes");

        public static readonly AvailableComparisonComparison Is
            = new AvailableComparisonComparison("is");

        public static readonly AvailableComparisonComparison IsGreaterThan
            = new AvailableComparisonComparison("isGreaterThan");

        public static readonly AvailableComparisonComparison IsGreaterThanOrEqual
            = new AvailableComparisonComparison("isGreaterThanOrEqual");

        public static readonly AvailableComparisonComparison IsLessThan
            = new AvailableComparisonComparison("isLessThan");

        public static readonly AvailableComparisonComparison IsLessThanOrEqual
            = new AvailableComparisonComparison("isLessThanOrEqual");

        public static readonly AvailableComparisonComparison IsNot
            = new AvailableComparisonComparison("isNot");


        public static implicit operator AvailableComparisonComparison(string value)
        {
            return NewValue(value);
        }

        public AvailableComparisonComparison(string enumValue)
            : base(enumValue)
        {

        }
    }    
}