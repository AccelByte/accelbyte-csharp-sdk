// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class ThirdPartyUserSubscriptionInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("active")]
        public bool? Active { get; set; }

        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("expiredAt")]
        public DateTime? ExpiredAt { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("lastTransactionId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? LastTransactionId { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("platform")]
        [JsonStringEnum]
        public ThirdPartyUserSubscriptionInfoPlatform? Platform { get; set; }

        [JsonPropertyName("startAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? StartAt { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public ThirdPartyUserSubscriptionInfoStatus? Status { get; set; }

        [JsonPropertyName("subscriptionGroupId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? SubscriptionGroupId { get; set; }

        [JsonPropertyName("subscriptionProductId")]
        public string? SubscriptionProductId { get; set; }

        [JsonPropertyName("updatedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("userId")]
        public string? UserId { get; set; }

    }



    public class ThirdPartyUserSubscriptionInfoPlatform : StringEnum<ThirdPartyUserSubscriptionInfoPlatform>
    {
        public static readonly ThirdPartyUserSubscriptionInfoPlatform APPLE
            = new ThirdPartyUserSubscriptionInfoPlatform("APPLE");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform EPICGAMES
            = new ThirdPartyUserSubscriptionInfoPlatform("EPICGAMES");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform GOOGLE
            = new ThirdPartyUserSubscriptionInfoPlatform("GOOGLE");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform OCULUS
            = new ThirdPartyUserSubscriptionInfoPlatform("OCULUS");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform PLAYSTATION
            = new ThirdPartyUserSubscriptionInfoPlatform("PLAYSTATION");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform STADIA
            = new ThirdPartyUserSubscriptionInfoPlatform("STADIA");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform STEAM
            = new ThirdPartyUserSubscriptionInfoPlatform("STEAM");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform TWITCH
            = new ThirdPartyUserSubscriptionInfoPlatform("TWITCH");

        public static readonly ThirdPartyUserSubscriptionInfoPlatform XBOX
            = new ThirdPartyUserSubscriptionInfoPlatform("XBOX");


        public static implicit operator ThirdPartyUserSubscriptionInfoPlatform(string value)
        {
            return NewValue(value);
        }

        public ThirdPartyUserSubscriptionInfoPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ThirdPartyUserSubscriptionInfoStatus : StringEnum<ThirdPartyUserSubscriptionInfoStatus>
    {
        public static readonly ThirdPartyUserSubscriptionInfoStatus ACTIVE
            = new ThirdPartyUserSubscriptionInfoStatus("ACTIVE");

        public static readonly ThirdPartyUserSubscriptionInfoStatus BILLINGRETRYPERIOD
            = new ThirdPartyUserSubscriptionInfoStatus("BILLING_RETRY_PERIOD");

        public static readonly ThirdPartyUserSubscriptionInfoStatus CANCELED
            = new ThirdPartyUserSubscriptionInfoStatus("CANCELED");

        public static readonly ThirdPartyUserSubscriptionInfoStatus EXPIRED
            = new ThirdPartyUserSubscriptionInfoStatus("EXPIRED");

        public static readonly ThirdPartyUserSubscriptionInfoStatus INGRACEPERIOD
            = new ThirdPartyUserSubscriptionInfoStatus("IN_GRACE_PERIOD");

        public static readonly ThirdPartyUserSubscriptionInfoStatus ONHOLD
            = new ThirdPartyUserSubscriptionInfoStatus("ON_HOLD");

        public static readonly ThirdPartyUserSubscriptionInfoStatus PAUSED
            = new ThirdPartyUserSubscriptionInfoStatus("PAUSED");

        public static readonly ThirdPartyUserSubscriptionInfoStatus PENDING
            = new ThirdPartyUserSubscriptionInfoStatus("PENDING");

        public static readonly ThirdPartyUserSubscriptionInfoStatus REVOKED
            = new ThirdPartyUserSubscriptionInfoStatus("REVOKED");

        public static readonly ThirdPartyUserSubscriptionInfoStatus UNKNOWN
            = new ThirdPartyUserSubscriptionInfoStatus("UNKNOWN");


        public static implicit operator ThirdPartyUserSubscriptionInfoStatus(string value)
        {
            return NewValue(value);
        }

        public ThirdPartyUserSubscriptionInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}