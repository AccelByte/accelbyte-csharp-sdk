// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class IAPOrderConsumeDetailInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("correlationId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? CorrelationId { get; set; }

        [JsonPropertyName("iapOrderNo")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? IapOrderNo { get; set; }

        [JsonPropertyName("id")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Id { get; set; }

        [JsonPropertyName("itemId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemId { get; set; }

        [JsonPropertyName("itemSku")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemSku { get; set; }

        [JsonPropertyName("lineItemOrderId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? LineItemOrderId { get; set; }

        [JsonPropertyName("namespace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Namespace { get; set; }

        [JsonPropertyName("orderId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? OrderId { get; set; }

        [JsonPropertyName("platform")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Platform { get; set; }

        [JsonPropertyName("productId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ProductId { get; set; }

        [JsonPropertyName("quantityConsumed")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? QuantityConsumed { get; set; }

        [JsonPropertyName("quantityRevoked")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? QuantityRevoked { get; set; }

        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public IAPOrderConsumeDetailInfoStatus? Status { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }



    public class IAPOrderConsumeDetailInfoStatus : StringEnum<IAPOrderConsumeDetailInfoStatus>
    {
        public static readonly IAPOrderConsumeDetailInfoStatus FULFILLED
            = new IAPOrderConsumeDetailInfoStatus("FULFILLED");

        public static readonly IAPOrderConsumeDetailInfoStatus RECONNECTED
            = new IAPOrderConsumeDetailInfoStatus("RECONNECTED");

        public static readonly IAPOrderConsumeDetailInfoStatus REVOKED
            = new IAPOrderConsumeDetailInfoStatus("REVOKED");


        public static implicit operator IAPOrderConsumeDetailInfoStatus(string value)
        {
            return NewValue(value);
        }

        public IAPOrderConsumeDetailInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}