// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class EntitlementRevocation : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("entitlementId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? EntitlementId { get; set; }

        [JsonPropertyName("itemId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemId { get; set; }

        [JsonPropertyName("itemSku")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemSku { get; set; }

        [JsonPropertyName("quantity")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public long? Quantity { get; set; }

        [JsonPropertyName("reason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Reason { get; set; }

        [JsonPropertyName("revocationStrategy")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? RevocationStrategy { get; set; }

        [JsonPropertyName("skipped")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Skipped { get; set; }

        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public EntitlementRevocationStatus? Status { get; set; }

    }



    public class EntitlementRevocationStatus : StringEnum<EntitlementRevocationStatus>
    {
        public static readonly EntitlementRevocationStatus FAIL
            = new EntitlementRevocationStatus("FAIL");

        public static readonly EntitlementRevocationStatus SUCCESS
            = new EntitlementRevocationStatus("SUCCESS");


        public static implicit operator EntitlementRevocationStatus(string value)
        {
            return NewValue(value);
        }

        public EntitlementRevocationStatus(string enumValue)
            : base(enumValue)
        {

        }
    }    
}