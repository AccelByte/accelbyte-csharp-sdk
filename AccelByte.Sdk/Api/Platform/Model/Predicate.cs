// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class Predicate : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("anyOf")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? AnyOf { get; set; }

        [JsonPropertyName("comparison")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public PredicateComparison? Comparison { get; set; }

        [JsonPropertyName("name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Name { get; set; }

        [JsonPropertyName("predicateType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public PredicatePredicateType? PredicateType { get; set; }

        [JsonPropertyName("value")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Value { get; set; }

        [JsonPropertyName("values")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? Values { get; set; }

    }



    public class PredicateComparison : StringEnum<PredicateComparison>
    {
        public static readonly PredicateComparison Excludes
            = new PredicateComparison("excludes");

        public static readonly PredicateComparison Includes
            = new PredicateComparison("includes");

        public static readonly PredicateComparison Is
            = new PredicateComparison("is");

        public static readonly PredicateComparison IsGreaterThan
            = new PredicateComparison("isGreaterThan");

        public static readonly PredicateComparison IsGreaterThanOrEqual
            = new PredicateComparison("isGreaterThanOrEqual");

        public static readonly PredicateComparison IsLessThan
            = new PredicateComparison("isLessThan");

        public static readonly PredicateComparison IsLessThanOrEqual
            = new PredicateComparison("isLessThanOrEqual");

        public static readonly PredicateComparison IsNot
            = new PredicateComparison("isNot");


        public static implicit operator PredicateComparison(string value)
        {
            return NewValue(value);
        }

        public PredicateComparison(string enumValue)
            : base(enumValue)
        {

        }
    }    

    public class PredicatePredicateType : StringEnum<PredicatePredicateType>
    {
        public static readonly PredicatePredicateType EntitlementPredicate
            = new PredicatePredicateType("EntitlementPredicate");

        public static readonly PredicatePredicateType SeasonPassPredicate
            = new PredicatePredicateType("SeasonPassPredicate");

        public static readonly PredicatePredicateType SeasonTierPredicate
            = new PredicatePredicateType("SeasonTierPredicate");


        public static implicit operator PredicatePredicateType(string value)
        {
            return NewValue(value);
        }

        public PredicatePredicateType(string enumValue)
            : base(enumValue)
        {

        }
    }    
}