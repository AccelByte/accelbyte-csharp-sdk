// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class ExtensionFulfillmentSummary : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("grantedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? GrantedAt { get; set; }

        [JsonPropertyName("itemClazz")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemClazz { get; set; }

        [JsonPropertyName("itemExt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? ItemExt { get; set; }

        [JsonPropertyName("itemId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemId { get; set; }

        [JsonPropertyName("itemType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ExtensionFulfillmentSummaryItemType? ItemType { get; set; }

        [JsonPropertyName("metadata")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? Metadata { get; set; }

        [JsonPropertyName("namespace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Namespace { get; set; }

        [JsonPropertyName("quantity")]
        public int? Quantity { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }

    public class ExtensionFulfillmentSummary<T1, T2> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("grantedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? GrantedAt { get; set; }

        [JsonPropertyName("itemClazz")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemClazz { get; set; }

        [JsonPropertyName("itemExt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T1? ItemExt { get; set; }

        [JsonPropertyName("itemId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ItemId { get; set; }

        [JsonPropertyName("itemType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ExtensionFulfillmentSummaryItemType? ItemType { get; set; }

        [JsonPropertyName("metadata")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T2? Metadata { get; set; }

        [JsonPropertyName("namespace")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Namespace { get; set; }

        [JsonPropertyName("quantity")]
        public int? Quantity { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }


    public class ExtensionFulfillmentSummaryItemType : StringEnum<ExtensionFulfillmentSummaryItemType>
    {
        public static readonly ExtensionFulfillmentSummaryItemType APP
            = new ExtensionFulfillmentSummaryItemType("APP");

        public static readonly ExtensionFulfillmentSummaryItemType BUNDLE
            = new ExtensionFulfillmentSummaryItemType("BUNDLE");

        public static readonly ExtensionFulfillmentSummaryItemType CODE
            = new ExtensionFulfillmentSummaryItemType("CODE");

        public static readonly ExtensionFulfillmentSummaryItemType COINS
            = new ExtensionFulfillmentSummaryItemType("COINS");

        public static readonly ExtensionFulfillmentSummaryItemType EXTENSION
            = new ExtensionFulfillmentSummaryItemType("EXTENSION");

        public static readonly ExtensionFulfillmentSummaryItemType INGAMEITEM
            = new ExtensionFulfillmentSummaryItemType("INGAMEITEM");

        public static readonly ExtensionFulfillmentSummaryItemType LOOTBOX
            = new ExtensionFulfillmentSummaryItemType("LOOTBOX");

        public static readonly ExtensionFulfillmentSummaryItemType MEDIA
            = new ExtensionFulfillmentSummaryItemType("MEDIA");

        public static readonly ExtensionFulfillmentSummaryItemType OPTIONBOX
            = new ExtensionFulfillmentSummaryItemType("OPTIONBOX");

        public static readonly ExtensionFulfillmentSummaryItemType SEASON
            = new ExtensionFulfillmentSummaryItemType("SEASON");

        public static readonly ExtensionFulfillmentSummaryItemType SUBSCRIPTION
            = new ExtensionFulfillmentSummaryItemType("SUBSCRIPTION");


        public static implicit operator ExtensionFulfillmentSummaryItemType(string value)
        {
            return NewValue(value);
        }

        public ExtensionFulfillmentSummaryItemType(string enumValue)
            : base(enumValue)
        {

        }
    }    
}