// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Platform.Model
{
    public class ClawbackInfo : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("dryRun")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? DryRun { get; set; }

        [JsonPropertyName("eventContent")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? EventContent { get; set; }

        [JsonPropertyName("eventId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? EventId { get; set; }

        [JsonPropertyName("eventType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? EventType { get; set; }

        [JsonPropertyName("externalOrderId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ExternalOrderId { get; set; }

        [JsonPropertyName("feedbackContent")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? FeedbackContent { get; set; }

        [JsonPropertyName("feedbackStatus")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ClawbackInfoFeedbackStatus? FeedbackStatus { get; set; }

        [JsonPropertyName("feedbackStatusReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? FeedbackStatusReason { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("platform")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Platform { get; set; }

        [JsonPropertyName("processId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ProcessId { get; set; }

        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ClawbackInfoStatus? Status { get; set; }

        [JsonPropertyName("statusReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? StatusReason { get; set; }

        [JsonPropertyName("updatedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }

    public class ClawbackInfo<T1, T2> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("createdAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? CreatedAt { get; set; }

        [JsonPropertyName("dryRun")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? DryRun { get; set; }

        [JsonPropertyName("eventContent")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T1? EventContent { get; set; }

        [JsonPropertyName("eventId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? EventId { get; set; }

        [JsonPropertyName("eventType")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? EventType { get; set; }

        [JsonPropertyName("externalOrderId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ExternalOrderId { get; set; }

        [JsonPropertyName("feedbackContent")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T2? FeedbackContent { get; set; }

        [JsonPropertyName("feedbackStatus")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ClawbackInfoFeedbackStatus? FeedbackStatus { get; set; }

        [JsonPropertyName("feedbackStatusReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? FeedbackStatusReason { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("platform")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Platform { get; set; }

        [JsonPropertyName("processId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ProcessId { get; set; }

        [JsonPropertyName("status")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ClawbackInfoStatus? Status { get; set; }

        [JsonPropertyName("statusReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? StatusReason { get; set; }

        [JsonPropertyName("updatedAt")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? UpdatedAt { get; set; }

        [JsonPropertyName("userId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UserId { get; set; }

    }


    public class ClawbackInfoFeedbackStatus : StringEnum<ClawbackInfoFeedbackStatus>
    {
        public static readonly ClawbackInfoFeedbackStatus FAIL
            = new ClawbackInfoFeedbackStatus("FAIL");

        public static readonly ClawbackInfoFeedbackStatus INIT
            = new ClawbackInfoFeedbackStatus("INIT");

        public static readonly ClawbackInfoFeedbackStatus SUCCESS
            = new ClawbackInfoFeedbackStatus("SUCCESS");


        public static implicit operator ClawbackInfoFeedbackStatus(string value)
        {
            return NewValue(value);
        }

        public ClawbackInfoFeedbackStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ClawbackInfoStatus : StringEnum<ClawbackInfoStatus>
    {
        public static readonly ClawbackInfoStatus FAIL
            = new ClawbackInfoStatus("FAIL");

        public static readonly ClawbackInfoStatus IGNORED
            = new ClawbackInfoStatus("IGNORED");

        public static readonly ClawbackInfoStatus INIT
            = new ClawbackInfoStatus("INIT");

        public static readonly ClawbackInfoStatus SUCCESS
            = new ClawbackInfoStatus("SUCCESS");


        public static implicit operator ClawbackInfoStatus(string value)
        {
            return NewValue(value);
        }

        public ClawbackInfoStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}