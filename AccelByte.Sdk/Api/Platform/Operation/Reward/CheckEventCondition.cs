// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// checkEventCondition
    ///
    ///  [TEST FACILITY ONLY] Forbidden in live environment. Other detail info:
    /// 
    ///   * Returns : match result
    /// </summary>
    public class CheckEventCondition : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CheckEventConditionBuilder Builder { get => new CheckEventConditionBuilder(); }

        public class CheckEventConditionBuilder
            : OperationBuilder<CheckEventConditionBuilder>
        {


            public Model.EventPayload? Body { get; set; }




            internal CheckEventConditionBuilder() { }



            public CheckEventConditionBuilder SetBody(Model.EventPayload _body)
            {
                Body = _body;
                return this;
            }




            public CheckEventCondition Build(
                string namespace_,
                string rewardId
            )
            {
                CheckEventCondition op = new CheckEventCondition(this,
                    namespace_,
                    rewardId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private CheckEventCondition(CheckEventConditionBuilder builder,
            string namespace_,
            string rewardId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["rewardId"] = rewardId;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CheckEventCondition(
            string namespace_,
            string rewardId,
            Model.EventPayload body
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["rewardId"] = rewardId;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/rewards/{rewardId}/match";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ConditionMatchResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ConditionMatchResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ConditionMatchResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ConditionMatchResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}