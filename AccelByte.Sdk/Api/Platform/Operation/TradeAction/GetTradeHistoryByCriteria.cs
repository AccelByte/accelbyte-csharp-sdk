// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getTradeHistoryByCriteria
    ///
    /// This API is used to fetch trade history based on the provided criteria
    /// 
    /// Other detail info:
    /// 
    ///   * Required permission : resource=ADMIN:NAMESPACE:{namespace}:TRADE, action=2 (REDA)
    ///   *  Returns : trade history list based on criteria
    /// </summary>
    public class GetTradeHistoryByCriteria : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetTradeHistoryByCriteriaBuilder Builder { get => new GetTradeHistoryByCriteriaBuilder(); }

        public class GetTradeHistoryByCriteriaBuilder
            : OperationBuilder<GetTradeHistoryByCriteriaBuilder>
        {

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public GetTradeHistoryByCriteriaStatus? Status { get; set; }

            public string? Type { get; set; }

            public string? UserId { get; set; }





            internal GetTradeHistoryByCriteriaBuilder() { }


            public GetTradeHistoryByCriteriaBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetStatus(GetTradeHistoryByCriteriaStatus _status)
            {
                Status = _status;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetType(string _type)
            {
                Type = _type;
                return this;
            }

            public GetTradeHistoryByCriteriaBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public GetTradeHistoryByCriteria Build(
                string namespace_
            )
            {
                GetTradeHistoryByCriteria op = new GetTradeHistoryByCriteria(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private GetTradeHistoryByCriteria(GetTradeHistoryByCriteriaBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Type is not null) QueryParams["type"] = builder.Type;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetTradeHistoryByCriteria(
            string namespace_,
            int? limit,
            int? offset,
            GetTradeHistoryByCriteriaStatus? status,
            string? type,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (status is not null) QueryParams["status"] = status.Value;
            if (type is not null) QueryParams["type"] = type;
            if (userId is not null) QueryParams["userId"] = userId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/trade/history/byCriteria";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            //do nothing since response code is "default".
        }
    }

    public class GetTradeHistoryByCriteriaStatus : StringEnum<GetTradeHistoryByCriteriaStatus>
    {
        public static readonly GetTradeHistoryByCriteriaStatus FAILED
            = new GetTradeHistoryByCriteriaStatus("FAILED");

        public static readonly GetTradeHistoryByCriteriaStatus INIT
            = new GetTradeHistoryByCriteriaStatus("INIT");

        public static readonly GetTradeHistoryByCriteriaStatus SUCCESS
            = new GetTradeHistoryByCriteriaStatus("SUCCESS");


        public static implicit operator GetTradeHistoryByCriteriaStatus(string value)
        {
            return NewValue(value);
        }

        public GetTradeHistoryByCriteriaStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}