// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// importStoreByCSV
    ///
    /// This API is used to import a store by CSV format, You must select at least one of item/section/display/category for uploading
    /// </summary>
    public class ImportStoreByCSV : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImportStoreByCSVBuilder Builder { get => new ImportStoreByCSVBuilder(); }

        public class ImportStoreByCSVBuilder
            : OperationBuilder<ImportStoreByCSVBuilder>
        {



            public Stream? Category { get; set; }

            public Stream? Display { get; set; }

            public Stream? Item { get; set; }

            public string? Notes { get; set; }

            public Stream? Section { get; set; }



            internal ImportStoreByCSVBuilder() { }




            public ImportStoreByCSVBuilder SetCategory(Stream _category)
            {
                Category = _category;
                return this;
            }

            public ImportStoreByCSVBuilder SetDisplay(Stream _display)
            {
                Display = _display;
                return this;
            }

            public ImportStoreByCSVBuilder SetItem(Stream _item)
            {
                Item = _item;
                return this;
            }

            public ImportStoreByCSVBuilder SetNotes(string _notes)
            {
                Notes = _notes;
                return this;
            }

            public ImportStoreByCSVBuilder SetSection(Stream _section)
            {
                Section = _section;
                return this;
            }



            public ImportStoreByCSV Build(
                string namespace_,
                string storeId
            )
            {
                ImportStoreByCSV op = new ImportStoreByCSV(this,
                    namespace_,
                    storeId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private ImportStoreByCSV(ImportStoreByCSVBuilder builder,
            string namespace_,
            string storeId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;


            if (builder.Category is not null) FormParams["category"] = builder.Category;
            if (builder.Display is not null) FormParams["display"] = builder.Display;
            if (builder.Item is not null) FormParams["item"] = builder.Item;
            if (builder.Notes is not null) FormParams["notes"] = builder.Notes;
            if (builder.Section is not null) FormParams["section"] = builder.Section;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImportStoreByCSV(
            string namespace_,
            string storeId,
            Stream? category,
            Stream? display,
            Stream? item,
            string? notes,
            Stream? section
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["storeId"] = storeId;


            if (category is not null) FormParams["category"] = category;
            if (display is not null) FormParams["display"] = display;
            if (item is not null) FormParams["item"] = item;
            if (notes is not null) FormParams["notes"] = notes;
            if (section is not null) FormParams["section"] = section;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/stores/{storeId}/importByCSV";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "multipart/form-data" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ImportStoreResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}