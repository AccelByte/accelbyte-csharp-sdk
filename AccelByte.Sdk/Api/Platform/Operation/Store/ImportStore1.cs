// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// importStore_1
    ///
    /// This API is used to import a store.
    /// </summary>
    public class ImportStore1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImportStore1Builder Builder { get => new ImportStore1Builder(); }

        public class ImportStore1Builder
            : OperationBuilder<ImportStore1Builder>
        {

            public string? StoreId { get; set; }

            public bool? StrictMode { get; set; }



            public Stream? File { get; set; }



            internal ImportStore1Builder() { }


            public ImportStore1Builder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }

            public ImportStore1Builder SetStrictMode(bool _strictMode)
            {
                StrictMode = _strictMode;
                return this;
            }



            public ImportStore1Builder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }



            public ImportStore1 Build(
                string namespace_
            )
            {
                ImportStore1 op = new ImportStore1(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private ImportStore1(ImportStore1Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;
            if (builder.StrictMode != null) QueryParams["strictMode"] = Convert.ToString(builder.StrictMode)!;

            if (builder.File is not null) FormParams["file"] = builder.File;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImportStore1(
            string namespace_,
            string? storeId,
            bool? strictMode,
            Stream? file
        )
        {
            PathParams["namespace"] = namespace_;

            if (storeId is not null) QueryParams["storeId"] = storeId;
            if (strictMode != null) QueryParams["strictMode"] = Convert.ToString(strictMode)!;

            if (file is not null) FormParams["file"] = file;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/v2/admin/namespaces/{namespace}/stores/import";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "multipart/form-data" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ImportStoreResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ImportStoreResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}