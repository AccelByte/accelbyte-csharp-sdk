// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryThirdPartyNotifications
    ///
    /// Query third party notifications.
    /// Other detail info:
    /// 
    ///   * Returns : Third Party Platform notifications
    /// </summary>
    public class QueryThirdPartyNotifications : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryThirdPartyNotificationsBuilder Builder { get => new QueryThirdPartyNotificationsBuilder(); }

        public class QueryThirdPartyNotificationsBuilder
            : OperationBuilder<QueryThirdPartyNotificationsBuilder>
        {

            public string? EndDate { get; set; }

            public string? ExternalId { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public QueryThirdPartyNotificationsSource? Source { get; set; }

            public string? StartDate { get; set; }

            public QueryThirdPartyNotificationsStatus? Status { get; set; }

            public string? Type { get; set; }





            internal QueryThirdPartyNotificationsBuilder() { }


            public QueryThirdPartyNotificationsBuilder SetEndDate(string _endDate)
            {
                EndDate = _endDate;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetExternalId(string _externalId)
            {
                ExternalId = _externalId;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetSource(QueryThirdPartyNotificationsSource _source)
            {
                Source = _source;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetStartDate(string _startDate)
            {
                StartDate = _startDate;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetStatus(QueryThirdPartyNotificationsStatus _status)
            {
                Status = _status;
                return this;
            }

            public QueryThirdPartyNotificationsBuilder SetType(string _type)
            {
                Type = _type;
                return this;
            }





            public QueryThirdPartyNotifications Build(
                string namespace_
            )
            {
                QueryThirdPartyNotifications op = new QueryThirdPartyNotifications(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QueryThirdPartyNotifications(QueryThirdPartyNotificationsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.EndDate is not null) QueryParams["endDate"] = builder.EndDate;
            if (builder.ExternalId is not null) QueryParams["externalId"] = builder.ExternalId;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Source is not null) QueryParams["source"] = builder.Source.Value;
            if (builder.StartDate is not null) QueryParams["startDate"] = builder.StartDate;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Type is not null) QueryParams["type"] = builder.Type;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryThirdPartyNotifications(
            string namespace_,
            string? endDate,
            string? externalId,
            int? limit,
            int? offset,
            QueryThirdPartyNotificationsSource? source,
            string? startDate,
            QueryThirdPartyNotificationsStatus? status,
            string? type
        )
        {
            PathParams["namespace"] = namespace_;

            if (endDate is not null) QueryParams["endDate"] = endDate;
            if (externalId is not null) QueryParams["externalId"] = externalId;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (source is not null) QueryParams["source"] = source.Value;
            if (startDate is not null) QueryParams["startDate"] = startDate;
            if (status is not null) QueryParams["status"] = status.Value;
            if (type is not null) QueryParams["type"] = type;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/iap/notifications";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.NotificationPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.NotificationPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.NotificationPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.NotificationPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryThirdPartyNotificationsSource : StringEnum<QueryThirdPartyNotificationsSource>
    {
        public static readonly QueryThirdPartyNotificationsSource APPLE
            = new QueryThirdPartyNotificationsSource("APPLE");

        public static readonly QueryThirdPartyNotificationsSource EPICGAMES
            = new QueryThirdPartyNotificationsSource("EPICGAMES");

        public static readonly QueryThirdPartyNotificationsSource GOOGLE
            = new QueryThirdPartyNotificationsSource("GOOGLE");

        public static readonly QueryThirdPartyNotificationsSource OCULUS
            = new QueryThirdPartyNotificationsSource("OCULUS");

        public static readonly QueryThirdPartyNotificationsSource PLAYSTATION
            = new QueryThirdPartyNotificationsSource("PLAYSTATION");

        public static readonly QueryThirdPartyNotificationsSource STADIA
            = new QueryThirdPartyNotificationsSource("STADIA");

        public static readonly QueryThirdPartyNotificationsSource STEAM
            = new QueryThirdPartyNotificationsSource("STEAM");

        public static readonly QueryThirdPartyNotificationsSource TWITCH
            = new QueryThirdPartyNotificationsSource("TWITCH");

        public static readonly QueryThirdPartyNotificationsSource XBOX
            = new QueryThirdPartyNotificationsSource("XBOX");


        public static implicit operator QueryThirdPartyNotificationsSource(string value)
        {
            return NewValue(value);
        }

        public QueryThirdPartyNotificationsSource(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class QueryThirdPartyNotificationsStatus : StringEnum<QueryThirdPartyNotificationsStatus>
    {
        public static readonly QueryThirdPartyNotificationsStatus ERROR
            = new QueryThirdPartyNotificationsStatus("ERROR");

        public static readonly QueryThirdPartyNotificationsStatus IGNORED
            = new QueryThirdPartyNotificationsStatus("IGNORED");

        public static readonly QueryThirdPartyNotificationsStatus PROCESSED
            = new QueryThirdPartyNotificationsStatus("PROCESSED");

        public static readonly QueryThirdPartyNotificationsStatus WARN
            = new QueryThirdPartyNotificationsStatus("WARN");


        public static implicit operator QueryThirdPartyNotificationsStatus(string value)
        {
            return NewValue(value);
        }

        public QueryThirdPartyNotificationsStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}