// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicListCurrencies
    ///
    /// List currencies of a namespace.
    /// Other detail info:
    /// 
    ///   * Returns : Currency List
    /// </summary>
    public class PublicListCurrencies : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListCurrenciesBuilder Builder { get => new PublicListCurrenciesBuilder(); }

        public class PublicListCurrenciesBuilder
            : OperationBuilder<PublicListCurrenciesBuilder>
        {

            public PublicListCurrenciesCurrencyType? CurrencyType { get; set; }





            internal PublicListCurrenciesBuilder() { }


            public PublicListCurrenciesBuilder SetCurrencyType(PublicListCurrenciesCurrencyType _currencyType)
            {
                CurrencyType = _currencyType;
                return this;
            }





            public PublicListCurrencies Build(
                string namespace_
            )
            {
                PublicListCurrencies op = new PublicListCurrencies(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private PublicListCurrencies(PublicListCurrenciesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.CurrencyType is not null) QueryParams["currencyType"] = builder.CurrencyType.Value;






        }
        #endregion

        public PublicListCurrencies(
            string namespace_,
            PublicListCurrenciesCurrencyType? currencyType
        )
        {
            PathParams["namespace"] = namespace_;

            if (currencyType is not null) QueryParams["currencyType"] = currencyType.Value;






        }

        public override string Path => "/platform/public/namespaces/{namespace}/currencies";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public List<Model.CurrencyInfo>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.CurrencyInfo>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.CurrencyInfo>>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicListCurrenciesCurrencyType : StringEnum<PublicListCurrenciesCurrencyType>
    {
        public static readonly PublicListCurrenciesCurrencyType REAL
            = new PublicListCurrenciesCurrencyType("REAL");

        public static readonly PublicListCurrenciesCurrencyType VIRTUAL
            = new PublicListCurrenciesCurrencyType("VIRTUAL");


        public static implicit operator PublicListCurrenciesCurrencyType(string value)
        {
            return NewValue(value);
        }

        public PublicListCurrenciesCurrencyType(string enumValue)
            : base(enumValue)
        {

        }
    }

}