// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// listCurrencies
    ///
    /// List currencies of a namespace.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:CURRENCY", action=2 (READ)
    ///   *  Returns : Currency List
    /// </summary>
    public class ListCurrencies : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ListCurrenciesBuilder Builder = new ListCurrenciesBuilder();

        public class ListCurrenciesBuilder
            : OperationBuilder<ListCurrenciesBuilder>
        {

            public ListCurrenciesCurrencyType? CurrencyType { get; set; }





            internal ListCurrenciesBuilder() { }


            public ListCurrenciesBuilder SetCurrencyType(ListCurrenciesCurrencyType _currencyType)
            {
                CurrencyType = _currencyType;
                return this;
            }





            public ListCurrencies Build(
                string namespace_
            )
            {
                ListCurrencies op = new ListCurrencies(this,
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private ListCurrencies(ListCurrenciesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.CurrencyType is not null) QueryParams["currencyType"] = builder.CurrencyType.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ListCurrencies(
            string namespace_,            
            ListCurrenciesCurrencyType? currencyType            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (currencyType is not null) QueryParams["currencyType"] = currencyType.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/currencies";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public List<Model.CurrencyInfo>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.CurrencyInfo>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.CurrencyInfo>>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class ListCurrenciesCurrencyType : StringEnum<ListCurrenciesCurrencyType>
    {
        public static readonly ListCurrenciesCurrencyType REAL
            = new ListCurrenciesCurrencyType("REAL");

        public static readonly ListCurrenciesCurrencyType VIRTUAL
            = new ListCurrenciesCurrencyType("VIRTUAL");


        public static implicit operator ListCurrenciesCurrencyType(string value)
        {
            return NewValue(value);
        }

        public ListCurrenciesCurrencyType(string enumValue)
            : base(enumValue)
        {

        }
    }

}