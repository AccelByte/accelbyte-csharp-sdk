// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryUserIAPConsumeHistory
    ///
    /// Query IAP consume history.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", action=2 (READ)
    ///   *  Returns : paginated iap consume history
    /// </summary>
    public class QueryUserIAPConsumeHistory : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryUserIAPConsumeHistoryBuilder Builder = new QueryUserIAPConsumeHistoryBuilder();

        public class QueryUserIAPConsumeHistoryBuilder
            : OperationBuilder<QueryUserIAPConsumeHistoryBuilder>
        {

            public string? EndTime { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public string? StartTime { get; set; }

            public QueryUserIAPConsumeHistoryStatus? Status { get; set; }

            public QueryUserIAPConsumeHistoryType? Type { get; set; }





            internal QueryUserIAPConsumeHistoryBuilder() { }


            public QueryUserIAPConsumeHistoryBuilder SetEndTime(string _endTime)
            {
                EndTime = _endTime;
                return this;
            }

            public QueryUserIAPConsumeHistoryBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryUserIAPConsumeHistoryBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryUserIAPConsumeHistoryBuilder SetStartTime(string _startTime)
            {
                StartTime = _startTime;
                return this;
            }

            public QueryUserIAPConsumeHistoryBuilder SetStatus(QueryUserIAPConsumeHistoryStatus _status)
            {
                Status = _status;
                return this;
            }

            public QueryUserIAPConsumeHistoryBuilder SetType(QueryUserIAPConsumeHistoryType _type)
            {
                Type = _type;
                return this;
            }





            public QueryUserIAPConsumeHistory Build(
                string namespace_,
                string userId
            )
            {
                QueryUserIAPConsumeHistory op = new QueryUserIAPConsumeHistory(this,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private QueryUserIAPConsumeHistory(QueryUserIAPConsumeHistoryBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.EndTime is not null) QueryParams["endTime"] = builder.EndTime;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.StartTime is not null) QueryParams["startTime"] = builder.StartTime;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Type is not null) QueryParams["type"] = builder.Type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryUserIAPConsumeHistory(
            string namespace_,
            string userId,
            string? endTime,
            int? limit,
            int? offset,
            string? startTime,
            QueryUserIAPConsumeHistoryStatus? status,
            QueryUserIAPConsumeHistoryType? type
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (endTime is not null) QueryParams["endTime"] = endTime;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (startTime is not null) QueryParams["startTime"] = startTime;
            if (status is not null) QueryParams["status"] = status.Value;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/iap/consume/history";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.IAPConsumeHistoryPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.IAPConsumeHistoryPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.IAPConsumeHistoryPagingSlicedResult>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryUserIAPConsumeHistoryStatus : StringEnum<QueryUserIAPConsumeHistoryStatus>
    {
        public static readonly QueryUserIAPConsumeHistoryStatus FAIL
            = new QueryUserIAPConsumeHistoryStatus("FAIL");

        public static readonly QueryUserIAPConsumeHistoryStatus PENDING
            = new QueryUserIAPConsumeHistoryStatus("PENDING");

        public static readonly QueryUserIAPConsumeHistoryStatus SUCCESS
            = new QueryUserIAPConsumeHistoryStatus("SUCCESS");


        public static implicit operator QueryUserIAPConsumeHistoryStatus(string value)
        {
            return NewValue(value);
        }

        public QueryUserIAPConsumeHistoryStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class QueryUserIAPConsumeHistoryType : StringEnum<QueryUserIAPConsumeHistoryType>
    {
        public static readonly QueryUserIAPConsumeHistoryType APPLE
            = new QueryUserIAPConsumeHistoryType("APPLE");

        public static readonly QueryUserIAPConsumeHistoryType EPICGAMES
            = new QueryUserIAPConsumeHistoryType("EPICGAMES");

        public static readonly QueryUserIAPConsumeHistoryType GOOGLE
            = new QueryUserIAPConsumeHistoryType("GOOGLE");

        public static readonly QueryUserIAPConsumeHistoryType PLAYSTATION
            = new QueryUserIAPConsumeHistoryType("PLAYSTATION");

        public static readonly QueryUserIAPConsumeHistoryType STADIA
            = new QueryUserIAPConsumeHistoryType("STADIA");

        public static readonly QueryUserIAPConsumeHistoryType STEAM
            = new QueryUserIAPConsumeHistoryType("STEAM");

        public static readonly QueryUserIAPConsumeHistoryType TWITCH
            = new QueryUserIAPConsumeHistoryType("TWITCH");

        public static readonly QueryUserIAPConsumeHistoryType XBOX
            = new QueryUserIAPConsumeHistoryType("XBOX");


        public static implicit operator QueryUserIAPConsumeHistoryType(string value)
        {
            return NewValue(value);
        }

        public QueryUserIAPConsumeHistoryType(string enumValue)
            : base(enumValue)
        {

        }
    }

}