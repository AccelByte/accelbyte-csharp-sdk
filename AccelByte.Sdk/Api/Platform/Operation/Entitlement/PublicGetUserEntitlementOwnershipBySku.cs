// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetUserEntitlementOwnershipBySku
    ///
    /// Get user entitlement ownership by sku.
    /// 
    /// Other detail info:
    /// 
    ///   * Required permission : resource="NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", action=2 (READ)
    /// </summary>
    public class PublicGetUserEntitlementOwnershipBySku : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetUserEntitlementOwnershipBySkuBuilder Builder { get => new PublicGetUserEntitlementOwnershipBySkuBuilder(); }

        public class PublicGetUserEntitlementOwnershipBySkuBuilder
            : OperationBuilder<PublicGetUserEntitlementOwnershipBySkuBuilder>
        {

            public PublicGetUserEntitlementOwnershipBySkuEntitlementClazz? EntitlementClazz { get; set; }





            internal PublicGetUserEntitlementOwnershipBySkuBuilder() { }


            public PublicGetUserEntitlementOwnershipBySkuBuilder SetEntitlementClazz(PublicGetUserEntitlementOwnershipBySkuEntitlementClazz _entitlementClazz)
            {
                EntitlementClazz = _entitlementClazz;
                return this;
            }





            public PublicGetUserEntitlementOwnershipBySku Build(
                string namespace_,
                string userId,
                string sku
            )
            {
                PublicGetUserEntitlementOwnershipBySku op = new PublicGetUserEntitlementOwnershipBySku(this,
                    namespace_,
                    userId,
                    sku
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private PublicGetUserEntitlementOwnershipBySku(PublicGetUserEntitlementOwnershipBySkuBuilder builder,
            string namespace_,
            string userId,
            string sku
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.EntitlementClazz is not null) QueryParams["entitlementClazz"] = builder.EntitlementClazz.Value;
            if (sku is not null) QueryParams["sku"] = sku;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetUserEntitlementOwnershipBySku(
            string namespace_,
            string userId,
            PublicGetUserEntitlementOwnershipBySkuEntitlementClazz? entitlementClazz,
            string sku
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (entitlementClazz is not null) QueryParams["entitlementClazz"] = entitlementClazz.Value;
            if (sku is not null) QueryParams["sku"] = sku;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/namespaces/{namespace}/users/{userId}/entitlements/ownership/bySku";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.TimedOwnership? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.TimedOwnership>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.TimedOwnership>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicGetUserEntitlementOwnershipBySkuEntitlementClazz : StringEnum<PublicGetUserEntitlementOwnershipBySkuEntitlementClazz>
    {
        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz APP
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("APP");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz CODE
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("CODE");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz ENTITLEMENT
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("ENTITLEMENT");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz LOOTBOX
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("LOOTBOX");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz MEDIA
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("MEDIA");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz OPTIONBOX
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("OPTIONBOX");

        public static readonly PublicGetUserEntitlementOwnershipBySkuEntitlementClazz SUBSCRIPTION
            = new PublicGetUserEntitlementOwnershipBySkuEntitlementClazz("SUBSCRIPTION");


        public static implicit operator PublicGetUserEntitlementOwnershipBySkuEntitlementClazz(string value)
        {
            return NewValue(value);
        }

        public PublicGetUserEntitlementOwnershipBySkuEntitlementClazz(string enumValue)
            : base(enumValue)
        {

        }
    }

}