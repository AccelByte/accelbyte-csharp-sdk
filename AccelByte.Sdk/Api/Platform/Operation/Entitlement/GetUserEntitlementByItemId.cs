// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getUserEntitlementByItemId
    ///
    /// Get user entitlement by itemId.
    /// 
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:ENTITLEMENT", action=2 (READ)
    /// </summary>
    public class GetUserEntitlementByItemId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetUserEntitlementByItemIdBuilder Builder = new GetUserEntitlementByItemIdBuilder();

        public class GetUserEntitlementByItemIdBuilder
            : OperationBuilder<GetUserEntitlementByItemIdBuilder>
        {

            public bool? ActiveOnly { get; set; }

            public GetUserEntitlementByItemIdEntitlementClazz? EntitlementClazz { get; set; }





            internal GetUserEntitlementByItemIdBuilder() { }


            public GetUserEntitlementByItemIdBuilder SetActiveOnly(bool _activeOnly)
            {
                ActiveOnly = _activeOnly;
                return this;
            }

            public GetUserEntitlementByItemIdBuilder SetEntitlementClazz(GetUserEntitlementByItemIdEntitlementClazz _entitlementClazz)
            {
                EntitlementClazz = _entitlementClazz;
                return this;
            }





            public GetUserEntitlementByItemId Build(
                string namespace_,
                string userId,
                string itemId
            )
            {
                GetUserEntitlementByItemId op = new GetUserEntitlementByItemId(this,
                    namespace_,                    
                    userId,                    
                    itemId                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private GetUserEntitlementByItemId(GetUserEntitlementByItemIdBuilder builder,
            string namespace_,
            string userId,
            string itemId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (builder.ActiveOnly != null) QueryParams["activeOnly"] = Convert.ToString(builder.ActiveOnly)!;
            if (builder.EntitlementClazz is not null) QueryParams["entitlementClazz"] = builder.EntitlementClazz.Value;
            if (itemId is not null) QueryParams["itemId"] = itemId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetUserEntitlementByItemId(
            string namespace_,            
            string userId,            
            bool? activeOnly,            
            GetUserEntitlementByItemIdEntitlementClazz? entitlementClazz,            
            string itemId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (activeOnly != null) QueryParams["activeOnly"] = Convert.ToString(activeOnly)!;
            if (entitlementClazz is not null) QueryParams["entitlementClazz"] = entitlementClazz.Value;
            if (itemId is not null) QueryParams["itemId"] = itemId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/entitlements/byItemId";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] {  };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.EntitlementInfo? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.EntitlementInfo>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.EntitlementInfo>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetUserEntitlementByItemIdEntitlementClazz : StringEnum<GetUserEntitlementByItemIdEntitlementClazz>
    {
        public static readonly GetUserEntitlementByItemIdEntitlementClazz App
            = new GetUserEntitlementByItemIdEntitlementClazz("APP");

        public static readonly GetUserEntitlementByItemIdEntitlementClazz Code
            = new GetUserEntitlementByItemIdEntitlementClazz("CODE");

        public static readonly GetUserEntitlementByItemIdEntitlementClazz Entitlement
            = new GetUserEntitlementByItemIdEntitlementClazz("ENTITLEMENT");

        public static readonly GetUserEntitlementByItemIdEntitlementClazz Media
            = new GetUserEntitlementByItemIdEntitlementClazz("MEDIA");

        public static readonly GetUserEntitlementByItemIdEntitlementClazz Subscription
            = new GetUserEntitlementByItemIdEntitlementClazz("SUBSCRIPTION");


        public static implicit operator GetUserEntitlementByItemIdEntitlementClazz(string value)
        {
            return NewValue(value);
        }

        public GetUserEntitlementByItemIdEntitlementClazz(string enumValue)
            : base(enumValue)
        {

        }
    }

}