// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryEntitlements_1
    ///
    /// Query entitlements.
    /// 
    /// Other detail info:
    /// 
    ///   * Returns : entitlement list
    /// </summary>
    public class QueryEntitlements1 : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryEntitlements1Builder Builder { get => new QueryEntitlements1Builder(); }

        public class QueryEntitlements1Builder
            : OperationBuilder<QueryEntitlements1Builder>
        {

            public bool? ActiveOnly { get; set; }

            public QueryEntitlements1AppType? AppType { get; set; }

            public QueryEntitlements1EntitlementClazz? EntitlementClazz { get; set; }

            public string? EntitlementName { get; set; }

            public List<string>? ItemId { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public QueryEntitlements1Origin? Origin { get; set; }

            public string? UserId { get; set; }





            internal QueryEntitlements1Builder() { }


            public QueryEntitlements1Builder SetActiveOnly(bool _activeOnly)
            {
                ActiveOnly = _activeOnly;
                return this;
            }

            public QueryEntitlements1Builder SetAppType(QueryEntitlements1AppType _appType)
            {
                AppType = _appType;
                return this;
            }

            public QueryEntitlements1Builder SetEntitlementClazz(QueryEntitlements1EntitlementClazz _entitlementClazz)
            {
                EntitlementClazz = _entitlementClazz;
                return this;
            }

            public QueryEntitlements1Builder SetEntitlementName(string _entitlementName)
            {
                EntitlementName = _entitlementName;
                return this;
            }

            public QueryEntitlements1Builder SetItemId(List<string> _itemId)
            {
                ItemId = _itemId;
                return this;
            }

            public QueryEntitlements1Builder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryEntitlements1Builder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryEntitlements1Builder SetOrigin(QueryEntitlements1Origin _origin)
            {
                Origin = _origin;
                return this;
            }

            public QueryEntitlements1Builder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public QueryEntitlements1 Build(
                string namespace_
            )
            {
                QueryEntitlements1 op = new QueryEntitlements1(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QueryEntitlements1(QueryEntitlements1Builder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ActiveOnly != null) QueryParams["activeOnly"] = Convert.ToString(builder.ActiveOnly)!;
            if (builder.AppType is not null) QueryParams["appType"] = builder.AppType.Value;
            if (builder.EntitlementClazz is not null) QueryParams["entitlementClazz"] = builder.EntitlementClazz.Value;
            if (builder.EntitlementName is not null) QueryParams["entitlementName"] = builder.EntitlementName;
            if (builder.ItemId is not null) QueryParams["itemId"] = builder.ItemId;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Origin is not null) QueryParams["origin"] = builder.Origin.Value;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;



            CollectionFormatMap["itemId"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryEntitlements1(
            string namespace_,
            bool? activeOnly,
            QueryEntitlements1AppType? appType,
            QueryEntitlements1EntitlementClazz? entitlementClazz,
            string? entitlementName,
            List<string>? itemId,
            int? limit,
            int? offset,
            QueryEntitlements1Origin? origin,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (activeOnly != null) QueryParams["activeOnly"] = Convert.ToString(activeOnly)!;
            if (appType is not null) QueryParams["appType"] = appType.Value;
            if (entitlementClazz is not null) QueryParams["entitlementClazz"] = entitlementClazz.Value;
            if (entitlementName is not null) QueryParams["entitlementName"] = entitlementName;
            if (itemId is not null) QueryParams["itemId"] = itemId;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (origin is not null) QueryParams["origin"] = origin.Value;
            if (userId is not null) QueryParams["userId"] = userId;



            CollectionFormatMap["itemId"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/entitlements";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.EntitlementPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.EntitlementPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.EntitlementPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.EntitlementPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryEntitlements1AppType : StringEnum<QueryEntitlements1AppType>
    {
        public static readonly QueryEntitlements1AppType DEMO
            = new QueryEntitlements1AppType("DEMO");

        public static readonly QueryEntitlements1AppType DLC
            = new QueryEntitlements1AppType("DLC");

        public static readonly QueryEntitlements1AppType GAME
            = new QueryEntitlements1AppType("GAME");

        public static readonly QueryEntitlements1AppType SOFTWARE
            = new QueryEntitlements1AppType("SOFTWARE");


        public static implicit operator QueryEntitlements1AppType(string value)
        {
            return NewValue(value);
        }

        public QueryEntitlements1AppType(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class QueryEntitlements1EntitlementClazz : StringEnum<QueryEntitlements1EntitlementClazz>
    {
        public static readonly QueryEntitlements1EntitlementClazz APP
            = new QueryEntitlements1EntitlementClazz("APP");

        public static readonly QueryEntitlements1EntitlementClazz CODE
            = new QueryEntitlements1EntitlementClazz("CODE");

        public static readonly QueryEntitlements1EntitlementClazz ENTITLEMENT
            = new QueryEntitlements1EntitlementClazz("ENTITLEMENT");

        public static readonly QueryEntitlements1EntitlementClazz LOOTBOX
            = new QueryEntitlements1EntitlementClazz("LOOTBOX");

        public static readonly QueryEntitlements1EntitlementClazz MEDIA
            = new QueryEntitlements1EntitlementClazz("MEDIA");

        public static readonly QueryEntitlements1EntitlementClazz OPTIONBOX
            = new QueryEntitlements1EntitlementClazz("OPTIONBOX");

        public static readonly QueryEntitlements1EntitlementClazz SUBSCRIPTION
            = new QueryEntitlements1EntitlementClazz("SUBSCRIPTION");


        public static implicit operator QueryEntitlements1EntitlementClazz(string value)
        {
            return NewValue(value);
        }

        public QueryEntitlements1EntitlementClazz(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class QueryEntitlements1Origin : StringEnum<QueryEntitlements1Origin>
    {
        public static readonly QueryEntitlements1Origin Epic
            = new QueryEntitlements1Origin("Epic");

        public static readonly QueryEntitlements1Origin GooglePlay
            = new QueryEntitlements1Origin("GooglePlay");

        public static readonly QueryEntitlements1Origin IOS
            = new QueryEntitlements1Origin("IOS");

        public static readonly QueryEntitlements1Origin Nintendo
            = new QueryEntitlements1Origin("Nintendo");

        public static readonly QueryEntitlements1Origin Oculus
            = new QueryEntitlements1Origin("Oculus");

        public static readonly QueryEntitlements1Origin Other
            = new QueryEntitlements1Origin("Other");

        public static readonly QueryEntitlements1Origin Playstation
            = new QueryEntitlements1Origin("Playstation");

        public static readonly QueryEntitlements1Origin Steam
            = new QueryEntitlements1Origin("Steam");

        public static readonly QueryEntitlements1Origin System
            = new QueryEntitlements1Origin("System");

        public static readonly QueryEntitlements1Origin Twitch
            = new QueryEntitlements1Origin("Twitch");

        public static readonly QueryEntitlements1Origin Xbox
            = new QueryEntitlements1Origin("Xbox");


        public static implicit operator QueryEntitlements1Origin(string value)
        {
            return NewValue(value);
        }

        public QueryEntitlements1Origin(string enumValue)
            : base(enumValue)
        {

        }
    }

}