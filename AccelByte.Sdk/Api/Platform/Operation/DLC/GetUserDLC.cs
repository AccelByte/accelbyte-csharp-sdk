// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getUserDLC
    ///
    /// Get user dlc records.
    /// Note: includeAllNamespaces means this endpoint will return user dlcs from all namespace, example scenario isadmin may need to check the user dlcs before unlink a 3rd party account, so the user dlcs should be from all namespaces because unlinking is a platform level action
    /// Other detail info:
    /// 
    ///   * Returns : user dlc
    /// </summary>
    public class GetUserDLC : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetUserDLCBuilder Builder { get => new GetUserDLCBuilder(); }

        public class GetUserDLCBuilder
            : OperationBuilder<GetUserDLCBuilder>
        {

            public bool? IncludeAllNamespaces { get; set; }

            public GetUserDLCStatus? Status { get; set; }

            public GetUserDLCType? Type { get; set; }





            internal GetUserDLCBuilder() { }


            public GetUserDLCBuilder SetIncludeAllNamespaces(bool _includeAllNamespaces)
            {
                IncludeAllNamespaces = _includeAllNamespaces;
                return this;
            }

            public GetUserDLCBuilder SetStatus(GetUserDLCStatus _status)
            {
                Status = _status;
                return this;
            }

            public GetUserDLCBuilder SetType(GetUserDLCType _type)
            {
                Type = _type;
                return this;
            }





            public GetUserDLC Build(
                string namespace_,
                string userId
            )
            {
                GetUserDLC op = new GetUserDLC(this,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetUserDLC(GetUserDLCBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (builder.IncludeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(builder.IncludeAllNamespaces)!;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Type is not null) QueryParams["type"] = builder.Type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetUserDLC(
            string namespace_,
            string userId,
            bool? includeAllNamespaces,
            GetUserDLCStatus? status,
            GetUserDLCType? type
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;

            if (includeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(includeAllNamespaces)!;
            if (status is not null) QueryParams["status"] = status.Value;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/dlc/records";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public List<Model.UserDLCRecord>? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<List<Model.UserDLCRecord>>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<List<Model.UserDLCRecord>>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.UserDLCRecord>>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }

        public List<Model.UserDLCRecord<T1>>? ParseResponse<T1>(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<List<Model.UserDLCRecord<T1>>>(payload, ResponseJsonOptions);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<List<Model.UserDLCRecord<T1>>>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetUserDLCStatus : StringEnum<GetUserDLCStatus>
    {
        public static readonly GetUserDLCStatus FULFILLED
            = new GetUserDLCStatus("FULFILLED");

        public static readonly GetUserDLCStatus REVOKED
            = new GetUserDLCStatus("REVOKED");

        public static readonly GetUserDLCStatus REVOKEFAILED
            = new GetUserDLCStatus("REVOKE_FAILED");


        public static implicit operator GetUserDLCStatus(string value)
        {
            return NewValue(value);
        }

        public GetUserDLCStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class GetUserDLCType : StringEnum<GetUserDLCType>
    {
        public static readonly GetUserDLCType EPICGAMES
            = new GetUserDLCType("EPICGAMES");

        public static readonly GetUserDLCType OCULUS
            = new GetUserDLCType("OCULUS");

        public static readonly GetUserDLCType PSN
            = new GetUserDLCType("PSN");

        public static readonly GetUserDLCType STEAM
            = new GetUserDLCType("STEAM");

        public static readonly GetUserDLCType XBOX
            = new GetUserDLCType("XBOX");


        public static implicit operator GetUserDLCType(string value)
        {
            return NewValue(value);
        }

        public GetUserDLCType(string enumValue)
            : base(enumValue)
        {

        }
    }

}