// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getUserDLC
    ///
    /// Get user dlc by platform.
    /// Other detail info:
    /// 
    ///   * Required permission : resource="ADMIN:NAMESPACE:{namespace}:USER:{userId}:IAP", action=2 (READ)
    ///   *  Returns : user dlc
    /// </summary>
    public class GetUserDLC : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetUserDLCBuilder Builder { get => new GetUserDLCBuilder(); }

        public class GetUserDLCBuilder
            : OperationBuilder<GetUserDLCBuilder>
        {





            internal GetUserDLCBuilder() { }






            public GetUserDLC Build(
                string namespace_,
                string userId,
                GetUserDLCType type
            )
            {
                GetUserDLC op = new GetUserDLC(this,
                    namespace_,                    
                    userId,                    
                    type                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private GetUserDLC(GetUserDLCBuilder builder,
            string namespace_,
            string userId,
            GetUserDLCType type
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (type is not null) QueryParams["type"] = type.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetUserDLC(
            string namespace_,            
            string userId,            
            GetUserDLCType type            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;
            
            if (type is not null) QueryParams["type"] = type.Value;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/dlc";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] {  };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.UserDLC? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.UserDLC>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.UserDLC>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetUserDLCType : StringEnum<GetUserDLCType>
    {
        public static readonly GetUserDLCType EPICGAMES
            = new GetUserDLCType("EPICGAMES");

        public static readonly GetUserDLCType PSN
            = new GetUserDLCType("PSN");

        public static readonly GetUserDLCType STEAM
            = new GetUserDLCType("STEAM");

        public static readonly GetUserDLCType XBOX
            = new GetUserDLCType("XBOX");


        public static implicit operator GetUserDLCType(string value)
        {
            return NewValue(value);
        }

        public GetUserDLCType(string enumValue)
            : base(enumValue)
        {

        }
    }

}