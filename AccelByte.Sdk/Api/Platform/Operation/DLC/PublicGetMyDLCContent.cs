// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// publicGetMyDLCContent
    ///
    /// Get user dlc reward contents. If includeAllNamespaces is false, will only return the dlc synced from the current namespace
    /// Other detail info:
    /// 
    ///   * Returns : user dlc
    /// </summary>
    public class PublicGetMyDLCContent : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetMyDLCContentBuilder Builder { get => new PublicGetMyDLCContentBuilder(); }

        public class PublicGetMyDLCContentBuilder
            : OperationBuilder<PublicGetMyDLCContentBuilder>
        {

            public bool? IncludeAllNamespaces { get; set; }





            internal PublicGetMyDLCContentBuilder() { }


            public PublicGetMyDLCContentBuilder SetIncludeAllNamespaces(bool _includeAllNamespaces)
            {
                IncludeAllNamespaces = _includeAllNamespaces;
                return this;
            }





            public PublicGetMyDLCContent Build(
                PublicGetMyDLCContentType type
            )
            {
                PublicGetMyDLCContent op = new PublicGetMyDLCContent(this,
                    type
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicGetMyDLCContent(PublicGetMyDLCContentBuilder builder,
            PublicGetMyDLCContentType type
        )
        {

            if (builder.IncludeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(builder.IncludeAllNamespaces)!;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetMyDLCContent(
            bool? includeAllNamespaces,
            PublicGetMyDLCContentType type
        )
        {

            if (includeAllNamespaces != null) QueryParams["includeAllNamespaces"] = Convert.ToString(includeAllNamespaces)!;
            if (type is not null) QueryParams["type"] = type.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/public/users/me/dlc/content";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.SimpleUserDLCRewardContentsResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.SimpleUserDLCRewardContentsResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.SimpleUserDLCRewardContentsResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.SimpleUserDLCRewardContentsResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicGetMyDLCContentType : StringEnum<PublicGetMyDLCContentType>
    {
        public static readonly PublicGetMyDLCContentType EPICGAMES
            = new PublicGetMyDLCContentType("EPICGAMES");

        public static readonly PublicGetMyDLCContentType OCULUS
            = new PublicGetMyDLCContentType("OCULUS");

        public static readonly PublicGetMyDLCContentType PSN
            = new PublicGetMyDLCContentType("PSN");

        public static readonly PublicGetMyDLCContentType STEAM
            = new PublicGetMyDLCContentType("STEAM");

        public static readonly PublicGetMyDLCContentType XBOX
            = new PublicGetMyDLCContentType("XBOX");


        public static implicit operator PublicGetMyDLCContentType(string value)
        {
            return NewValue(value);
        }

        public PublicGetMyDLCContentType(string enumValue)
            : base(enumValue)
        {

        }
    }

}