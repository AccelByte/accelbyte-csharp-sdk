// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryThirdPartySubscription
    ///
    /// Query subscriptions, default sort by updatedAt Other detail info:
    ///   * Returns :
    /// </summary>
    public class QueryThirdPartySubscription : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryThirdPartySubscriptionBuilder Builder { get => new QueryThirdPartySubscriptionBuilder(); }

        public class QueryThirdPartySubscriptionBuilder
            : OperationBuilder<QueryThirdPartySubscriptionBuilder>
        {

            public bool? ActiveOnly { get; set; }

            public string? GroupId { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public QueryThirdPartySubscriptionPlatform? Platform { get; set; }

            public string? ProductId { get; set; }

            public string? UserId { get; set; }





            internal QueryThirdPartySubscriptionBuilder() { }


            public QueryThirdPartySubscriptionBuilder SetActiveOnly(bool _activeOnly)
            {
                ActiveOnly = _activeOnly;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetGroupId(string _groupId)
            {
                GroupId = _groupId;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetPlatform(QueryThirdPartySubscriptionPlatform _platform)
            {
                Platform = _platform;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetProductId(string _productId)
            {
                ProductId = _productId;
                return this;
            }

            public QueryThirdPartySubscriptionBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public QueryThirdPartySubscription Build(
                string namespace_
            )
            {
                QueryThirdPartySubscription op = new QueryThirdPartySubscription(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QueryThirdPartySubscription(QueryThirdPartySubscriptionBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.ActiveOnly != null) QueryParams["activeOnly"] = Convert.ToString(builder.ActiveOnly)!;
            if (builder.GroupId is not null) QueryParams["groupId"] = builder.GroupId;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Platform is not null) QueryParams["platform"] = builder.Platform.Value;
            if (builder.ProductId is not null) QueryParams["productId"] = builder.ProductId;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryThirdPartySubscription(
            string namespace_,
            bool? activeOnly,
            string? groupId,
            int? limit,
            int? offset,
            QueryThirdPartySubscriptionPlatform? platform,
            string? productId,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (activeOnly != null) QueryParams["activeOnly"] = Convert.ToString(activeOnly)!;
            if (groupId is not null) QueryParams["groupId"] = groupId;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (platform is not null) QueryParams["platform"] = platform.Value;
            if (productId is not null) QueryParams["productId"] = productId;
            if (userId is not null) QueryParams["userId"] = userId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/iap/subscriptions";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ThirdPartyUserSubscriptionPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ThirdPartyUserSubscriptionPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ThirdPartyUserSubscriptionPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ThirdPartyUserSubscriptionPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryThirdPartySubscriptionPlatform : StringEnum<QueryThirdPartySubscriptionPlatform>
    {
        public static readonly QueryThirdPartySubscriptionPlatform APPLE
            = new QueryThirdPartySubscriptionPlatform("APPLE");

        public static readonly QueryThirdPartySubscriptionPlatform EPICGAMES
            = new QueryThirdPartySubscriptionPlatform("EPICGAMES");

        public static readonly QueryThirdPartySubscriptionPlatform GOOGLE
            = new QueryThirdPartySubscriptionPlatform("GOOGLE");

        public static readonly QueryThirdPartySubscriptionPlatform OCULUS
            = new QueryThirdPartySubscriptionPlatform("OCULUS");

        public static readonly QueryThirdPartySubscriptionPlatform PLAYSTATION
            = new QueryThirdPartySubscriptionPlatform("PLAYSTATION");

        public static readonly QueryThirdPartySubscriptionPlatform STADIA
            = new QueryThirdPartySubscriptionPlatform("STADIA");

        public static readonly QueryThirdPartySubscriptionPlatform STEAM
            = new QueryThirdPartySubscriptionPlatform("STEAM");

        public static readonly QueryThirdPartySubscriptionPlatform TWITCH
            = new QueryThirdPartySubscriptionPlatform("TWITCH");

        public static readonly QueryThirdPartySubscriptionPlatform XBOX
            = new QueryThirdPartySubscriptionPlatform("XBOX");


        public static implicit operator QueryThirdPartySubscriptionPlatform(string value)
        {
            return NewValue(value);
        }

        public QueryThirdPartySubscriptionPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}