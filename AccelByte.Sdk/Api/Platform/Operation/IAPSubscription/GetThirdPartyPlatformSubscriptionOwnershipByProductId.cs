// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// getThirdPartyPlatformSubscriptionOwnershipByProductId
    ///
    /// Get user third party subscription by subscription product id.
    /// </summary>
    public class GetThirdPartyPlatformSubscriptionOwnershipByProductId : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder Builder { get => new GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder(); }

        public class GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder
            : OperationBuilder<GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder>
        {





            internal GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder() { }






            public GetThirdPartyPlatformSubscriptionOwnershipByProductId Build(
                string namespace_,
                GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,
                string userId,
                string productId
            )
            {
                GetThirdPartyPlatformSubscriptionOwnershipByProductId op = new GetThirdPartyPlatformSubscriptionOwnershipByProductId(this,
                    namespace_,
                    platform,
                    userId,
                    productId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetThirdPartyPlatformSubscriptionOwnershipByProductId(GetThirdPartyPlatformSubscriptionOwnershipByProductIdBuilder builder,
            string namespace_,
            GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,
            string userId,
            string productId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;

            if (productId is not null) QueryParams["productId"] = productId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetThirdPartyPlatformSubscriptionOwnershipByProductId(
            string namespace_,
            GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform platform,
            string userId,
            string productId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["platform"] = platform.Value;
            PathParams["userId"] = userId;

            if (productId is not null) QueryParams["productId"] = productId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/users/{userId}/iap/subscriptions/platforms/{platform}/ownership/byProductId";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ThirdPartySubscriptionOwnership? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ThirdPartySubscriptionOwnership>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform : StringEnum<GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform>
    {
        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform APPLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("APPLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform EPICGAMES
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("EPICGAMES");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform GOOGLE
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("GOOGLE");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform OCULUS
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("OCULUS");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform PLAYSTATION
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("PLAYSTATION");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform STADIA
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("STADIA");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform STEAM
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("STEAM");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform TWITCH
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("TWITCH");

        public static readonly GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform XBOX
            = new GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform("XBOX");


        public static implicit operator GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform(string value)
        {
            return NewValue(value);
        }

        public GetThirdPartyPlatformSubscriptionOwnershipByProductIdPlatform(string enumValue)
            : base(enumValue)
        {

        }
    }

}