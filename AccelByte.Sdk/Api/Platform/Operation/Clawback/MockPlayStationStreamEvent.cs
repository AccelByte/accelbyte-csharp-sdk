// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// mockPlayStationStreamEvent
    ///
    /// Mock Sync PlayStation Clawback event..
    /// 
    /// Other detail info:
    /// 
    ///   * Required permission : resource=ADMIN:NAMESPACE:{namespace}:IAP:CLAWBACK, action=1(CREATE)
    /// </summary>
    public class MockPlayStationStreamEvent : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static MockPlayStationStreamEventBuilder Builder { get => new MockPlayStationStreamEventBuilder(); }

        public class MockPlayStationStreamEventBuilder
            : OperationBuilder<MockPlayStationStreamEventBuilder>
        {


            public Model.StreamEvent? Body { get; set; }




            internal MockPlayStationStreamEventBuilder() { }



            public MockPlayStationStreamEventBuilder SetBody(Model.StreamEvent _body)
            {
                Body = _body;
                return this;
            }




            public MockPlayStationStreamEvent Build(
                string namespace_
            )
            {
                MockPlayStationStreamEvent op = new MockPlayStationStreamEvent(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private MockPlayStationStreamEvent(MockPlayStationStreamEventBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public MockPlayStationStreamEvent(
            string namespace_,
            Model.StreamEvent body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/iap/clawback/playstation/mock";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            //do nothing since response code is "default".
        }
    }

}