// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// querySections
    ///
    /// This API is used to query sections.
    /// 
    /// Other detail info:
    /// 
    ///   * Returns : paginated sections
    /// </summary>
    public class QuerySections : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QuerySectionsBuilder Builder { get => new QuerySectionsBuilder(); }

        public class QuerySectionsBuilder
            : OperationBuilder<QuerySectionsBuilder>
        {

            public string? End { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public string? Start { get; set; }

            public string? StoreId { get; set; }

            public string? ViewId { get; set; }





            internal QuerySectionsBuilder() { }


            public QuerySectionsBuilder SetEnd(string _end)
            {
                End = _end;
                return this;
            }

            public QuerySectionsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QuerySectionsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QuerySectionsBuilder SetStart(string _start)
            {
                Start = _start;
                return this;
            }

            public QuerySectionsBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }

            public QuerySectionsBuilder SetViewId(string _viewId)
            {
                ViewId = _viewId;
                return this;
            }





            public QuerySections Build(
                string namespace_
            )
            {
                QuerySections op = new QuerySections(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QuerySections(QuerySectionsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.End is not null) QueryParams["end"] = builder.End;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Start is not null) QueryParams["start"] = builder.Start;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;
            if (builder.ViewId is not null) QueryParams["viewId"] = builder.ViewId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QuerySections(
            string namespace_,
            string? end,
            int? limit,
            int? offset,
            string? start,
            string? storeId,
            string? viewId
        )
        {
            PathParams["namespace"] = namespace_;

            if (end is not null) QueryParams["end"] = end;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (start is not null) QueryParams["start"] = start;
            if (storeId is not null) QueryParams["storeId"] = storeId;
            if (viewId is not null) QueryParams["viewId"] = viewId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/sections";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.SectionPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.SectionPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.SectionPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.SectionPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}