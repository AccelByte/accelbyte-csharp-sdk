// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryFulfillments
    ///
    ///  [Not Supported Yet In Starter] Query fulfillments in a namespace.
    /// Other detail info:
    /// 
    ///   * Returns : query fulfillments
    /// </summary>
    public class QueryFulfillments : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryFulfillmentsBuilder Builder { get => new QueryFulfillmentsBuilder(); }

        public class QueryFulfillmentsBuilder
            : OperationBuilder<QueryFulfillmentsBuilder>
        {

            public string? EndTime { get; set; }

            public int? Limit { get; set; }

            public int? Offset { get; set; }

            public string? StartTime { get; set; }

            public QueryFulfillmentsState? State { get; set; }

            public string? TransactionId { get; set; }

            public string? UserId { get; set; }





            internal QueryFulfillmentsBuilder() { }


            public QueryFulfillmentsBuilder SetEndTime(string _endTime)
            {
                EndTime = _endTime;
                return this;
            }

            public QueryFulfillmentsBuilder SetLimit(int _limit)
            {
                Limit = _limit;
                return this;
            }

            public QueryFulfillmentsBuilder SetOffset(int _offset)
            {
                Offset = _offset;
                return this;
            }

            public QueryFulfillmentsBuilder SetStartTime(string _startTime)
            {
                StartTime = _startTime;
                return this;
            }

            public QueryFulfillmentsBuilder SetState(QueryFulfillmentsState _state)
            {
                State = _state;
                return this;
            }

            public QueryFulfillmentsBuilder SetTransactionId(string _transactionId)
            {
                TransactionId = _transactionId;
                return this;
            }

            public QueryFulfillmentsBuilder SetUserId(string _userId)
            {
                UserId = _userId;
                return this;
            }





            public QueryFulfillments Build(
                string namespace_
            )
            {
                QueryFulfillments op = new QueryFulfillments(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QueryFulfillments(QueryFulfillmentsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.EndTime is not null) QueryParams["endTime"] = builder.EndTime;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.StartTime is not null) QueryParams["startTime"] = builder.StartTime;
            if (builder.State is not null) QueryParams["state"] = builder.State.Value;
            if (builder.TransactionId is not null) QueryParams["transactionId"] = builder.TransactionId;
            if (builder.UserId is not null) QueryParams["userId"] = builder.UserId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryFulfillments(
            string namespace_,
            string? endTime,
            int? limit,
            int? offset,
            string? startTime,
            QueryFulfillmentsState? state,
            string? transactionId,
            string? userId
        )
        {
            PathParams["namespace"] = namespace_;

            if (endTime is not null) QueryParams["endTime"] = endTime;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (startTime is not null) QueryParams["startTime"] = startTime;
            if (state is not null) QueryParams["state"] = state.Value;
            if (transactionId is not null) QueryParams["transactionId"] = transactionId;
            if (userId is not null) QueryParams["userId"] = userId;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/v2/admin/namespaces/{namespace}/fulfillments";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.FulfillmentHistoryPagingSlicedResult? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.FulfillmentHistoryPagingSlicedResult>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.FulfillmentHistoryPagingSlicedResult>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.FulfillmentHistoryPagingSlicedResult>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryFulfillmentsState : StringEnum<QueryFulfillmentsState>
    {
        public static readonly QueryFulfillmentsState FULFILLED
            = new QueryFulfillmentsState("FULFILLED");

        public static readonly QueryFulfillmentsState FULFILLFAILED
            = new QueryFulfillmentsState("FULFILL_FAILED");

        public static readonly QueryFulfillmentsState REVOKED
            = new QueryFulfillmentsState("REVOKED");

        public static readonly QueryFulfillmentsState REVOKEFAILED
            = new QueryFulfillmentsState("REVOKE_FAILED");


        public static implicit operator QueryFulfillmentsState(string value)
        {
            return NewValue(value);
        }

        public QueryFulfillmentsState(string enumValue)
            : base(enumValue)
        {

        }
    }

}