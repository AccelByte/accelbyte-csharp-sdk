// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// createItemTypeConfig
    ///
    /// This API is used to create an item type config.
    /// 
    /// *  Required permission : resource="ADMIN:ITEM:CONFIG", action=1 (CREATE)
    /// *  Returns : item type config data
    /// </summary>
    public class CreateItemTypeConfig : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateItemTypeConfigBuilder Builder { get => new CreateItemTypeConfigBuilder(); }

        public class CreateItemTypeConfigBuilder
            : OperationBuilder<CreateItemTypeConfigBuilder>
        {


            public Model.ItemTypeConfigCreate? Body { get; set; }




            internal CreateItemTypeConfigBuilder() { }



            public CreateItemTypeConfigBuilder SetBody(Model.ItemTypeConfigCreate _body)
            {
                Body = _body;
                return this;
            }




            public CreateItemTypeConfig Build(
            )
            {
                CreateItemTypeConfig op = new CreateItemTypeConfig(this
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private CreateItemTypeConfig(CreateItemTypeConfigBuilder builder
        )
        {





            BodyParams = builder.Body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateItemTypeConfig(
            Model.ItemTypeConfigCreate body
        )
        {





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/items/configs";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)201)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}