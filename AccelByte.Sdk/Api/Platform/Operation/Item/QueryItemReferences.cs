// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Platform.Operation
{
    /// <summary>
    /// queryItemReferences
    ///
    /// This API is used to get references for an item
    /// </summary>
    public class QueryItemReferences : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static QueryItemReferencesBuilder Builder { get => new QueryItemReferencesBuilder(); }

        public class QueryItemReferencesBuilder
            : OperationBuilder<QueryItemReferencesBuilder>
        {

            public List<QueryItemReferencesFeaturesToCheck>? FeaturesToCheck { get; set; }

            public string? StoreId { get; set; }





            internal QueryItemReferencesBuilder() { }


            public QueryItemReferencesBuilder SetFeaturesToCheck(List<QueryItemReferencesFeaturesToCheck> _featuresToCheck)
            {
                FeaturesToCheck = _featuresToCheck;
                return this;
            }

            public QueryItemReferencesBuilder SetStoreId(string _storeId)
            {
                StoreId = _storeId;
                return this;
            }





            public QueryItemReferences Build(
                string itemId,
                string namespace_
            )
            {
                QueryItemReferences op = new QueryItemReferences(this,
                    itemId,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private QueryItemReferences(QueryItemReferencesBuilder builder,
            string itemId,
            string namespace_
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (builder.FeaturesToCheck is not null) QueryParams["featuresToCheck"] = builder.FeaturesToCheck;
            if (builder.StoreId is not null) QueryParams["storeId"] = builder.StoreId;



            CollectionFormatMap["featuresToCheck"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public QueryItemReferences(
            string itemId,
            string namespace_,
            List<QueryItemReferencesFeaturesToCheck>? featuresToCheck,
            string? storeId
        )
        {
            PathParams["itemId"] = itemId;
            PathParams["namespace"] = namespace_;

            if (featuresToCheck is not null) QueryParams["featuresToCheck"] = featuresToCheck;
            if (storeId is not null) QueryParams["storeId"] = storeId;



            CollectionFormatMap["featuresToCheck"] = "multi";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/platform/admin/namespaces/{namespace}/items/{itemId}/references";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ItemDependency? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ItemDependency>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ItemDependency>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ItemDependency>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class QueryItemReferencesFeaturesToCheck : StringEnum<QueryItemReferencesFeaturesToCheck>
    {
        public static readonly QueryItemReferencesFeaturesToCheck CAMPAIGN
            = new QueryItemReferencesFeaturesToCheck("CAMPAIGN");

        public static readonly QueryItemReferencesFeaturesToCheck CATALOG
            = new QueryItemReferencesFeaturesToCheck("CATALOG");

        public static readonly QueryItemReferencesFeaturesToCheck DLC
            = new QueryItemReferencesFeaturesToCheck("DLC");

        public static readonly QueryItemReferencesFeaturesToCheck ENTITLEMENT
            = new QueryItemReferencesFeaturesToCheck("ENTITLEMENT");

        public static readonly QueryItemReferencesFeaturesToCheck IAP
            = new QueryItemReferencesFeaturesToCheck("IAP");

        public static readonly QueryItemReferencesFeaturesToCheck REWARD
            = new QueryItemReferencesFeaturesToCheck("REWARD");


        public static implicit operator QueryItemReferencesFeaturesToCheck(string value)
        {
            return NewValue(value);
        }

        public QueryItemReferencesFeaturesToCheck(string enumValue)
            : base(enumValue)
        {

        }
    }

}