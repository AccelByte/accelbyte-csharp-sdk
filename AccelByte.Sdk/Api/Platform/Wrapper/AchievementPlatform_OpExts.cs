// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;
using AccelByte.Sdk.Api.Platform.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class PlatformAchievementPlatform_OpExts
    {
        public static void Execute(
            this UnlockSteamUserAchievement.UnlockSteamUserAchievementBuilder builder,
            SteamAchievementUpdateRequest body,
            string namespace_,
            string userId
        )
        {
            UnlockSteamUserAchievement op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).UnlockSteamUserAchievement(op);
        }
        public static async Task ExecuteAsync(
            this UnlockSteamUserAchievement.UnlockSteamUserAchievementBuilder builder,
            SteamAchievementUpdateRequest body,
            string namespace_,
            string userId
        )
        {
            UnlockSteamUserAchievement op = builder.Build(
                body,
                namespace_,
                userId
            );

            await ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).UnlockSteamUserAchievementAsync(op);
        }
        public static Platform.Model.XblUserAchievements? Execute(
            this GetXblUserAchievements.GetXblUserAchievementsBuilder builder,
            string namespace_,
            string userId,
            string xboxUserId
        )
        {
            GetXblUserAchievements op = builder.Build(
                namespace_,
                userId,
                xboxUserId
            );

            return ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).GetXblUserAchievements(op);
        }
        public static async Task<Platform.Model.XblUserAchievements?> ExecuteAsync(
            this GetXblUserAchievements.GetXblUserAchievementsBuilder builder,
            string namespace_,
            string userId,
            string xboxUserId
        )
        {
            GetXblUserAchievements op = builder.Build(
                namespace_,
                userId,
                xboxUserId
            );

            return await ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).GetXblUserAchievementsAsync(op);
        }
        public static void Execute(
            this UpdateXblUserAchievement.UpdateXblUserAchievementBuilder builder,
            XblAchievementUpdateRequest body,
            string namespace_,
            string userId
        )
        {
            UpdateXblUserAchievement op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).UpdateXblUserAchievement(op);
        }
        public static async Task ExecuteAsync(
            this UpdateXblUserAchievement.UpdateXblUserAchievementBuilder builder,
            XblAchievementUpdateRequest body,
            string namespace_,
            string userId
        )
        {
            UpdateXblUserAchievement op = builder.Build(
                body,
                namespace_,
                userId
            );

            await ((Platform.Wrapper.AchievementPlatform)builder.WrapperObject!).UpdateXblUserAchievementAsync(op);
        }
    }
}