// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Platform.Model;
using AccelByte.Sdk.Api.Platform.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Platform.Wrapper
{
    public class Store
    {
        private readonly AccelByteSDK _sdk;

        public Store(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public GetCatalogConfig.GetCatalogConfigBuilder GetCatalogConfigOp
        {
            get { return Operation.GetCatalogConfig.Builder.SetWrapperObject(this); }
        }
        public UpdateCatalogConfig.UpdateCatalogConfigBuilder UpdateCatalogConfigOp
        {
            get { return Operation.UpdateCatalogConfig.Builder.SetWrapperObject(this); }
        }
        public ListStores.ListStoresBuilder ListStoresOp
        {
            get { return Operation.ListStores.Builder.SetWrapperObject(this); }
        }
        public CreateStore.CreateStoreBuilder CreateStoreOp
        {
            get { return Operation.CreateStore.Builder.SetWrapperObject(this); }
        }
        public GetCatalogDefinition.GetCatalogDefinitionBuilder GetCatalogDefinitionOp
        {
            get { return Operation.GetCatalogDefinition.Builder.SetWrapperObject(this); }
        }
        public DownloadCSVTemplates.DownloadCSVTemplatesBuilder DownloadCSVTemplatesOp
        {
            get { return Operation.DownloadCSVTemplates.Builder.SetWrapperObject(this); }
        }
        public ExportStoreByCSV.ExportStoreByCSVBuilder ExportStoreByCSVOp
        {
            get { return Operation.ExportStoreByCSV.Builder.SetWrapperObject(this); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public ImportStore.ImportStoreBuilder ImportStoreOp
        {
            get { return Operation.ImportStore.Builder.SetWrapperObject(this); }
        }
        public GetPublishedStore.GetPublishedStoreBuilder GetPublishedStoreOp
        {
            get { return Operation.GetPublishedStore.Builder.SetWrapperObject(this); }
        }
        public DeletePublishedStore.DeletePublishedStoreBuilder DeletePublishedStoreOp
        {
            get { return Operation.DeletePublishedStore.Builder.SetWrapperObject(this); }
        }
        public GetPublishedStoreBackup.GetPublishedStoreBackupBuilder GetPublishedStoreBackupOp
        {
            get { return Operation.GetPublishedStoreBackup.Builder.SetWrapperObject(this); }
        }
        public RollbackPublishedStore.RollbackPublishedStoreBuilder RollbackPublishedStoreOp
        {
            get { return Operation.RollbackPublishedStore.Builder.SetWrapperObject(this); }
        }
        public GetStore.GetStoreBuilder GetStoreOp
        {
            get { return Operation.GetStore.Builder.SetWrapperObject(this); }
        }
        public UpdateStore.UpdateStoreBuilder UpdateStoreOp
        {
            get { return Operation.UpdateStore.Builder.SetWrapperObject(this); }
        }
        public DeleteStore.DeleteStoreBuilder DeleteStoreOp
        {
            get { return Operation.DeleteStore.Builder.SetWrapperObject(this); }
        }
        public CloneStore.CloneStoreBuilder CloneStoreOp
        {
            get { return Operation.CloneStore.Builder.SetWrapperObject(this); }
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public ExportStore.ExportStoreBuilder ExportStoreOp
        {
            get { return Operation.ExportStore.Builder.SetWrapperObject(this); }
        }
        public QueryImportHistory.QueryImportHistoryBuilder QueryImportHistoryOp
        {
            get { return Operation.QueryImportHistory.Builder.SetWrapperObject(this); }
        }
        public ImportStoreByCSV.ImportStoreByCSVBuilder ImportStoreByCSVOp
        {
            get { return Operation.ImportStoreByCSV.Builder.SetWrapperObject(this); }
        }
        public PublicListStores.PublicListStoresBuilder PublicListStoresOp
        {
            get { return Operation.PublicListStores.Builder.SetWrapperObject(this); }
        }
        public ImportStore1.ImportStore1Builder ImportStore1Op
        {
            get { return Operation.ImportStore1.Builder.SetWrapperObject(this); }
        }
        public ExportStore1.ExportStore1Builder ExportStore1Op
        {
            get { return Operation.ExportStore1.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.CatalogConfigInfo? GetCatalogConfig(GetCatalogConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CatalogConfigInfo?> GetCatalogConfigAsync(GetCatalogConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.CatalogConfigInfo? UpdateCatalogConfig(UpdateCatalogConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.CatalogConfigInfo?> UpdateCatalogConfigAsync(UpdateCatalogConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.StoreInfo>? ListStores(ListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.StoreInfo>?> ListStoresAsync(ListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? CreateStore(CreateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> CreateStoreAsync(CreateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.CatalogDefinitionInfo>? GetCatalogDefinition(GetCatalogDefinition input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.CatalogDefinitionInfo>?> GetCatalogDefinitionAsync(GetCatalogDefinition input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? DownloadCSVTemplates(DownloadCSVTemplates input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> DownloadCSVTemplatesAsync(DownloadCSVTemplates input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? ExportStoreByCSV(ExportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStoreByCSVAsync(ExportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Model.StoreInfo? ImportStore(ImportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> ImportStoreAsync(ImportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public Model.StoreInfo? GetPublishedStore(GetPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> GetPublishedStoreAsync(GetPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? DeletePublishedStore(DeletePublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> DeletePublishedStoreAsync(DeletePublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreBackupInfo? GetPublishedStoreBackup(GetPublishedStoreBackup input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreBackupInfo?> GetPublishedStoreBackupAsync(GetPublishedStoreBackup input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? RollbackPublishedStore(RollbackPublishedStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> RollbackPublishedStoreAsync(RollbackPublishedStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? GetStore(GetStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> GetStoreAsync(GetStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? UpdateStore(UpdateStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> UpdateStoreAsync(UpdateStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? DeleteStore(DeleteStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> DeleteStoreAsync(DeleteStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.StoreInfo? CloneStore(CloneStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.StoreInfo?> CloneStoreAsync(CloneStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning disable ab_deprecated_operation
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public Stream? ExportStore(ExportStore input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStoreAsync(ExportStore input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
#pragma warning restore ab_deprecated_operation
        public Model.ImportStoreHistoryPagingResult? QueryImportHistory(QueryImportHistory input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreHistoryPagingResult?> QueryImportHistoryAsync(QueryImportHistory input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ImportStoreResult? ImportStoreByCSV(ImportStoreByCSV input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreResult?> ImportStoreByCSVAsync(ImportStoreByCSV input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.StoreInfo>? PublicListStores(PublicListStores input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.StoreInfo>?> PublicListStoresAsync(PublicListStores input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ImportStoreResult? ImportStore1(ImportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ImportStoreResult?> ImportStore1Async(ImportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Stream? ExportStore1(ExportStore1 input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> ExportStore1Async(ExportStore1 input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}