// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Chat.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Chat.Operation
{
    /// <summary>
    /// adminTopicMembers
    ///
    /// Get topic members.
    /// </summary>
    public class AdminTopicMembers : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminTopicMembersBuilder Builder { get => new AdminTopicMembersBuilder(); }

        public class AdminTopicMembersBuilder
            : OperationBuilder<AdminTopicMembersBuilder>
        {

            public bool? IsBanned { get; set; }

            public bool? IsModerator { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? ShardId { get; set; }





            internal AdminTopicMembersBuilder() { }


            public AdminTopicMembersBuilder SetIsBanned(bool _isBanned)
            {
                IsBanned = _isBanned;
                return this;
            }

            public AdminTopicMembersBuilder SetIsModerator(bool _isModerator)
            {
                IsModerator = _isModerator;
                return this;
            }

            public AdminTopicMembersBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminTopicMembersBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminTopicMembersBuilder SetShardId(string _shardId)
            {
                ShardId = _shardId;
                return this;
            }





            public AdminTopicMembers Build(
                string namespace_,
                string topic
            )
            {
                AdminTopicMembers op = new AdminTopicMembers(this,
                    namespace_,                    
                    topic                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private AdminTopicMembers(AdminTopicMembersBuilder builder,
            string namespace_,
            string topic
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;
            
            if (builder.IsBanned != null) QueryParams["isBanned"] = Convert.ToString(builder.IsBanned)!;
            if (builder.IsModerator != null) QueryParams["isModerator"] = Convert.ToString(builder.IsModerator)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.ShardId is not null) QueryParams["shardId"] = builder.ShardId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminTopicMembers(
            string namespace_,            
            string topic,            
            bool? isBanned,            
            bool? isModerator,            
            long? limit,            
            long? offset,            
            string? shardId            
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["topic"] = topic;
            
            if (isBanned != null) QueryParams["isBanned"] = Convert.ToString(isBanned)!;
            if (isModerator != null) QueryParams["isModerator"] = Convert.ToString(isModerator)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (shardId is not null) QueryParams["shardId"] = shardId;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/chat/admin/namespaces/{namespace}/topic/{topic}/members";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.ModelsTopicMemberWithPaginationResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsTopicMemberWithPaginationResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsTopicMemberWithPaginationResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsTopicMemberWithPaginationResponse>(payload, ResponseJsonOptions);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}