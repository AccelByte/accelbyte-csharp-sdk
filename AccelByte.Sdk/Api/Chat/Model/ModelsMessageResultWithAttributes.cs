// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;

namespace AccelByte.Sdk.Api.Chat.Model
{
    public class ModelsMessageResultWithAttributes : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("action")]
        public string? Action { get; set; }

        [JsonPropertyName("attributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? Attributes { get; set; }

        [JsonPropertyName("cencoredWords")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? CencoredWords { get; set; }

        [JsonPropertyName("classifications")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? Classifications { get; set; }

        [JsonPropertyName("finalMessage")]
        public string? FinalMessage { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("referenceId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ReferenceId { get; set; }

        [JsonPropertyName("timestamp")]
        public long? Timestamp { get; set; }

    }

    public class ModelsMessageResultWithAttributes<T1> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("action")]
        public string? Action { get; set; }

        [JsonPropertyName("attributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T1? Attributes { get; set; }

        [JsonPropertyName("cencoredWords")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? CencoredWords { get; set; }

        [JsonPropertyName("classifications")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? Classifications { get; set; }

        [JsonPropertyName("finalMessage")]
        public string? FinalMessage { get; set; }

        [JsonPropertyName("id")]
        public string? Id { get; set; }

        [JsonPropertyName("referenceId")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ReferenceId { get; set; }

        [JsonPropertyName("timestamp")]
        public long? Timestamp { get; set; }

    }

}