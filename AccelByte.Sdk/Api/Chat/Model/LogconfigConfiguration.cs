// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Chat.Model
{
    public class LogconfigConfiguration : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("logLevel")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public LogconfigConfigurationLogLevel? LogLevel { get; set; }

        [JsonPropertyName("socketLogEnabled")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? SocketLogEnabled { get; set; }

    }



    public class LogconfigConfigurationLogLevel : StringEnum<LogconfigConfigurationLogLevel>
    {
        public static readonly LogconfigConfigurationLogLevel Debug
            = new LogconfigConfigurationLogLevel("debug");

        public static readonly LogconfigConfigurationLogLevel Error
            = new LogconfigConfigurationLogLevel("error");

        public static readonly LogconfigConfigurationLogLevel Fatal
            = new LogconfigConfigurationLogLevel("fatal");

        public static readonly LogconfigConfigurationLogLevel Info
            = new LogconfigConfigurationLogLevel("info");

        public static readonly LogconfigConfigurationLogLevel Panic
            = new LogconfigConfigurationLogLevel("panic");

        public static readonly LogconfigConfigurationLogLevel Trace
            = new LogconfigConfigurationLogLevel("trace");

        public static readonly LogconfigConfigurationLogLevel Warning
            = new LogconfigConfigurationLogLevel("warning");


        public static implicit operator LogconfigConfigurationLogLevel(string value)
        {
            return NewValue(value);
        }

        public LogconfigConfigurationLogLevel(string enumValue)
            : base(enumValue)
        {

        }
    }
}