// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Dsartifact.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Dsartifact.Operation
{
    /// <summary>
    /// downloadServerArtifacts
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:DSAM:ARTIFACT [READ]
    /// 
    /// Required scope: social
    /// 
    /// This endpoint will download dedicated server's Artifact file (.zip).
    /// </summary>
    public class DownloadServerArtifacts : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static DownloadServerArtifactsBuilder Builder { get => new DownloadServerArtifactsBuilder(); }

        public class DownloadServerArtifactsBuilder
            : OperationBuilder<DownloadServerArtifactsBuilder>
        {





            internal DownloadServerArtifactsBuilder() { }






            public DownloadServerArtifacts Build(
                string namespace_,
                string podName
            )
            {
                DownloadServerArtifacts op = new DownloadServerArtifacts(this,
                    namespace_,
                    podName
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private DownloadServerArtifacts(DownloadServerArtifactsBuilder builder,
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public DownloadServerArtifacts(
            string namespace_,
            string podName
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["podName"] = podName;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsartifact/namespaces/{namespace}/servers/{podName}/artifacts/download";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json", "text/x-log" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)200)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}