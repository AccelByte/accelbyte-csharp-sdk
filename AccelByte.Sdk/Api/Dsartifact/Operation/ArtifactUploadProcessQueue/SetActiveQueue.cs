// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Dsartifact.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Dsartifact.Operation
{
    /// <summary>
    /// setActiveQueue
    ///
    /// ```
    /// Required permission: ADMIN:DSAM:ARTIFACT:QUEUE [UPDATE]
    /// 
    /// This endpoint is used to set a queue entry as the current active queue
    /// for artifact uploading process on a node
    /// ```
    /// </summary>
    public class SetActiveQueue : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static SetActiveQueueBuilder Builder { get => new SetActiveQueueBuilder(); }

        public class SetActiveQueueBuilder
            : OperationBuilder<SetActiveQueueBuilder>
        {





            internal SetActiveQueueBuilder() { }






            public SetActiveQueue Build(
                string nodeIP,
                string podName
            )
            {
                SetActiveQueue op = new SetActiveQueue(this,
                    nodeIP,
                    podName
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private SetActiveQueue(SetActiveQueueBuilder builder,
            string nodeIP,
            string podName
        )
        {

            if (nodeIP is not null) QueryParams["nodeIP"] = nodeIP;
            if (podName is not null) QueryParams["podName"] = podName;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public SetActiveQueue(
            string nodeIP,
            string podName
        )
        {

            if (nodeIP is not null) QueryParams["nodeIP"] = nodeIP;
            if (podName is not null) QueryParams["podName"] = podName;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsartifact/artifacts/queues/active";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json", "text/x-log" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}