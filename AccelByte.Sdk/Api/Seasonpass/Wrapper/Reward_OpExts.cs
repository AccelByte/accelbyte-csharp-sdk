// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Seasonpass.Model;
using AccelByte.Sdk.Api.Seasonpass.Operation;
using AccelByte.Sdk.Api.Seasonpass.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class SeasonpassReward_OpExts
    {
        public static List<Seasonpass.Model.RewardInfo>? Execute(
            this QueryRewards.QueryRewardsBuilder builder,
            string namespace_,
            string seasonId
        )
        {
            QueryRewards op = builder.Build(
                namespace_,
                seasonId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).QueryRewards(op);
        }
        public static async Task<List<Seasonpass.Model.RewardInfo>?> ExecuteAsync(
            this QueryRewards.QueryRewardsBuilder builder,
            string namespace_,
            string seasonId
        )
        {
            QueryRewards op = builder.Build(
                namespace_,
                seasonId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).QueryRewardsAsync(op);
        }
        public static Seasonpass.Model.RewardInfo? Execute(
            this CreateReward.CreateRewardBuilder builder,
            string namespace_,
            string seasonId
        )
        {
            CreateReward op = builder.Build(
                namespace_,
                seasonId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).CreateReward(op);
        }
        public static async Task<Seasonpass.Model.RewardInfo?> ExecuteAsync(
            this CreateReward.CreateRewardBuilder builder,
            string namespace_,
            string seasonId
        )
        {
            CreateReward op = builder.Build(
                namespace_,
                seasonId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).CreateRewardAsync(op);
        }
        public static Seasonpass.Model.RewardInfo? Execute(
            this GetReward.GetRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            GetReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).GetReward(op);
        }
        public static async Task<Seasonpass.Model.RewardInfo?> ExecuteAsync(
            this GetReward.GetRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            GetReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).GetRewardAsync(op);
        }
        public static void Execute(
            this DeleteReward.DeleteRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            DeleteReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).DeleteReward(op);
        }
        public static async Task ExecuteAsync(
            this DeleteReward.DeleteRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            DeleteReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).DeleteRewardAsync(op);
        }
        public static Seasonpass.Model.RewardInfo? Execute(
            this UpdateReward.UpdateRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            UpdateReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).UpdateReward(op);
        }
        public static async Task<Seasonpass.Model.RewardInfo?> ExecuteAsync(
            this UpdateReward.UpdateRewardBuilder builder,
            string code,
            string namespace_,
            string seasonId
        )
        {
            UpdateReward op = builder.Build(
                code,
                namespace_,
                seasonId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).UpdateRewardAsync(op);
        }
        public static Seasonpass.Model.ClaimableRewards? Execute(
            this PublicClaimUserReward.PublicClaimUserRewardBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicClaimUserReward op = builder.Build(
                namespace_,
                userId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicClaimUserReward(op);
        }
        public static async Task<Seasonpass.Model.ClaimableRewards?> ExecuteAsync(
            this PublicClaimUserReward.PublicClaimUserRewardBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicClaimUserReward op = builder.Build(
                namespace_,
                userId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicClaimUserRewardAsync(op);
        }

        public static Seasonpass.Model.ClaimableRewards<T1, T2>? Execute<T1, T2>(
            this PublicClaimUserReward.PublicClaimUserRewardBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicClaimUserReward op = builder.Build(
                namespace_,
                userId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicClaimUserReward<T1, T2>(op);
        }
        public static async Task<Seasonpass.Model.ClaimableRewards<T1, T2>?> ExecuteAsync<T1, T2>(
            this PublicClaimUserReward.PublicClaimUserRewardBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicClaimUserReward op = builder.Build(
                namespace_,
                userId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicClaimUserRewardAsync<T1, T2>(op);
        }
        public static Seasonpass.Model.ClaimableRewards? Execute(
            this PublicBulkClaimUserRewards.PublicBulkClaimUserRewardsBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicBulkClaimUserRewards op = builder.Build(
                namespace_,
                userId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicBulkClaimUserRewards(op);
        }
        public static async Task<Seasonpass.Model.ClaimableRewards?> ExecuteAsync(
            this PublicBulkClaimUserRewards.PublicBulkClaimUserRewardsBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicBulkClaimUserRewards op = builder.Build(
                namespace_,
                userId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicBulkClaimUserRewardsAsync(op);
        }

        public static Seasonpass.Model.ClaimableRewards<T1, T2>? Execute<T1, T2>(
            this PublicBulkClaimUserRewards.PublicBulkClaimUserRewardsBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicBulkClaimUserRewards op = builder.Build(
                namespace_,
                userId
            );

            return ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicBulkClaimUserRewards<T1, T2>(op);
        }
        public static async Task<Seasonpass.Model.ClaimableRewards<T1, T2>?> ExecuteAsync<T1, T2>(
            this PublicBulkClaimUserRewards.PublicBulkClaimUserRewardsBuilder builder,
            string namespace_,
            string userId
        )
        {
            PublicBulkClaimUserRewards op = builder.Build(
                namespace_,
                userId
            );

            return await ((Seasonpass.Wrapper.Reward)builder.WrapperObject!).PublicBulkClaimUserRewardsAsync<T1, T2>(op);
        }
    }
}