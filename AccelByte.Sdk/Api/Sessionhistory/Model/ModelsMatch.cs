// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;

namespace AccelByte.Sdk.Api.Sessionhistory.Model
{
    public class ModelsMatch : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("Backfill")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Backfill { get; set; }

        [JsonPropertyName("ClientVersion")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ClientVersion { get; set; }

        [JsonPropertyName("MatchAttributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Dictionary<string, object>? MatchAttributes { get; set; }

        [JsonPropertyName("RegionPreference")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? RegionPreference { get; set; }

        [JsonPropertyName("ServerName")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ServerName { get; set; }

        [JsonPropertyName("Teams")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsTeam>? Teams { get; set; }

        [JsonPropertyName("Tickets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsTicket>? Tickets { get; set; }

    }

    public class ModelsMatch<T1> : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("Backfill")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public bool? Backfill { get; set; }

        [JsonPropertyName("ClientVersion")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ClientVersion { get; set; }

        [JsonPropertyName("MatchAttributes")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T1? MatchAttributes { get; set; }

        [JsonPropertyName("RegionPreference")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<string>? RegionPreference { get; set; }

        [JsonPropertyName("ServerName")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? ServerName { get; set; }

        [JsonPropertyName("Teams")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsTeam>? Teams { get; set; }

        [JsonPropertyName("Tickets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsTicket>? Tickets { get; set; }

    }

}