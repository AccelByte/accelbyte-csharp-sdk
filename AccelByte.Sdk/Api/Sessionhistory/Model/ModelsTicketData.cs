// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;

namespace AccelByte.Sdk.Api.Sessionhistory.Model
{
    public class ModelsTicketData : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("action")]
        public string? Action { get; set; }

        [JsonPropertyName("activeAllianceRule")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ModelsAllianceRule? ActiveAllianceRule { get; set; }

        [JsonPropertyName("activeMatchingRule")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<ModelsMatchingRule>? ActiveMatchingRule { get; set; }

        [JsonPropertyName("function")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Function { get; set; }

        [JsonPropertyName("gameMode")]
        public string? GameMode { get; set; }

        [JsonPropertyName("isBackfillMatch")]
        public bool? IsBackfillMatch { get; set; }

        [JsonPropertyName("isRuleSetFlexed")]
        public bool? IsRuleSetFlexed { get; set; }

        [JsonPropertyName("iteration")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? Iteration { get; set; }

        [JsonPropertyName("matchID")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? MatchID { get; set; }

        [JsonPropertyName("namespace")]
        public string? Namespace { get; set; }

        [JsonPropertyName("partyID")]
        public string? PartyID { get; set; }

        [JsonPropertyName("podName")]
        public string? PodName { get; set; }

        [JsonPropertyName("remainingPlayersPerTicket")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public List<int>? RemainingPlayersPerTicket { get; set; }

        [JsonPropertyName("remainingTickets")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RemainingTickets { get; set; }

        [JsonPropertyName("session")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public ModelsMatchmakingResult? Session { get; set; }

        [JsonPropertyName("sessionTickID")]
        public string? SessionTickID { get; set; }

        [JsonPropertyName("tickID")]
        public long? TickID { get; set; }

        [JsonPropertyName("timeToMatchSec")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public double? TimeToMatchSec { get; set; }

        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get; set; }

        [JsonPropertyName("unbackfillReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UnbackfillReason { get; set; }

        [JsonPropertyName("unmatchReason")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UnmatchReason { get; set; }

    }


}