// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Sessionhistory.Model;
using AccelByte.Sdk.Api.Sessionhistory.Operation;
using AccelByte.Sdk.Api.Sessionhistory.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class SessionhistoryXRay_OpExts
    {
        public static Sessionhistory.Model.ApimodelsXRayTicketObservabilityResponse? Execute(
            this CreateXrayTicketObservability.CreateXrayTicketObservabilityBuilder builder,
            ApimodelsXRayTicketObservabilityRequest body,
            string namespace_
        )
        {
            CreateXrayTicketObservability op = builder.Build(
                body,
                namespace_
            );

            return ((Sessionhistory.Wrapper.XRay)builder.WrapperObject!).CreateXrayTicketObservability(op);
        }
        public static async Task<Sessionhistory.Model.ApimodelsXRayTicketObservabilityResponse?> ExecuteAsync(
            this CreateXrayTicketObservability.CreateXrayTicketObservabilityBuilder builder,
            ApimodelsXRayTicketObservabilityRequest body,
            string namespace_
        )
        {
            CreateXrayTicketObservability op = builder.Build(
                body,
                namespace_
            );

            return await ((Sessionhistory.Wrapper.XRay)builder.WrapperObject!).CreateXrayTicketObservabilityAsync(op);
        }
        public static Sessionhistory.Model.ApimodelsXRayBulkTicketObservabilityResponse? Execute(
            this CreateXrayBulkTicketObservability.CreateXrayBulkTicketObservabilityBuilder builder,
            ApimodelsXRayBulkTicketObservabilityRequest body,
            string namespace_
        )
        {
            CreateXrayBulkTicketObservability op = builder.Build(
                body,
                namespace_
            );

            return ((Sessionhistory.Wrapper.XRay)builder.WrapperObject!).CreateXrayBulkTicketObservability(op);
        }
        public static async Task<Sessionhistory.Model.ApimodelsXRayBulkTicketObservabilityResponse?> ExecuteAsync(
            this CreateXrayBulkTicketObservability.CreateXrayBulkTicketObservabilityBuilder builder,
            ApimodelsXRayBulkTicketObservabilityRequest body,
            string namespace_
        )
        {
            CreateXrayBulkTicketObservability op = builder.Build(
                body,
                namespace_
            );

            return await ((Sessionhistory.Wrapper.XRay)builder.WrapperObject!).CreateXrayBulkTicketObservabilityAsync(op);
        }
    }
}