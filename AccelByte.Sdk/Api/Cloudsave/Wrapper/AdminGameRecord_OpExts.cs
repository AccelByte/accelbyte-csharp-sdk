// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Cloudsave.Model;
using AccelByte.Sdk.Api.Cloudsave.Operation;
using AccelByte.Sdk.Api.Cloudsave.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class CloudsaveAdminGameRecord_OpExts
    {
        public static Cloudsave.Model.ModelsListGameRecordKeysResponse? Execute(
            this ListGameRecordsHandlerV1.ListGameRecordsHandlerV1Builder builder,
            string namespace_,
            long limit,
            long offset
        )
        {
            ListGameRecordsHandlerV1 op = builder.Build(
                namespace_,
                limit,
                offset
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).ListGameRecordsHandlerV1(op);
        }
        public static async Task<Cloudsave.Model.ModelsListGameRecordKeysResponse?> ExecuteAsync(
            this ListGameRecordsHandlerV1.ListGameRecordsHandlerV1Builder builder,
            string namespace_,
            long limit,
            long offset
        )
        {
            ListGameRecordsHandlerV1 op = builder.Build(
                namespace_,
                limit,
                offset
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).ListGameRecordsHandlerV1Async(op);
        }
        public static Cloudsave.Model.ModelsGameRecordAdminResponse? Execute(
            this AdminGetGameRecordHandlerV1.AdminGetGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminGetGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminGetGameRecordHandlerV1(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse?> ExecuteAsync(
            this AdminGetGameRecordHandlerV1.AdminGetGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminGetGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminGetGameRecordHandlerV1Async(op);
        }

        public static Cloudsave.Model.ModelsGameRecordAdminResponse<T1>? Execute<T1>(
            this AdminGetGameRecordHandlerV1.AdminGetGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminGetGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminGetGameRecordHandlerV1<T1>(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse<T1>?> ExecuteAsync<T1>(
            this AdminGetGameRecordHandlerV1.AdminGetGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminGetGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminGetGameRecordHandlerV1Async<T1>(op);
        }
        public static Cloudsave.Model.ModelsGameRecordAdminResponse? Execute(
            this AdminPutGameRecordHandlerV1.AdminPutGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPutGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPutGameRecordHandlerV1(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse?> ExecuteAsync(
            this AdminPutGameRecordHandlerV1.AdminPutGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPutGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPutGameRecordHandlerV1Async(op);
        }

        public static Cloudsave.Model.ModelsGameRecordAdminResponse<T1>? Execute<T1>(
            this AdminPutGameRecordHandlerV1.AdminPutGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPutGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPutGameRecordHandlerV1<T1>(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse<T1>?> ExecuteAsync<T1>(
            this AdminPutGameRecordHandlerV1.AdminPutGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPutGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPutGameRecordHandlerV1Async<T1>(op);
        }
        public static Cloudsave.Model.ModelsGameRecordAdminResponse? Execute(
            this AdminPostGameRecordHandlerV1.AdminPostGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPostGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPostGameRecordHandlerV1(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse?> ExecuteAsync(
            this AdminPostGameRecordHandlerV1.AdminPostGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPostGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPostGameRecordHandlerV1Async(op);
        }

        public static Cloudsave.Model.ModelsGameRecordAdminResponse<T1>? Execute<T1>(
            this AdminPostGameRecordHandlerV1.AdminPostGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPostGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPostGameRecordHandlerV1<T1>(op);
        }
        public static async Task<Cloudsave.Model.ModelsGameRecordAdminResponse<T1>?> ExecuteAsync<T1>(
            this AdminPostGameRecordHandlerV1.AdminPostGameRecordHandlerV1Builder builder,
            ModelsGameRecordRequest body,
            string key,
            string namespace_
        )
        {
            AdminPostGameRecordHandlerV1 op = builder.Build(
                body,
                key,
                namespace_
            );

            return await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminPostGameRecordHandlerV1Async<T1>(op);
        }
        public static void Execute(
            this AdminDeleteGameRecordHandlerV1.AdminDeleteGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminDeleteGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminDeleteGameRecordHandlerV1(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeleteGameRecordHandlerV1.AdminDeleteGameRecordHandlerV1Builder builder,
            string key,
            string namespace_
        )
        {
            AdminDeleteGameRecordHandlerV1 op = builder.Build(
                key,
                namespace_
            );

            await ((Cloudsave.Wrapper.AdminGameRecord)builder.WrapperObject!).AdminDeleteGameRecordHandlerV1Async(op);
        }
    }
}