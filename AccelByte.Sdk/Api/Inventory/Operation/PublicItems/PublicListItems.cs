// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Inventory.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// PublicListItems
    ///
    /// 
    /// Listing all user's owned items in an inventory.
    /// The response body will be in the form of standard pagination.
    /// </summary>
    public class PublicListItems : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListItemsBuilder Builder { get => new PublicListItemsBuilder(); }

        public class PublicListItemsBuilder
            : OperationBuilder<PublicListItemsBuilder>
        {

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public PublicListItemsSortBy? SortBy { get; set; }

            public string? SourceItemId { get; set; }

            public string? Tags { get; set; }





            internal PublicListItemsBuilder() { }


            public PublicListItemsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicListItemsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicListItemsBuilder SetSortBy(PublicListItemsSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public PublicListItemsBuilder SetSourceItemId(string _sourceItemId)
            {
                SourceItemId = _sourceItemId;
                return this;
            }

            public PublicListItemsBuilder SetTags(string _tags)
            {
                Tags = _tags;
                return this;
            }





            public PublicListItems Build(
                string inventoryId,
                string namespace_
            )
            {
                PublicListItems op = new PublicListItems(this,
                    inventoryId,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicListItems(PublicListItemsBuilder builder,
            string inventoryId,
            string namespace_
        )
        {
            PathParams["inventoryId"] = inventoryId;
            PathParams["namespace"] = namespace_;

            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.SourceItemId is not null) QueryParams["sourceItemId"] = builder.SourceItemId;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicListItems(
            string inventoryId,
            string namespace_,
            long? limit,
            long? offset,
            PublicListItemsSortBy? sortBy,
            string? sourceItemId,
            string? tags
        )
        {
            PathParams["inventoryId"] = inventoryId;
            PathParams["namespace"] = namespace_;

            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (sourceItemId is not null) QueryParams["sourceItemId"] = sourceItemId;
            if (tags is not null) QueryParams["tags"] = tags;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/public/namespaces/{namespace}/users/me/inventories/{inventoryId}/items";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelsListItemResp? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelsListItemResp>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelsListItemResp>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsListItemResp>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicListItemsSortBy : StringEnum<PublicListItemsSortBy>
    {
        public static readonly PublicListItemsSortBy CreatedAt
            = new PublicListItemsSortBy("createdAt");

        public static readonly PublicListItemsSortBy CreatedAtasc
            = new PublicListItemsSortBy("createdAt:asc");

        public static readonly PublicListItemsSortBy CreatedAtdesc
            = new PublicListItemsSortBy("createdAt:desc");

        public static readonly PublicListItemsSortBy UpdatedAt
            = new PublicListItemsSortBy("updatedAt");

        public static readonly PublicListItemsSortBy UpdatedAtasc
            = new PublicListItemsSortBy("updatedAt:asc");

        public static readonly PublicListItemsSortBy UpdatedAtdesc
            = new PublicListItemsSortBy("updatedAt:desc");


        public static implicit operator PublicListItemsSortBy(string value)
        {
            return NewValue(value);
        }

        public PublicListItemsSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}