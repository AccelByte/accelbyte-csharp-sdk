// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Inventory.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Inventory.Operation
{
    /// <summary>
    /// PublicListInventories
    ///
    /// 
    /// Listing all my inventories in a namespace.
    /// The response body will be in the form of standard pagination.
    /// </summary>
    public class PublicListInventories : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListInventoriesBuilder Builder { get => new PublicListInventoriesBuilder(); }

        public class PublicListInventoriesBuilder
            : OperationBuilder<PublicListInventoriesBuilder>
        {

            public string? InventoryConfigurationCode { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public PublicListInventoriesSortBy? SortBy { get; set; }





            internal PublicListInventoriesBuilder() { }


            public PublicListInventoriesBuilder SetInventoryConfigurationCode(string _inventoryConfigurationCode)
            {
                InventoryConfigurationCode = _inventoryConfigurationCode;
                return this;
            }

            public PublicListInventoriesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicListInventoriesBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicListInventoriesBuilder SetSortBy(PublicListInventoriesSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }





            public PublicListInventories Build(
                string namespace_
            )
            {
                PublicListInventories op = new PublicListInventories(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicListInventories(PublicListInventoriesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.InventoryConfigurationCode is not null) QueryParams["inventoryConfigurationCode"] = builder.InventoryConfigurationCode;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicListInventories(
            string namespace_,
            string? inventoryConfigurationCode,
            long? limit,
            long? offset,
            PublicListInventoriesSortBy? sortBy
        )
        {
            PathParams["namespace"] = namespace_;

            if (inventoryConfigurationCode is not null) QueryParams["inventoryConfigurationCode"] = inventoryConfigurationCode;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/inventory/v1/public/namespaces/{namespace}/users/me/inventories";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApimodelsListInventoryResp? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApimodelsListInventoryResp>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApimodelsListInventoryResp>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApimodelsListInventoryResp>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicListInventoriesSortBy : StringEnum<PublicListInventoriesSortBy>
    {
        public static readonly PublicListInventoriesSortBy CreatedAt
            = new PublicListInventoriesSortBy("createdAt");

        public static readonly PublicListInventoriesSortBy CreatedAtasc
            = new PublicListInventoriesSortBy("createdAt:asc");

        public static readonly PublicListInventoriesSortBy CreatedAtdesc
            = new PublicListInventoriesSortBy("createdAt:desc");

        public static readonly PublicListInventoriesSortBy UpdatedAt
            = new PublicListInventoriesSortBy("updatedAt");

        public static readonly PublicListInventoriesSortBy UpdatedAtasc
            = new PublicListInventoriesSortBy("updatedAt:asc");

        public static readonly PublicListInventoriesSortBy UpdatedAtdesc
            = new PublicListInventoriesSortBy("updatedAt:desc");


        public static implicit operator PublicListInventoriesSortBy(string value)
        {
            return NewValue(value);
        }

        public PublicListInventoriesSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}