// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Inventory.Model;
using AccelByte.Sdk.Api.Inventory.Operation;
using AccelByte.Sdk.Api.Inventory.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class InventoryAdminIntegrationConfigurations_OpExts
    {
        public static Inventory.Model.ApimodelsListIntegrationConfigurationsResp? Execute(
            this AdminListIntegrationConfigurations.AdminListIntegrationConfigurationsBuilder builder,
            string namespace_
        )
        {
            AdminListIntegrationConfigurations op = builder.Build(
                namespace_
            );

            return ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminListIntegrationConfigurations(op);
        }
        public static async Task<Inventory.Model.ApimodelsListIntegrationConfigurationsResp?> ExecuteAsync(
            this AdminListIntegrationConfigurations.AdminListIntegrationConfigurationsBuilder builder,
            string namespace_
        )
        {
            AdminListIntegrationConfigurations op = builder.Build(
                namespace_
            );

            return await ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminListIntegrationConfigurationsAsync(op);
        }
        public static Inventory.Model.ApimodelsIntegrationConfigurationResp? Execute(
            this AdminCreateIntegrationConfiguration.AdminCreateIntegrationConfigurationBuilder builder,
            ApimodelsCreateIntegrationConfigurationReq body,
            string namespace_
        )
        {
            AdminCreateIntegrationConfiguration op = builder.Build(
                body,
                namespace_
            );

            return ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminCreateIntegrationConfiguration(op);
        }
        public static async Task<Inventory.Model.ApimodelsIntegrationConfigurationResp?> ExecuteAsync(
            this AdminCreateIntegrationConfiguration.AdminCreateIntegrationConfigurationBuilder builder,
            ApimodelsCreateIntegrationConfigurationReq body,
            string namespace_
        )
        {
            AdminCreateIntegrationConfiguration op = builder.Build(
                body,
                namespace_
            );

            return await ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminCreateIntegrationConfigurationAsync(op);
        }
        public static Inventory.Model.ApimodelsIntegrationConfigurationResp? Execute(
            this AdminUpdateIntegrationConfiguration.AdminUpdateIntegrationConfigurationBuilder builder,
            ApimodelsUpdateIntegrationConfigurationReq body,
            string integrationConfigurationId,
            string namespace_
        )
        {
            AdminUpdateIntegrationConfiguration op = builder.Build(
                body,
                integrationConfigurationId,
                namespace_
            );

            return ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminUpdateIntegrationConfiguration(op);
        }
        public static async Task<Inventory.Model.ApimodelsIntegrationConfigurationResp?> ExecuteAsync(
            this AdminUpdateIntegrationConfiguration.AdminUpdateIntegrationConfigurationBuilder builder,
            ApimodelsUpdateIntegrationConfigurationReq body,
            string integrationConfigurationId,
            string namespace_
        )
        {
            AdminUpdateIntegrationConfiguration op = builder.Build(
                body,
                integrationConfigurationId,
                namespace_
            );

            return await ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminUpdateIntegrationConfigurationAsync(op);
        }
        public static Inventory.Model.ApimodelsIntegrationConfigurationResp? Execute(
            this AdminUpdateStatusIntegrationConfiguration.AdminUpdateStatusIntegrationConfigurationBuilder builder,
            ApimodelsUpdateStatusIntegrationConfigurationReq body,
            string integrationConfigurationId,
            string namespace_
        )
        {
            AdminUpdateStatusIntegrationConfiguration op = builder.Build(
                body,
                integrationConfigurationId,
                namespace_
            );

            return ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminUpdateStatusIntegrationConfiguration(op);
        }
        public static async Task<Inventory.Model.ApimodelsIntegrationConfigurationResp?> ExecuteAsync(
            this AdminUpdateStatusIntegrationConfiguration.AdminUpdateStatusIntegrationConfigurationBuilder builder,
            ApimodelsUpdateStatusIntegrationConfigurationReq body,
            string integrationConfigurationId,
            string namespace_
        )
        {
            AdminUpdateStatusIntegrationConfiguration op = builder.Build(
                body,
                integrationConfigurationId,
                namespace_
            );

            return await ((Inventory.Wrapper.AdminIntegrationConfigurations)builder.WrapperObject!).AdminUpdateStatusIntegrationConfigurationAsync(op);
        }
    }
}