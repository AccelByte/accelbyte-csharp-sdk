// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Match2.Operation
{
    /// <summary>
    /// AdminQueryBackfill
    ///
    /// Admin Query backfill ticket
    /// </summary>
    public class AdminQueryBackfill : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminQueryBackfillBuilder Builder { get => new AdminQueryBackfillBuilder(); }

        public class AdminQueryBackfillBuilder
            : OperationBuilder<AdminQueryBackfillBuilder>
        {

            public DateTime? FromTime { get; set; }

            public bool? IsActive { get; set; }

            public long? Limit { get; set; }

            public string? MatchPool { get; set; }

            public long? Offset { get; set; }

            public string? PlayerID { get; set; }

            public string? Region { get; set; }

            public string? SessionID { get; set; }

            public DateTime? ToTime { get; set; }





            internal AdminQueryBackfillBuilder() { }


            public AdminQueryBackfillBuilder SetFromTime(DateTime _fromTime)
            {
                FromTime = _fromTime;
                return this;
            }

            public AdminQueryBackfillBuilder SetIsActive(bool _isActive)
            {
                IsActive = _isActive;
                return this;
            }

            public AdminQueryBackfillBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public AdminQueryBackfillBuilder SetMatchPool(string _matchPool)
            {
                MatchPool = _matchPool;
                return this;
            }

            public AdminQueryBackfillBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public AdminQueryBackfillBuilder SetPlayerID(string _playerID)
            {
                PlayerID = _playerID;
                return this;
            }

            public AdminQueryBackfillBuilder SetRegion(string _region)
            {
                Region = _region;
                return this;
            }

            public AdminQueryBackfillBuilder SetSessionID(string _sessionID)
            {
                SessionID = _sessionID;
                return this;
            }

            public AdminQueryBackfillBuilder SetToTime(DateTime _toTime)
            {
                ToTime = _toTime;
                return this;
            }





            public AdminQueryBackfill Build(
                string namespace_
            )
            {
                AdminQueryBackfill op = new AdminQueryBackfill(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminQueryBackfill(AdminQueryBackfillBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.FromTime != null)
                QueryParams["fromTime"] = builder.FromTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (builder.IsActive != null) QueryParams["isActive"] = Convert.ToString(builder.IsActive)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.MatchPool is not null) QueryParams["matchPool"] = builder.MatchPool;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.PlayerID is not null) QueryParams["playerID"] = builder.PlayerID;
            if (builder.Region is not null) QueryParams["region"] = builder.Region;
            if (builder.SessionID is not null) QueryParams["sessionID"] = builder.SessionID;
            if (builder.ToTime != null)
                QueryParams["toTime"] = builder.ToTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminQueryBackfill(
            string namespace_,
            DateTime? fromTime,
            bool? isActive,
            long? limit,
            string? matchPool,
            long? offset,
            string? playerID,
            string? region,
            string? sessionID,
            DateTime? toTime
        )
        {
            PathParams["namespace"] = namespace_;

            if (fromTime != null)
                QueryParams["fromTime"] = fromTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (isActive != null) QueryParams["isActive"] = Convert.ToString(isActive)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (matchPool is not null) QueryParams["matchPool"] = matchPool;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (playerID is not null) QueryParams["playerID"] = playerID;
            if (region is not null) QueryParams["region"] = region;
            if (sessionID is not null) QueryParams["sessionID"] = sessionID;
            if (toTime != null)
                QueryParams["toTime"] = toTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/match2/v1/namespaces/{namespace}/backfill";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ApiListBackfillQueryResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ApiListBackfillQueryResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ApiListBackfillQueryResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ApiListBackfillQueryResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}