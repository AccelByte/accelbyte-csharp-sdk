// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;
using AccelByte.Sdk.Api.Match2.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class Match2PlayFeatureFlag_OpExts
    {
        public static Match2.Model.ModelsPlayFeatureFlag? Execute(
            this AdminGetPlayFeatureFlag.AdminGetPlayFeatureFlagBuilder builder,
            string namespace_
        )
        {
            AdminGetPlayFeatureFlag op = builder.Build(
                namespace_
            );

            return ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminGetPlayFeatureFlag(op);
        }
        public static async Task<Match2.Model.ModelsPlayFeatureFlag?> ExecuteAsync(
            this AdminGetPlayFeatureFlag.AdminGetPlayFeatureFlagBuilder builder,
            string namespace_
        )
        {
            AdminGetPlayFeatureFlag op = builder.Build(
                namespace_
            );

            return await ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminGetPlayFeatureFlagAsync(op);
        }
        public static Match2.Model.ModelsPlayFeatureFlag? Execute(
            this AdminUpsertPlayFeatureFlag.AdminUpsertPlayFeatureFlagBuilder builder,
            ModelsPlayFeatureFlag body,
            string namespace_
        )
        {
            AdminUpsertPlayFeatureFlag op = builder.Build(
                body,
                namespace_
            );

            return ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminUpsertPlayFeatureFlag(op);
        }
        public static async Task<Match2.Model.ModelsPlayFeatureFlag?> ExecuteAsync(
            this AdminUpsertPlayFeatureFlag.AdminUpsertPlayFeatureFlagBuilder builder,
            ModelsPlayFeatureFlag body,
            string namespace_
        )
        {
            AdminUpsertPlayFeatureFlag op = builder.Build(
                body,
                namespace_
            );

            return await ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminUpsertPlayFeatureFlagAsync(op);
        }
        public static void Execute(
            this AdminDeletePlayFeatureFlag.AdminDeletePlayFeatureFlagBuilder builder,
            string namespace_
        )
        {
            AdminDeletePlayFeatureFlag op = builder.Build(
                namespace_
            );

            ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminDeletePlayFeatureFlag(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeletePlayFeatureFlag.AdminDeletePlayFeatureFlagBuilder builder,
            string namespace_
        )
        {
            AdminDeletePlayFeatureFlag op = builder.Build(
                namespace_
            );

            await ((Match2.Wrapper.PlayFeatureFlag)builder.WrapperObject!).AdminDeletePlayFeatureFlagAsync(op);
        }
    }
}