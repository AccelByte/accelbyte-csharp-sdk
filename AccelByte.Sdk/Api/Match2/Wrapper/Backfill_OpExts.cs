// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;
using AccelByte.Sdk.Api.Match2.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class Match2Backfill_OpExts
    {
        public static Match2.Model.ApiListBackfillQueryResponse? Execute(
            this AdminQueryBackfill.AdminQueryBackfillBuilder builder,
            string namespace_
        )
        {
            AdminQueryBackfill op = builder.Build(
                namespace_
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).AdminQueryBackfill(op);
        }
        public static async Task<Match2.Model.ApiListBackfillQueryResponse?> ExecuteAsync(
            this AdminQueryBackfill.AdminQueryBackfillBuilder builder,
            string namespace_
        )
        {
            AdminQueryBackfill op = builder.Build(
                namespace_
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).AdminQueryBackfillAsync(op);
        }
        public static Match2.Model.ApiBackfillCreateResponse? Execute(
            this CreateBackfill.CreateBackfillBuilder builder,
            ApiBackFillCreateRequest body,
            string namespace_
        )
        {
            CreateBackfill op = builder.Build(
                body,
                namespace_
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).CreateBackfill(op);
        }
        public static async Task<Match2.Model.ApiBackfillCreateResponse?> ExecuteAsync(
            this CreateBackfill.CreateBackfillBuilder builder,
            ApiBackFillCreateRequest body,
            string namespace_
        )
        {
            CreateBackfill op = builder.Build(
                body,
                namespace_
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).CreateBackfillAsync(op);
        }
        public static Match2.Model.ApiBackfillProposalResponse? Execute(
            this GetBackfillProposal.GetBackfillProposalBuilder builder,
            string namespace_,
            string sessionID
        )
        {
            GetBackfillProposal op = builder.Build(
                namespace_,
                sessionID
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).GetBackfillProposal(op);
        }
        public static async Task<Match2.Model.ApiBackfillProposalResponse?> ExecuteAsync(
            this GetBackfillProposal.GetBackfillProposalBuilder builder,
            string namespace_,
            string sessionID
        )
        {
            GetBackfillProposal op = builder.Build(
                namespace_,
                sessionID
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).GetBackfillProposalAsync(op);
        }
        public static Match2.Model.ApiBackfillGetResponse? Execute(
            this GetBackfill.GetBackfillBuilder builder,
            string backfillID,
            string namespace_
        )
        {
            GetBackfill op = builder.Build(
                backfillID,
                namespace_
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).GetBackfill(op);
        }
        public static async Task<Match2.Model.ApiBackfillGetResponse?> ExecuteAsync(
            this GetBackfill.GetBackfillBuilder builder,
            string backfillID,
            string namespace_
        )
        {
            GetBackfill op = builder.Build(
                backfillID,
                namespace_
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).GetBackfillAsync(op);
        }
        public static void Execute(
            this DeleteBackfill.DeleteBackfillBuilder builder,
            string backfillID,
            string namespace_
        )
        {
            DeleteBackfill op = builder.Build(
                backfillID,
                namespace_
            );

            ((Match2.Wrapper.Backfill)builder.WrapperObject!).DeleteBackfill(op);
        }
        public static async Task ExecuteAsync(
            this DeleteBackfill.DeleteBackfillBuilder builder,
            string backfillID,
            string namespace_
        )
        {
            DeleteBackfill op = builder.Build(
                backfillID,
                namespace_
            );

            await ((Match2.Wrapper.Backfill)builder.WrapperObject!).DeleteBackfillAsync(op);
        }
        public static Match2.Model.ModelsGameSession? Execute(
            this AcceptBackfill.AcceptBackfillBuilder builder,
            ApiBackFillAcceptRequest body,
            string backfillID,
            string namespace_
        )
        {
            AcceptBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).AcceptBackfill(op);
        }
        public static async Task<Match2.Model.ModelsGameSession?> ExecuteAsync(
            this AcceptBackfill.AcceptBackfillBuilder builder,
            ApiBackFillAcceptRequest body,
            string backfillID,
            string namespace_
        )
        {
            AcceptBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).AcceptBackfillAsync(op);
        }

        public static Match2.Model.ModelsGameSession<T1>? Execute<T1>(
            this AcceptBackfill.AcceptBackfillBuilder builder,
            ApiBackFillAcceptRequest body,
            string backfillID,
            string namespace_
        )
        {
            AcceptBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            return ((Match2.Wrapper.Backfill)builder.WrapperObject!).AcceptBackfill<T1>(op);
        }
        public static async Task<Match2.Model.ModelsGameSession<T1>?> ExecuteAsync<T1>(
            this AcceptBackfill.AcceptBackfillBuilder builder,
            ApiBackFillAcceptRequest body,
            string backfillID,
            string namespace_
        )
        {
            AcceptBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            return await ((Match2.Wrapper.Backfill)builder.WrapperObject!).AcceptBackfillAsync<T1>(op);
        }
        public static void Execute(
            this RejectBackfill.RejectBackfillBuilder builder,
            ApiBackFillRejectRequest body,
            string backfillID,
            string namespace_
        )
        {
            RejectBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            ((Match2.Wrapper.Backfill)builder.WrapperObject!).RejectBackfill(op);
        }
        public static async Task ExecuteAsync(
            this RejectBackfill.RejectBackfillBuilder builder,
            ApiBackFillRejectRequest body,
            string backfillID,
            string namespace_
        )
        {
            RejectBackfill op = builder.Build(
                body,
                backfillID,
                namespace_
            );

            await ((Match2.Wrapper.Backfill)builder.WrapperObject!).RejectBackfillAsync(op);
        }
    }
}