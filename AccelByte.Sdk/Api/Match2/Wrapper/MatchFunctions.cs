// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Match2.Model;
using AccelByte.Sdk.Api.Match2.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Match2.Wrapper
{
    public class MatchFunctions
    {
        private readonly AccelByteSDK _sdk;

        public MatchFunctions(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public MatchFunctionList.MatchFunctionListBuilder MatchFunctionListOp
        {
            get { return Operation.MatchFunctionList.Builder.SetWrapperObject(this); }
        }
        public CreateMatchFunction.CreateMatchFunctionBuilder CreateMatchFunctionOp
        {
            get { return Operation.CreateMatchFunction.Builder.SetWrapperObject(this); }
        }
        public MatchFunctionGet.MatchFunctionGetBuilder MatchFunctionGetOp
        {
            get { return Operation.MatchFunctionGet.Builder.SetWrapperObject(this); }
        }
        public UpdateMatchFunction.UpdateMatchFunctionBuilder UpdateMatchFunctionOp
        {
            get { return Operation.UpdateMatchFunction.Builder.SetWrapperObject(this); }
        }
        public DeleteMatchFunction.DeleteMatchFunctionBuilder DeleteMatchFunctionOp
        {
            get { return Operation.DeleteMatchFunction.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.ApiListMatchFunctionsResponse? MatchFunctionList(MatchFunctionList input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiListMatchFunctionsResponse?> MatchFunctionListAsync(MatchFunctionList input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CreateMatchFunction(CreateMatchFunction input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CreateMatchFunctionAsync(CreateMatchFunction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiMatchFunctionConfig? MatchFunctionGet(MatchFunctionGet input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiMatchFunctionConfig?> MatchFunctionGetAsync(MatchFunctionGet input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ApiMatchFunctionConfig? UpdateMatchFunction(UpdateMatchFunction input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ApiMatchFunctionConfig?> UpdateMatchFunctionAsync(UpdateMatchFunction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteMatchFunction(DeleteMatchFunction input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteMatchFunctionAsync(DeleteMatchFunction input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}