// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Dsmc.Model;
using AccelByte.Sdk.Api.Dsmc.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Dsmc.Wrapper
{
    public class ImageConfig
    {
        private readonly AccelByteSDK _sdk;

        public ImageConfig(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public UpdateImage.UpdateImageBuilder UpdateImageOp
        {
            get { return Operation.UpdateImage.Builder.SetWrapperObject(this); }
        }
        public CreateImage.CreateImageBuilder CreateImageOp
        {
            get { return Operation.CreateImage.Builder.SetWrapperObject(this); }
        }
        public CreateImagePatch.CreateImagePatchBuilder CreateImagePatchOp
        {
            get { return Operation.CreateImagePatch.Builder.SetWrapperObject(this); }
        }
        public ListImages.ListImagesBuilder ListImagesOp
        {
            get { return Operation.ListImages.Builder.SetWrapperObject(this); }
        }
        public DeleteImage.DeleteImageBuilder DeleteImageOp
        {
            get { return Operation.DeleteImage.Builder.SetWrapperObject(this); }
        }
        public GetImageLimit.GetImageLimitBuilder GetImageLimitOp
        {
            get { return Operation.GetImageLimit.Builder.SetWrapperObject(this); }
        }
        public DeleteImagePatch.DeleteImagePatchBuilder DeleteImagePatchOp
        {
            get { return Operation.DeleteImagePatch.Builder.SetWrapperObject(this); }
        }
        public GetImageDetail.GetImageDetailBuilder GetImageDetailOp
        {
            get { return Operation.GetImageDetail.Builder.SetWrapperObject(this); }
        }
        public GetImagePatches.GetImagePatchesBuilder GetImagePatchesOp
        {
            get { return Operation.GetImagePatches.Builder.SetWrapperObject(this); }
        }
        public GetImagePatchDetail.GetImagePatchDetailBuilder GetImagePatchDetailOp
        {
            get { return Operation.GetImagePatchDetail.Builder.SetWrapperObject(this); }
        }
        public GetRepository.GetRepositoryBuilder GetRepositoryOp
        {
            get { return Operation.GetRepository.Builder.SetWrapperObject(this); }
        }
        public CreateRepository.CreateRepositoryBuilder CreateRepositoryOp
        {
            get { return Operation.CreateRepository.Builder.SetWrapperObject(this); }
        }
        public ListImagesClient.ListImagesClientBuilder ListImagesClientOp
        {
            get { return Operation.ListImagesClient.Builder.SetWrapperObject(this); }
        }
        public ImageLimitClient.ImageLimitClientBuilder ImageLimitClientOp
        {
            get { return Operation.ImageLimitClient.Builder.SetWrapperObject(this); }
        }
        public ImageDetailClient.ImageDetailClientBuilder ImageDetailClientOp
        {
            get { return Operation.ImageDetailClient.Builder.SetWrapperObject(this); }
        }
        #endregion

        public void UpdateImage(UpdateImage input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task UpdateImageAsync(UpdateImage input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CreateImage(CreateImage input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CreateImageAsync(CreateImage input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CreateImagePatch(CreateImagePatch input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CreateImagePatchAsync(CreateImagePatch input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListImageResponse? ListImages(ListImages input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListImageResponse?> ListImagesAsync(ListImages input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteImage(DeleteImage input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteImageAsync(DeleteImage input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetImageLimitResponse? GetImageLimit(GetImageLimit input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetImageLimitResponse?> GetImageLimitAsync(GetImageLimit input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteImagePatch(DeleteImagePatch input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteImagePatchAsync(DeleteImagePatch input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetImageDetailResponse? GetImageDetail(GetImageDetail input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetImageDetailResponse?> GetImageDetailAsync(GetImageDetail input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListImagePatchesResponse? GetImagePatches(GetImagePatches input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListImagePatchesResponse?> GetImagePatchesAsync(GetImagePatches input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetImagePatchDetailResponse? GetImagePatchDetail(GetImagePatchDetail input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetImagePatchDetailResponse?> GetImagePatchDetailAsync(GetImagePatchDetail input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsRepositoryRecord? GetRepository(GetRepository input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsRepositoryRecord?> GetRepositoryAsync(GetRepository input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CreateRepository(CreateRepository input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CreateRepositoryAsync(CreateRepository input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListImageResponse? ListImagesClient(ListImagesClient input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListImageResponse?> ListImagesClientAsync(ListImagesClient input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetImageLimitResponse? ImageLimitClient(ImageLimitClient input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetImageLimitResponse?> ImageLimitClientAsync(ImageLimitClient input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsGetImageDetailResponse? ImageDetailClient(ImageDetailClient input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsGetImageDetailResponse?> ImageDetailClientAsync(ImageDetailClient input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}