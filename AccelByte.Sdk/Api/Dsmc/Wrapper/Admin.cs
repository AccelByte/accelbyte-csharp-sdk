// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Dsmc.Model;
using AccelByte.Sdk.Api.Dsmc.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Dsmc.Wrapper
{
    public class Admin
    {
        private readonly AccelByteSDK _sdk;

        public Admin(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public GetWorkerConfig.GetWorkerConfigBuilder GetWorkerConfigOp
        {
            get { return Operation.GetWorkerConfig.Builder.SetWrapperObject(this); }
        }
        public UpdateWorkerConfig.UpdateWorkerConfigBuilder UpdateWorkerConfigOp
        {
            get { return Operation.UpdateWorkerConfig.Builder.SetWrapperObject(this); }
        }
        public CreateWorkerConfig.CreateWorkerConfigBuilder CreateWorkerConfigOp
        {
            get { return Operation.CreateWorkerConfig.Builder.SetWrapperObject(this); }
        }
        public AddBuffer.AddBufferBuilder AddBufferOp
        {
            get { return Operation.AddBuffer.Builder.SetWrapperObject(this); }
        }
        public ListServer.ListServerBuilder ListServerOp
        {
            get { return Operation.ListServer.Builder.SetWrapperObject(this); }
        }
        public CountServer.CountServerBuilder CountServerOp
        {
            get { return Operation.CountServer.Builder.SetWrapperObject(this); }
        }
        public CountServerDetailed.CountServerDetailedBuilder CountServerDetailedOp
        {
            get { return Operation.CountServerDetailed.Builder.SetWrapperObject(this); }
        }
        public ListLocalServer.ListLocalServerBuilder ListLocalServerOp
        {
            get { return Operation.ListLocalServer.Builder.SetWrapperObject(this); }
        }
        public DeleteLocalServer.DeleteLocalServerBuilder DeleteLocalServerOp
        {
            get { return Operation.DeleteLocalServer.Builder.SetWrapperObject(this); }
        }
        public GetServer.GetServerBuilder GetServerOp
        {
            get { return Operation.GetServer.Builder.SetWrapperObject(this); }
        }
        public DeleteServer.DeleteServerBuilder DeleteServerOp
        {
            get { return Operation.DeleteServer.Builder.SetWrapperObject(this); }
        }
        public ListSession.ListSessionBuilder ListSessionOp
        {
            get { return Operation.ListSession.Builder.SetWrapperObject(this); }
        }
        public CountSession.CountSessionBuilder CountSessionOp
        {
            get { return Operation.CountSession.Builder.SetWrapperObject(this); }
        }
        public DeleteSession.DeleteSessionBuilder DeleteSessionOp
        {
            get { return Operation.DeleteSession.Builder.SetWrapperObject(this); }
        }
        public RunGhostCleanerRequestHandler.RunGhostCleanerRequestHandlerBuilder RunGhostCleanerRequestHandlerOp
        {
            get { return Operation.RunGhostCleanerRequestHandler.Builder.SetWrapperObject(this); }
        }
        public RunZombieCleanerRequestHandler.RunZombieCleanerRequestHandlerBuilder RunZombieCleanerRequestHandlerOp
        {
            get { return Operation.RunZombieCleanerRequestHandler.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.ModelsWorkerConfig? GetWorkerConfig(GetWorkerConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsWorkerConfig?> GetWorkerConfigAsync(GetWorkerConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void UpdateWorkerConfig(UpdateWorkerConfig input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task UpdateWorkerConfigAsync(UpdateWorkerConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsWorkerConfig? CreateWorkerConfig(CreateWorkerConfig input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsWorkerConfig?> CreateWorkerConfigAsync(CreateWorkerConfig input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsAddBufferResponse? AddBuffer(AddBuffer input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsAddBufferResponse?> AddBufferAsync(AddBuffer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListServerResponse? ListServer(ListServer input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListServerResponse?> ListServerAsync(ListServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCountServerResponse? CountServer(CountServer input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCountServerResponse?> CountServerAsync(CountServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsDetailedCountServerResponse? CountServerDetailed(CountServerDetailed input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsDetailedCountServerResponse?> CountServerDetailedAsync(CountServerDetailed input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListServerResponse? ListLocalServer(ListLocalServer input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListServerResponse?> ListLocalServerAsync(ListLocalServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteLocalServer(DeleteLocalServer input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteLocalServerAsync(DeleteLocalServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsServerDetailsResponse? GetServer(GetServer input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsServerDetailsResponse?> GetServerAsync(GetServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteServer(DeleteServer input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteServerAsync(DeleteServer input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListSessionResponse? ListSession(ListSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListSessionResponse?> ListSessionAsync(ListSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsCountSessionResponse? CountSession(CountSession input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsCountSessionResponse?> CountSessionAsync(CountSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void DeleteSession(DeleteSession input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task DeleteSessionAsync(DeleteSession input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void RunGhostCleanerRequestHandler(RunGhostCleanerRequestHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task RunGhostCleanerRequestHandlerAsync(RunGhostCleanerRequestHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void RunZombieCleanerRequestHandler(RunZombieCleanerRequestHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task RunZombieCleanerRequestHandlerAsync(RunZombieCleanerRequestHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}