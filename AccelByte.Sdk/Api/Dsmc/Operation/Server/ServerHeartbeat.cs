// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Dsmc.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Dsmc.Operation
{
    /// <summary>
    /// ServerHeartbeat
    ///
    /// ```
    /// Required permission: NAMESPACE:{namespace}:DSM:SERVER [UPDATE]
    /// Required scope: social
    /// 
    /// This endpoint is intended to be called by dedicated server
    /// which already has claimed to extend its lifetime.
    /// DS should call this periodically after it claimed.
    /// The timeframe between 2 heartbeat call should be smaller than
    /// the session timout in the deployment configuration.
    /// If the last heartbeat is longer than the session timout, the server.
    /// will be considered as expired and will be terminated by DSMC.```
    /// </summary>
    public class ServerHeartbeat : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ServerHeartbeatBuilder Builder { get => new ServerHeartbeatBuilder(); }

        public class ServerHeartbeatBuilder
            : OperationBuilder<ServerHeartbeatBuilder>
        {





            internal ServerHeartbeatBuilder() { }






            public ServerHeartbeat Build(
                ModelsDSHeartbeatRequest body,
                string namespace_
            )
            {
                ServerHeartbeat op = new ServerHeartbeat(this,
                    body,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private ServerHeartbeat(ServerHeartbeatBuilder builder,
            ModelsDSHeartbeatRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ServerHeartbeat(
            string namespace_,
            Model.ModelsDSHeartbeatRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/dsmcontroller/namespaces/{namespace}/servers/heartbeat";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)202)
            {
                return;
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}