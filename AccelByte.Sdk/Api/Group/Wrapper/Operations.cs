// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Group.Model;
using AccelByte.Sdk.Api.Group.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Group.Wrapper
{
    public class Operations
    {
        private readonly AccelByteSDK _sdk;

        public Operations(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public IndexHandler.IndexHandlerBuilder IndexHandlerOp
        {
            get { return Operation.IndexHandler.Builder.SetWrapperObject(this); }
        }
        public BlockHandler.BlockHandlerBuilder BlockHandlerOp
        {
            get { return Operation.BlockHandler.Builder.SetWrapperObject(this); }
        }
        public CmdlineHandler.CmdlineHandlerBuilder CmdlineHandlerOp
        {
            get { return Operation.CmdlineHandler.Builder.SetWrapperObject(this); }
        }
        public GoroutineHandler.GoroutineHandlerBuilder GoroutineHandlerOp
        {
            get { return Operation.GoroutineHandler.Builder.SetWrapperObject(this); }
        }
        public HeapHandler.HeapHandlerBuilder HeapHandlerOp
        {
            get { return Operation.HeapHandler.Builder.SetWrapperObject(this); }
        }
        public Profile.ProfileBuilder ProfileOp
        {
            get { return Operation.Profile.Builder.SetWrapperObject(this); }
        }
        public SymbolHandler.SymbolHandlerBuilder SymbolHandlerOp
        {
            get { return Operation.SymbolHandler.Builder.SetWrapperObject(this); }
        }
        public ThreadcreateHandler.ThreadcreateHandlerBuilder ThreadcreateHandlerOp
        {
            get { return Operation.ThreadcreateHandler.Builder.SetWrapperObject(this); }
        }
        #endregion

        public void IndexHandler(IndexHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task IndexHandlerAsync(IndexHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void BlockHandler(BlockHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task BlockHandlerAsync(BlockHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void CmdlineHandler(CmdlineHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task CmdlineHandlerAsync(CmdlineHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void GoroutineHandler(GoroutineHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task GoroutineHandlerAsync(GoroutineHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void HeapHandler(HeapHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task HeapHandlerAsync(HeapHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void Profile(Profile input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task ProfileAsync(Profile input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void SymbolHandler(SymbolHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task SymbolHandlerAsync(SymbolHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void ThreadcreateHandler(ThreadcreateHandler input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task ThreadcreateHandlerAsync(ThreadcreateHandler input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}