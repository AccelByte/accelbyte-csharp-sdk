// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Group.Model;
using AccelByte.Sdk.Api.Group.Operation;
using AccelByte.Sdk.Api.Group.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class GroupOperations_OpExts
    {
        public static void Execute(
            this IndexHandler.IndexHandlerBuilder builder
        )
        {
            IndexHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).IndexHandler(op);
        }
        public static async Task ExecuteAsync(
            this IndexHandler.IndexHandlerBuilder builder
        )
        {
            IndexHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).IndexHandlerAsync(op);
        }
        public static void Execute(
            this BlockHandler.BlockHandlerBuilder builder
        )
        {
            BlockHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).BlockHandler(op);
        }
        public static async Task ExecuteAsync(
            this BlockHandler.BlockHandlerBuilder builder
        )
        {
            BlockHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).BlockHandlerAsync(op);
        }
        public static void Execute(
            this CmdlineHandler.CmdlineHandlerBuilder builder
        )
        {
            CmdlineHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).CmdlineHandler(op);
        }
        public static async Task ExecuteAsync(
            this CmdlineHandler.CmdlineHandlerBuilder builder
        )
        {
            CmdlineHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).CmdlineHandlerAsync(op);
        }
        public static void Execute(
            this GoroutineHandler.GoroutineHandlerBuilder builder
        )
        {
            GoroutineHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).GoroutineHandler(op);
        }
        public static async Task ExecuteAsync(
            this GoroutineHandler.GoroutineHandlerBuilder builder
        )
        {
            GoroutineHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).GoroutineHandlerAsync(op);
        }
        public static void Execute(
            this HeapHandler.HeapHandlerBuilder builder
        )
        {
            HeapHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).HeapHandler(op);
        }
        public static async Task ExecuteAsync(
            this HeapHandler.HeapHandlerBuilder builder
        )
        {
            HeapHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).HeapHandlerAsync(op);
        }
        public static void Execute(
            this Profile.ProfileBuilder builder
        )
        {
            Profile op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).Profile(op);
        }
        public static async Task ExecuteAsync(
            this Profile.ProfileBuilder builder
        )
        {
            Profile op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).ProfileAsync(op);
        }
        public static void Execute(
            this SymbolHandler.SymbolHandlerBuilder builder
        )
        {
            SymbolHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).SymbolHandler(op);
        }
        public static async Task ExecuteAsync(
            this SymbolHandler.SymbolHandlerBuilder builder
        )
        {
            SymbolHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).SymbolHandlerAsync(op);
        }
        public static void Execute(
            this ThreadcreateHandler.ThreadcreateHandlerBuilder builder
        )
        {
            ThreadcreateHandler op = builder.Build(
            );

            ((Group.Wrapper.Operations)builder.WrapperObject!).ThreadcreateHandler(op);
        }
        public static async Task ExecuteAsync(
            this ThreadcreateHandler.ThreadcreateHandlerBuilder builder
        )
        {
            ThreadcreateHandler op = builder.Build(
            );

            await ((Group.Wrapper.Operations)builder.WrapperObject!).ThreadcreateHandlerAsync(op);
        }
    }
}