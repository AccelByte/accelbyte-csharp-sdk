// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Dslogmanager.Model;
using AccelByte.Sdk.Api.Dslogmanager.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Dslogmanager.Wrapper
{
    public class AllTerminatedServers
    {
        private readonly AccelByteSDK _sdk;

        public AllTerminatedServers(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public BatchDownloadServerLogs.BatchDownloadServerLogsBuilder BatchDownloadServerLogsOp
        {
            get { return Operation.BatchDownloadServerLogs.Builder.SetWrapperObject(this); }
        }
        public ListMetadataServers.ListMetadataServersBuilder ListMetadataServersOp
        {
            get { return Operation.ListMetadataServers.Builder.SetWrapperObject(this); }
        }
        public ListAllTerminatedServers.ListAllTerminatedServersBuilder ListAllTerminatedServersOp
        {
            get { return Operation.ListAllTerminatedServers.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Stream? BatchDownloadServerLogs(BatchDownloadServerLogs input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Stream?> BatchDownloadServerLogsAsync(BatchDownloadServerLogs input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListTerminatedServersResponse? ListMetadataServers(ListMetadataServers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListTerminatedServersResponse?> ListMetadataServersAsync(ListMetadataServers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelsListTerminatedServersResponse? ListAllTerminatedServers(ListAllTerminatedServers input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelsListTerminatedServersResponse?> ListAllTerminatedServersAsync(ListAllTerminatedServers input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}