// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Api.Reporting.Operation;
using AccelByte.Sdk.Api.Reporting.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ReportingPublicReasons_OpExts
    {
        public static Reporting.Model.RestapiReasonGroupListResponse? Execute(
            this PublicListReasonGroups.PublicListReasonGroupsBuilder builder,
            string namespace_
        )
        {
            PublicListReasonGroups op = builder.Build(
                namespace_
            );

            return ((Reporting.Wrapper.PublicReasons)builder.WrapperObject!).PublicListReasonGroups(op);
        }
        public static async Task<Reporting.Model.RestapiReasonGroupListResponse?> ExecuteAsync(
            this PublicListReasonGroups.PublicListReasonGroupsBuilder builder,
            string namespace_
        )
        {
            PublicListReasonGroups op = builder.Build(
                namespace_
            );

            return await ((Reporting.Wrapper.PublicReasons)builder.WrapperObject!).PublicListReasonGroupsAsync(op);
        }
        public static Reporting.Model.RestapiPublicReasonListResponse? Execute(
            this PublicGetReasons.PublicGetReasonsBuilder builder,
            string namespace_
        )
        {
            PublicGetReasons op = builder.Build(
                namespace_
            );

            return ((Reporting.Wrapper.PublicReasons)builder.WrapperObject!).PublicGetReasons(op);
        }
        public static async Task<Reporting.Model.RestapiPublicReasonListResponse?> ExecuteAsync(
            this PublicGetReasons.PublicGetReasonsBuilder builder,
            string namespace_
        )
        {
            PublicGetReasons op = builder.Build(
                namespace_
            );

            return await ((Reporting.Wrapper.PublicReasons)builder.WrapperObject!).PublicGetReasonsAsync(op);
        }
    }
}