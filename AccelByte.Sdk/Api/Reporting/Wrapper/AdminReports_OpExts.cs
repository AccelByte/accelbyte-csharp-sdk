// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Api.Reporting.Operation;
using AccelByte.Sdk.Api.Reporting.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ReportingAdminReports_OpExts
    {
        public static Reporting.Model.RestapiReportListResponse? Execute(
            this ListReports.ListReportsBuilder builder,
            string namespace_
        )
        {
            ListReports op = builder.Build(
                namespace_
            );

            return ((Reporting.Wrapper.AdminReports)builder.WrapperObject!).ListReports(op);
        }
        public static async Task<Reporting.Model.RestapiReportListResponse?> ExecuteAsync(
            this ListReports.ListReportsBuilder builder,
            string namespace_
        )
        {
            ListReports op = builder.Build(
                namespace_
            );

            return await ((Reporting.Wrapper.AdminReports)builder.WrapperObject!).ListReportsAsync(op);
        }
        public static Reporting.Model.RestapiSubmitReportResponse? Execute(
            this AdminSubmitReport.AdminSubmitReportBuilder builder,
            RestapiSubmitReportRequest body,
            string namespace_
        )
        {
            AdminSubmitReport op = builder.Build(
                body,
                namespace_
            );

            return ((Reporting.Wrapper.AdminReports)builder.WrapperObject!).AdminSubmitReport(op);
        }
        public static async Task<Reporting.Model.RestapiSubmitReportResponse?> ExecuteAsync(
            this AdminSubmitReport.AdminSubmitReportBuilder builder,
            RestapiSubmitReportRequest body,
            string namespace_
        )
        {
            AdminSubmitReport op = builder.Build(
                body,
                namespace_
            );

            return await ((Reporting.Wrapper.AdminReports)builder.WrapperObject!).AdminSubmitReportAsync(op);
        }
    }
}