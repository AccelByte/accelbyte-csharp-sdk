// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Reporting.Operation
{
    /// <summary>
    /// updateReasonGroup
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:REASON [UPDATE]
    /// Reason group title is case insensitive, meaning you can't have reason if you already create a reason titled Reason
    /// If no reasonIds passed when updating, the current reasons under the reason group will be kept (reasons will not be removed from the group).
    /// </summary>
    public class UpdateReasonGroup : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static UpdateReasonGroupBuilder Builder { get => new UpdateReasonGroupBuilder(); }

        public class UpdateReasonGroupBuilder
            : OperationBuilder<UpdateReasonGroupBuilder>
        {





            internal UpdateReasonGroupBuilder() { }






            public UpdateReasonGroup Build(
                RestapiUpdateReasonGroupRequest body,
                string groupId,
                string namespace_
            )
            {
                UpdateReasonGroup op = new UpdateReasonGroup(this,
                    body,
                    groupId,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private UpdateReasonGroup(UpdateReasonGroupBuilder builder,
            RestapiUpdateReasonGroupRequest body,
            string groupId,
            string namespace_
        )
        {
            PathParams["groupId"] = groupId;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public UpdateReasonGroup(
            string groupId,
            string namespace_,
            Model.RestapiUpdateReasonGroupRequest body
        )
        {
            PathParams["groupId"] = groupId;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/reporting/v1/admin/namespaces/{namespace}/reasonGroups/{groupId}";

        public override HttpMethod Method => HttpMethod.Patch;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.RestapiReasonGroupResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.RestapiReasonGroupResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.RestapiReasonGroupResponse>(payload);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}