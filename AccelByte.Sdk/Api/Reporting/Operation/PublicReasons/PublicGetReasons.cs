// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Reporting.Operation
{
    /// <summary>
    /// publicGetReasons
    /// </summary>
    public class PublicGetReasons : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicGetReasonsBuilder Builder { get => new PublicGetReasonsBuilder(); }

        public class PublicGetReasonsBuilder
            : OperationBuilder<PublicGetReasonsBuilder>
        {

            public string? Group { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public string? Title { get; set; }





            internal PublicGetReasonsBuilder() { }


            public PublicGetReasonsBuilder SetGroup(string _group)
            {
                Group = _group;
                return this;
            }

            public PublicGetReasonsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicGetReasonsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicGetReasonsBuilder SetTitle(string _title)
            {
                Title = _title;
                return this;
            }





            public PublicGetReasons Build(
                string namespace_
            )
            {
                PublicGetReasons op = new PublicGetReasons(this,
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private PublicGetReasons(PublicGetReasonsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (builder.Group is not null) QueryParams["group"] = builder.Group;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.Title is not null) QueryParams["title"] = builder.Title;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicGetReasons(
            string namespace_,            
            string? group,            
            long? limit,            
            long? offset,            
            string? title            
        )
        {
            PathParams["namespace"] = namespace_;
            
            if (group is not null) QueryParams["group"] = group;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (title is not null) QueryParams["title"] = title;
            

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/reporting/v1/public/namespaces/{namespace}/reasons";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.RestapiPublicReasonListResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.RestapiPublicReasonListResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.RestapiPublicReasonListResponse>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}