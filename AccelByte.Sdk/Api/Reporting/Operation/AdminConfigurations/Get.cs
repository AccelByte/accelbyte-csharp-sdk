// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Reporting.Operation
{
    /// <summary>
    /// Get
    ///
    /// Required permission: ADMIN:NAMESPACE:{namespace}:REPORTINGCONFIG [READ]
    /// TimeInterval is in nanoseconds.
    /// When there's no configuration set, the response is the default value (configurable through envar).
    /// </summary>
    public class Get : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetBuilder Builder { get => new GetBuilder(); }

        public class GetBuilder
            : OperationBuilder<GetBuilder>
        {

            public GetCategory? Category { get; set; }





            internal GetBuilder() { }


            public GetBuilder SetCategory(GetCategory _category)
            {
                Category = _category;
                return this;
            }





            public Get Build(
                string namespace_
            )
            {
                Get op = new Get(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private Get(GetBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Category is not null) QueryParams["category"] = builder.Category.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public Get(
            string namespace_,
            GetCategory? category
        )
        {
            PathParams["namespace"] = namespace_;

            if (category is not null) QueryParams["category"] = category.Value;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/reporting/v1/admin/namespaces/{namespace}/configurations";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.RestapiConfigResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.RestapiConfigResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.RestapiConfigResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.RestapiConfigResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetCategory : StringEnum<GetCategory>
    {
        public static readonly GetCategory All
            = new GetCategory("all");

        public static readonly GetCategory Extension
            = new GetCategory("extension");


        public static implicit operator GetCategory(string value)
        {
            return NewValue(value);
        }

        public GetCategory(string enumValue)
            : base(enumValue)
        {

        }
    }

}