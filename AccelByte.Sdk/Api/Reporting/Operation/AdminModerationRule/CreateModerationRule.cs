// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Reporting.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Reporting.Operation
{
    /// <summary>
    /// createModerationRule
    ///
    /// 
    /// 
    /// This endpoint create moderation rule.
    /// 
    /// 
    /// 
    /// 
    /// Required Permission: ADMIN:NAMESPACE:{namespace}:RULE [CREATE]
    /// 
    /// 
    /// 
    /// 
    /// Supported Category:
    /// 
    ///   * UGC
    ///   * USER
    ///   * CHAT
    ///   * EXTENSION
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Supported Action (GOING TO DEPRECATE, for replacement please use "actions"):
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    ///   * HideContent
    /// 
    /// 
    /// 
    /// 
    /// 
    /// Supported Actions:
    /// 
    /// 
    /// 
    /// 
    /// 
    /// 
    ///   * hideContent : Hide the content
    /// 
    /// 
    ///   * banAccount : Ban the user account
    /// 
    /// 
    ///   * deleteChat : Delete chat
    /// </summary>
    public class CreateModerationRule : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static CreateModerationRuleBuilder Builder { get => new CreateModerationRuleBuilder(); }

        public class CreateModerationRuleBuilder
            : OperationBuilder<CreateModerationRuleBuilder>
        {





            internal CreateModerationRuleBuilder() { }






            public CreateModerationRule Build(
                RestapiModerationRuleRequest body,
                string namespace_
            )
            {
                CreateModerationRule op = new CreateModerationRule(this,
                    body,                    
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private CreateModerationRule(CreateModerationRuleBuilder builder,
            RestapiModerationRuleRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public CreateModerationRule(
            string namespace_,            
            Model.RestapiModerationRuleRequest body            
        )
        {
            PathParams["namespace"] = namespace_;
            
            

            
            
            BodyParams = body;
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/reporting/v1/admin/namespaces/{namespace}/rule";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public void ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)201)
            {
                return;
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}