// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Challenge.Wrapper
{
    public class PlayerReward
    {
        private readonly AccelByteSDK _sdk;

        public PlayerReward(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public AdminClaimUsersRewards.AdminClaimUsersRewardsBuilder AdminClaimUsersRewardsOp
        {
            get { return Operation.AdminClaimUsersRewards.Builder.SetWrapperObject(this); }
        }
        public AdminClaimUserRewardsByGoalCode.AdminClaimUserRewardsByGoalCodeBuilder AdminClaimUserRewardsByGoalCodeOp
        {
            get { return Operation.AdminClaimUserRewardsByGoalCode.Builder.SetWrapperObject(this); }
        }
        public AdminGetUserRewards.AdminGetUserRewardsBuilder AdminGetUserRewardsOp
        {
            get { return Operation.AdminGetUserRewards.Builder.SetWrapperObject(this); }
        }
        public AdminClaimUserRewards.AdminClaimUserRewardsBuilder AdminClaimUserRewardsOp
        {
            get { return Operation.AdminClaimUserRewards.Builder.SetWrapperObject(this); }
        }
        public PublicClaimUserRewardsByGoalCode.PublicClaimUserRewardsByGoalCodeBuilder PublicClaimUserRewardsByGoalCodeOp
        {
            get { return Operation.PublicClaimUserRewardsByGoalCode.Builder.SetWrapperObject(this); }
        }
        public PublicGetUserRewards.PublicGetUserRewardsBuilder PublicGetUserRewardsOp
        {
            get { return Operation.PublicGetUserRewards.Builder.SetWrapperObject(this); }
        }
        public PublicClaimUserRewards.PublicClaimUserRewardsBuilder PublicClaimUserRewardsOp
        {
            get { return Operation.PublicClaimUserRewards.Builder.SetWrapperObject(this); }
        }
        #endregion

        public List<Model.ModelClaimUsersRewardsResponse>? AdminClaimUsersRewards(AdminClaimUsersRewards input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelClaimUsersRewardsResponse>?> AdminClaimUsersRewardsAsync(AdminClaimUsersRewards input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelUserReward>? AdminClaimUserRewardsByGoalCode(AdminClaimUserRewardsByGoalCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelUserReward>?> AdminClaimUserRewardsByGoalCodeAsync(AdminClaimUserRewardsByGoalCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelListUserRewardsResponse? AdminGetUserRewards(AdminGetUserRewards input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelListUserRewardsResponse?> AdminGetUserRewardsAsync(AdminGetUserRewards input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelUserReward>? AdminClaimUserRewards(AdminClaimUserRewards input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelUserReward>?> AdminClaimUserRewardsAsync(AdminClaimUserRewards input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelUserReward>? PublicClaimUserRewardsByGoalCode(PublicClaimUserRewardsByGoalCode input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelUserReward>?> PublicClaimUserRewardsByGoalCodeAsync(PublicClaimUserRewardsByGoalCode input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelListUserRewardsResponse? PublicGetUserRewards(PublicGetUserRewards input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelListUserRewardsResponse?> PublicGetUserRewardsAsync(PublicGetUserRewards input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public List<Model.ModelUserReward>? PublicClaimUserRewards(PublicClaimUserRewards input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<List<Model.ModelUserReward>?> PublicClaimUserRewardsAsync(PublicClaimUserRewards input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}