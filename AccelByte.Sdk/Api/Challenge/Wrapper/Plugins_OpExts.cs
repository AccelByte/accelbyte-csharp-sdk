// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Api.Challenge.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ChallengePlugins_OpExts
    {
        public static Challenge.Model.ModelPluginAssignmentResponse? Execute(
            this AdminGetAssignmentPlugin.AdminGetAssignmentPluginBuilder builder,
            string namespace_
        )
        {
            AdminGetAssignmentPlugin op = builder.Build(
                namespace_
            );

            return ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminGetAssignmentPlugin(op);
        }
        public static async Task<Challenge.Model.ModelPluginAssignmentResponse?> ExecuteAsync(
            this AdminGetAssignmentPlugin.AdminGetAssignmentPluginBuilder builder,
            string namespace_
        )
        {
            AdminGetAssignmentPlugin op = builder.Build(
                namespace_
            );

            return await ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminGetAssignmentPluginAsync(op);
        }
        public static Challenge.Model.ModelPluginAssignmentResponse? Execute(
            this AdminUpdateAssignmentPlugin.AdminUpdateAssignmentPluginBuilder builder,
            ModelPluginAssignmentRequest body,
            string namespace_
        )
        {
            AdminUpdateAssignmentPlugin op = builder.Build(
                body,
                namespace_
            );

            return ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminUpdateAssignmentPlugin(op);
        }
        public static async Task<Challenge.Model.ModelPluginAssignmentResponse?> ExecuteAsync(
            this AdminUpdateAssignmentPlugin.AdminUpdateAssignmentPluginBuilder builder,
            ModelPluginAssignmentRequest body,
            string namespace_
        )
        {
            AdminUpdateAssignmentPlugin op = builder.Build(
                body,
                namespace_
            );

            return await ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminUpdateAssignmentPluginAsync(op);
        }
        public static Challenge.Model.ModelPluginAssignmentResponse? Execute(
            this AdminCreateAssignmentPlugin.AdminCreateAssignmentPluginBuilder builder,
            ModelPluginAssignmentRequest body,
            string namespace_
        )
        {
            AdminCreateAssignmentPlugin op = builder.Build(
                body,
                namespace_
            );

            return ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminCreateAssignmentPlugin(op);
        }
        public static async Task<Challenge.Model.ModelPluginAssignmentResponse?> ExecuteAsync(
            this AdminCreateAssignmentPlugin.AdminCreateAssignmentPluginBuilder builder,
            ModelPluginAssignmentRequest body,
            string namespace_
        )
        {
            AdminCreateAssignmentPlugin op = builder.Build(
                body,
                namespace_
            );

            return await ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminCreateAssignmentPluginAsync(op);
        }
        public static void Execute(
            this AdminDeleteAssignmentPlugin.AdminDeleteAssignmentPluginBuilder builder,
            string namespace_
        )
        {
            AdminDeleteAssignmentPlugin op = builder.Build(
                namespace_
            );

            ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminDeleteAssignmentPlugin(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeleteAssignmentPlugin.AdminDeleteAssignmentPluginBuilder builder,
            string namespace_
        )
        {
            AdminDeleteAssignmentPlugin op = builder.Build(
                namespace_
            );

            await ((Challenge.Wrapper.Plugins)builder.WrapperObject!).AdminDeleteAssignmentPluginAsync(op);
        }
    }
}