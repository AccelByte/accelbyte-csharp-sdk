// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Api.Challenge.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ChallengeSchedules_OpExts
    {
        public static Challenge.Model.ModelListScheduleByGoalResponse? Execute(
            this AdminListSchedulesByGoal.AdminListSchedulesByGoalBuilder builder,
            string challengeCode,
            string code,
            string namespace_
        )
        {
            AdminListSchedulesByGoal op = builder.Build(
                challengeCode,
                code,
                namespace_
            );

            return ((Challenge.Wrapper.Schedules)builder.WrapperObject!).AdminListSchedulesByGoal(op);
        }
        public static async Task<Challenge.Model.ModelListScheduleByGoalResponse?> ExecuteAsync(
            this AdminListSchedulesByGoal.AdminListSchedulesByGoalBuilder builder,
            string challengeCode,
            string code,
            string namespace_
        )
        {
            AdminListSchedulesByGoal op = builder.Build(
                challengeCode,
                code,
                namespace_
            );

            return await ((Challenge.Wrapper.Schedules)builder.WrapperObject!).AdminListSchedulesByGoalAsync(op);
        }
        public static Challenge.Model.ModelListSchedulesResponse? Execute(
            this AdminListSchedules.AdminListSchedulesBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminListSchedules op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.Schedules)builder.WrapperObject!).AdminListSchedules(op);
        }
        public static async Task<Challenge.Model.ModelListSchedulesResponse?> ExecuteAsync(
            this AdminListSchedules.AdminListSchedulesBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminListSchedules op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.Schedules)builder.WrapperObject!).AdminListSchedulesAsync(op);
        }
        public static Challenge.Model.ModelListScheduleByGoalResponse? Execute(
            this PublicListSchedulesByGoal.PublicListSchedulesByGoalBuilder builder,
            string challengeCode,
            string code,
            string namespace_
        )
        {
            PublicListSchedulesByGoal op = builder.Build(
                challengeCode,
                code,
                namespace_
            );

            return ((Challenge.Wrapper.Schedules)builder.WrapperObject!).PublicListSchedulesByGoal(op);
        }
        public static async Task<Challenge.Model.ModelListScheduleByGoalResponse?> ExecuteAsync(
            this PublicListSchedulesByGoal.PublicListSchedulesByGoalBuilder builder,
            string challengeCode,
            string code,
            string namespace_
        )
        {
            PublicListSchedulesByGoal op = builder.Build(
                challengeCode,
                code,
                namespace_
            );

            return await ((Challenge.Wrapper.Schedules)builder.WrapperObject!).PublicListSchedulesByGoalAsync(op);
        }
        public static Challenge.Model.ModelListSchedulesResponse? Execute(
            this PublicListSchedules.PublicListSchedulesBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicListSchedules op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.Schedules)builder.WrapperObject!).PublicListSchedules(op);
        }
        public static async Task<Challenge.Model.ModelListSchedulesResponse?> ExecuteAsync(
            this PublicListSchedules.PublicListSchedulesBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicListSchedules op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.Schedules)builder.WrapperObject!).PublicListSchedulesAsync(op);
        }
    }
}