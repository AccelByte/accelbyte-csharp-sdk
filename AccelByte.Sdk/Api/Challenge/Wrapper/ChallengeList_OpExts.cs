// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Api.Challenge.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ChallengeChallengeList_OpExts
    {
        public static Challenge.Model.ModelListChallengeResponse? Execute(
            this GetChallenges.GetChallengesBuilder builder,
            string namespace_
        )
        {
            GetChallenges op = builder.Build(
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeList)builder.WrapperObject!).GetChallenges(op);
        }
        public static async Task<Challenge.Model.ModelListChallengeResponse?> ExecuteAsync(
            this GetChallenges.GetChallengesBuilder builder,
            string namespace_
        )
        {
            GetChallenges op = builder.Build(
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeList)builder.WrapperObject!).GetChallengesAsync(op);
        }
        public static Challenge.Model.ModelGetGoalsResponse? Execute(
            this PublicGetScheduledGoals.PublicGetScheduledGoalsBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicGetScheduledGoals op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeList)builder.WrapperObject!).PublicGetScheduledGoals(op);
        }
        public static async Task<Challenge.Model.ModelGetGoalsResponse?> ExecuteAsync(
            this PublicGetScheduledGoals.PublicGetScheduledGoalsBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicGetScheduledGoals op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeList)builder.WrapperObject!).PublicGetScheduledGoalsAsync(op);
        }
    }
}