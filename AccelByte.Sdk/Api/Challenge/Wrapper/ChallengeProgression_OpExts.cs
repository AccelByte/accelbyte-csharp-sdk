// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Api.Challenge.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ChallengeChallengeProgression_OpExts
    {
        public static void Execute(
            this AdminEvaluateProgress.AdminEvaluateProgressBuilder builder,
            ModelEvaluatePlayerProgressionRequest body,
            string namespace_
        )
        {
            AdminEvaluateProgress op = builder.Build(
                body,
                namespace_
            );

            ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).AdminEvaluateProgress(op);
        }
        public static async Task ExecuteAsync(
            this AdminEvaluateProgress.AdminEvaluateProgressBuilder builder,
            ModelEvaluatePlayerProgressionRequest body,
            string namespace_
        )
        {
            AdminEvaluateProgress op = builder.Build(
                body,
                namespace_
            );

            await ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).AdminEvaluateProgressAsync(op);
        }
        public static Challenge.Model.ModelUserProgressionResponse? Execute(
            this AdminGetUserProgression.AdminGetUserProgressionBuilder builder,
            string challengeCode,
            string namespace_,
            string userId
        )
        {
            AdminGetUserProgression op = builder.Build(
                challengeCode,
                namespace_,
                userId
            );

            return ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).AdminGetUserProgression(op);
        }
        public static async Task<Challenge.Model.ModelUserProgressionResponse?> ExecuteAsync(
            this AdminGetUserProgression.AdminGetUserProgressionBuilder builder,
            string challengeCode,
            string namespace_,
            string userId
        )
        {
            AdminGetUserProgression op = builder.Build(
                challengeCode,
                namespace_,
                userId
            );

            return await ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).AdminGetUserProgressionAsync(op);
        }
        public static void Execute(
            this EvaluateMyProgress.EvaluateMyProgressBuilder builder,
            string namespace_
        )
        {
            EvaluateMyProgress op = builder.Build(
                namespace_
            );

            ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).EvaluateMyProgress(op);
        }
        public static async Task ExecuteAsync(
            this EvaluateMyProgress.EvaluateMyProgressBuilder builder,
            string namespace_
        )
        {
            EvaluateMyProgress op = builder.Build(
                namespace_
            );

            await ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).EvaluateMyProgressAsync(op);
        }
        public static Challenge.Model.ModelUserProgressionResponse? Execute(
            this PublicGetUserProgression.PublicGetUserProgressionBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicGetUserProgression op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).PublicGetUserProgression(op);
        }
        public static async Task<Challenge.Model.ModelUserProgressionResponse?> ExecuteAsync(
            this PublicGetUserProgression.PublicGetUserProgressionBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PublicGetUserProgression op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).PublicGetUserProgressionAsync(op);
        }
        public static Challenge.Model.ModelUserProgressionResponse? Execute(
            this PublicGetPastUserProgression.PublicGetPastUserProgressionBuilder builder,
            string challengeCode,
            long index,
            string namespace_
        )
        {
            PublicGetPastUserProgression op = builder.Build(
                challengeCode,
                index,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).PublicGetPastUserProgression(op);
        }
        public static async Task<Challenge.Model.ModelUserProgressionResponse?> ExecuteAsync(
            this PublicGetPastUserProgression.PublicGetPastUserProgressionBuilder builder,
            string challengeCode,
            long index,
            string namespace_
        )
        {
            PublicGetPastUserProgression op = builder.Build(
                challengeCode,
                index,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeProgression)builder.WrapperObject!).PublicGetPastUserProgressionAsync(op);
        }
    }
}