// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api.Challenge.Wrapper
{
    public class Plugins
    {
        private readonly AccelByteSDK _sdk;

        public Plugins(AccelByteSDK sdk)
        {
            _sdk = sdk;
        }

        #region Operation Builders
        public AdminGetAssignmentPlugin.AdminGetAssignmentPluginBuilder AdminGetAssignmentPluginOp
        {
            get { return Operation.AdminGetAssignmentPlugin.Builder.SetWrapperObject(this); }
        }
        public AdminUpdateAssignmentPlugin.AdminUpdateAssignmentPluginBuilder AdminUpdateAssignmentPluginOp
        {
            get { return Operation.AdminUpdateAssignmentPlugin.Builder.SetWrapperObject(this); }
        }
        public AdminCreateAssignmentPlugin.AdminCreateAssignmentPluginBuilder AdminCreateAssignmentPluginOp
        {
            get { return Operation.AdminCreateAssignmentPlugin.Builder.SetWrapperObject(this); }
        }
        public AdminDeleteAssignmentPlugin.AdminDeleteAssignmentPluginBuilder AdminDeleteAssignmentPluginOp
        {
            get { return Operation.AdminDeleteAssignmentPlugin.Builder.SetWrapperObject(this); }
        }
        #endregion

        public Model.ModelPluginAssignmentResponse? AdminGetAssignmentPlugin(AdminGetAssignmentPlugin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelPluginAssignmentResponse?> AdminGetAssignmentPluginAsync(AdminGetAssignmentPlugin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelPluginAssignmentResponse? AdminUpdateAssignmentPlugin(AdminUpdateAssignmentPlugin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelPluginAssignmentResponse?> AdminUpdateAssignmentPluginAsync(AdminUpdateAssignmentPlugin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public Model.ModelPluginAssignmentResponse? AdminCreateAssignmentPlugin(AdminCreateAssignmentPlugin input)
        {
            var response = _sdk.RunRequest(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task<Model.ModelPluginAssignmentResponse?> AdminCreateAssignmentPluginAsync(AdminCreateAssignmentPlugin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            return input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public void AdminDeleteAssignmentPlugin(AdminDeleteAssignmentPlugin input)
        {
            var response = _sdk.RunRequest(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
        public async Task AdminDeleteAssignmentPluginAsync(AdminDeleteAssignmentPlugin input)
        {
            var response = await _sdk.RunRequestAsync(input);
            input.ParseResponse(
                    response.Code,
                    response.ContentType,
                    response.Payload);
        }
    }
}