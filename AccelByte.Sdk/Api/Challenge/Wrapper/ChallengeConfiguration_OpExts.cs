// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Api.Challenge.Operation;
using AccelByte.Sdk.Api.Challenge.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class ChallengeChallengeConfiguration_OpExts
    {
        public static Challenge.Model.ModelListChallengeResponse? Execute(
            this AdminGetChallenges.AdminGetChallengesBuilder builder,
            string namespace_
        )
        {
            AdminGetChallenges op = builder.Build(
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetChallenges(op);
        }
        public static async Task<Challenge.Model.ModelListChallengeResponse?> ExecuteAsync(
            this AdminGetChallenges.AdminGetChallengesBuilder builder,
            string namespace_
        )
        {
            AdminGetChallenges op = builder.Build(
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetChallengesAsync(op);
        }
        public static Challenge.Model.ModelChallengeResponse? Execute(
            this AdminCreateChallenge.AdminCreateChallengeBuilder builder,
            ModelCreateChallengeRequest body,
            string namespace_
        )
        {
            AdminCreateChallenge op = builder.Build(
                body,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminCreateChallenge(op);
        }
        public static async Task<Challenge.Model.ModelChallengeResponse?> ExecuteAsync(
            this AdminCreateChallenge.AdminCreateChallengeBuilder builder,
            ModelCreateChallengeRequest body,
            string namespace_
        )
        {
            AdminCreateChallenge op = builder.Build(
                body,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminCreateChallengeAsync(op);
        }
        public static Challenge.Model.ModelListChallengeResponse? Execute(
            this AdminGetActiveChallenges.AdminGetActiveChallengesBuilder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetActiveChallenges op = builder.Build(
                namespace_,
                userId
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetActiveChallenges(op);
        }
        public static async Task<Challenge.Model.ModelListChallengeResponse?> ExecuteAsync(
            this AdminGetActiveChallenges.AdminGetActiveChallengesBuilder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetActiveChallenges op = builder.Build(
                namespace_,
                userId
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetActiveChallengesAsync(op);
        }
        public static Challenge.Model.ModelChallengeResponse? Execute(
            this AdminGetChallenge.AdminGetChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminGetChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetChallenge(op);
        }
        public static async Task<Challenge.Model.ModelChallengeResponse?> ExecuteAsync(
            this AdminGetChallenge.AdminGetChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminGetChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetChallengeAsync(op);
        }
        public static Challenge.Model.ModelChallengeResponse? Execute(
            this AdminUpdateChallenge.AdminUpdateChallengeBuilder builder,
            ModelUpdateChallengeRequest body,
            string challengeCode,
            string namespace_
        )
        {
            AdminUpdateChallenge op = builder.Build(
                body,
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminUpdateChallenge(op);
        }
        public static async Task<Challenge.Model.ModelChallengeResponse?> ExecuteAsync(
            this AdminUpdateChallenge.AdminUpdateChallengeBuilder builder,
            ModelUpdateChallengeRequest body,
            string challengeCode,
            string namespace_
        )
        {
            AdminUpdateChallenge op = builder.Build(
                body,
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminUpdateChallengeAsync(op);
        }
        public static void Execute(
            this AdminDeleteChallenge.AdminDeleteChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminDeleteChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminDeleteChallenge(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeleteChallenge.AdminDeleteChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminDeleteChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminDeleteChallengeAsync(op);
        }
        public static Challenge.Model.ModelListPeriodsResponse? Execute(
            this AdminGetPeriods.AdminGetPeriodsBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminGetPeriods op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetPeriods(op);
        }
        public static async Task<Challenge.Model.ModelListPeriodsResponse?> ExecuteAsync(
            this AdminGetPeriods.AdminGetPeriodsBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminGetPeriods op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminGetPeriodsAsync(op);
        }
        public static List<Challenge.Model.ModelSchedule>? Execute(
            this AdminRandomizeChallenge.AdminRandomizeChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminRandomizeChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminRandomizeChallenge(op);
        }
        public static async Task<List<Challenge.Model.ModelSchedule>?> ExecuteAsync(
            this AdminRandomizeChallenge.AdminRandomizeChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminRandomizeChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminRandomizeChallengeAsync(op);
        }
        public static void Execute(
            this AdminDeleteTiedChallenge.AdminDeleteTiedChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminDeleteTiedChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminDeleteTiedChallenge(op);
        }
        public static async Task ExecuteAsync(
            this AdminDeleteTiedChallenge.AdminDeleteTiedChallengeBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            AdminDeleteTiedChallenge op = builder.Build(
                challengeCode,
                namespace_
            );

            await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminDeleteTiedChallengeAsync(op);
        }
        public static Challenge.Model.ModelChallengeResponse? Execute(
            this AdminUpdateTiedChallengeSchedule.AdminUpdateTiedChallengeScheduleBuilder builder,
            ModelUpdateChallengeScheduleRequest body,
            string challengeCode,
            string namespace_
        )
        {
            AdminUpdateTiedChallengeSchedule op = builder.Build(
                body,
                challengeCode,
                namespace_
            );

            return ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminUpdateTiedChallengeSchedule(op);
        }
        public static async Task<Challenge.Model.ModelChallengeResponse?> ExecuteAsync(
            this AdminUpdateTiedChallengeSchedule.AdminUpdateTiedChallengeScheduleBuilder builder,
            ModelUpdateChallengeScheduleRequest body,
            string challengeCode,
            string namespace_
        )
        {
            AdminUpdateTiedChallengeSchedule op = builder.Build(
                body,
                challengeCode,
                namespace_
            );

            return await ((Challenge.Wrapper.ChallengeConfiguration)builder.WrapperObject!).AdminUpdateTiedChallengeScheduleAsync(op);
        }
    }
}