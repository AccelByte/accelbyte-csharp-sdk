// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// GetChallenges
    ///
    /// - Required permission: NAMESPACE:{namespace}:CHALLENGE [READ]
    /// </summary>
    public class GetChallenges : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static GetChallengesBuilder Builder { get => new GetChallengesBuilder(); }

        public class GetChallengesBuilder
            : OperationBuilder<GetChallengesBuilder>
        {

            public string? Keyword { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public GetChallengesSortBy? SortBy { get; set; }

            public GetChallengesStatus? Status { get; set; }

            public List<string>? Tags { get; set; }





            internal GetChallengesBuilder() { }


            public GetChallengesBuilder SetKeyword(string _keyword)
            {
                Keyword = _keyword;
                return this;
            }

            public GetChallengesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public GetChallengesBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public GetChallengesBuilder SetSortBy(GetChallengesSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public GetChallengesBuilder SetStatus(GetChallengesStatus _status)
            {
                Status = _status;
                return this;
            }

            public GetChallengesBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public GetChallenges Build(
                string namespace_
            )
            {
                GetChallenges op = new GetChallenges(this,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private GetChallenges(GetChallengesBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Keyword is not null) QueryParams["keyword"] = builder.Keyword;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.Status is not null) QueryParams["status"] = builder.Status.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public GetChallenges(
            string namespace_,
            string? keyword,
            long? limit,
            long? offset,
            GetChallengesSortBy? sortBy,
            GetChallengesStatus? status,
            List<string>? tags
        )
        {
            PathParams["namespace"] = namespace_;

            if (keyword is not null) QueryParams["keyword"] = keyword;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (status is not null) QueryParams["status"] = status.Value;
            if (tags is not null) QueryParams["tags"] = tags;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/public/namespaces/{namespace}/challenges";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelListChallengeResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelListChallengeResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelListChallengeResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelListChallengeResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class GetChallengesSortBy : StringEnum<GetChallengesSortBy>
    {
        public static readonly GetChallengesSortBy CreatedAt
            = new GetChallengesSortBy("createdAt");

        public static readonly GetChallengesSortBy CreatedAtasc
            = new GetChallengesSortBy("createdAt:asc");

        public static readonly GetChallengesSortBy CreatedAtdesc
            = new GetChallengesSortBy("createdAt:desc");

        public static readonly GetChallengesSortBy UpdatedAt
            = new GetChallengesSortBy("updatedAt");

        public static readonly GetChallengesSortBy UpdatedAtasc
            = new GetChallengesSortBy("updatedAt:asc");

        public static readonly GetChallengesSortBy UpdatedAtdesc
            = new GetChallengesSortBy("updatedAt:desc");


        public static implicit operator GetChallengesSortBy(string value)
        {
            return NewValue(value);
        }

        public GetChallengesSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class GetChallengesStatus : StringEnum<GetChallengesStatus>
    {
        public static readonly GetChallengesStatus INIT
            = new GetChallengesStatus("INIT");

        public static readonly GetChallengesStatus RETIRED
            = new GetChallengesStatus("RETIRED");

        public static readonly GetChallengesStatus TIED
            = new GetChallengesStatus("TIED");


        public static implicit operator GetChallengesStatus(string value)
        {
            return NewValue(value);
        }

        public GetChallengesStatus(string enumValue)
            : base(enumValue)
        {

        }
    }

}