// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminUpdateTiedChallengeSchedule
    ///
    /// - Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE [UPDATE]
    /// ### Request body:
    /// - action: Update the challenge schedule. The available options are:
    /// - STOP: Ends the challenge, changing its status to RETIRED. This option supports all types of challenges.
    /// - ACCELERATE: Speeds up the challenge's end time. Note that this option does not apply to challenges with an 'endAfter' value.
    /// - endDate: The timestamp specifying when the challenge should end (required if the action is ACCELERATE).
    /// </summary>
    public class AdminUpdateTiedChallengeSchedule : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateTiedChallengeScheduleBuilder Builder { get => new AdminUpdateTiedChallengeScheduleBuilder(); }

        public class AdminUpdateTiedChallengeScheduleBuilder
            : OperationBuilder<AdminUpdateTiedChallengeScheduleBuilder>
        {





            internal AdminUpdateTiedChallengeScheduleBuilder() { }






            public AdminUpdateTiedChallengeSchedule Build(
                ModelUpdateChallengeScheduleRequest body,
                string challengeCode,
                string namespace_
            )
            {
                AdminUpdateTiedChallengeSchedule op = new AdminUpdateTiedChallengeSchedule(this,
                    body,
                    challengeCode,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminUpdateTiedChallengeSchedule(AdminUpdateTiedChallengeScheduleBuilder builder,
            ModelUpdateChallengeScheduleRequest body,
            string challengeCode,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminUpdateTiedChallengeSchedule(
            string challengeCode,
            string namespace_,
            Model.ModelUpdateChallengeScheduleRequest body
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/challenges/{challengeCode}/tied/schedule";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelChallengeResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}