// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminCreateChallenge
    ///
    /// 
    ///   * Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE [CREATE]
    /// 
    /// Challenge is a collection of goals that can be completed by players. Challenge can have rules that specify what and when goals will be available for players to be taken.
    /// 
    /// Request body:
    /// 
    ///   * code: only lowercase letters, numbers, and the separator - are allowed; must start and end with letter
    ///   * name: name of the challenge
    ///   * description: text describing about the challenge (optional)
    ///   * startDate: timestamp of when the challenge is started
    ///   * endDate: timestamp of when the challenge is ended (optional)
    ///   * endAfter: describe number of period challenge will be retired after (optional)
    /// To configure challenge that never end, leave the endDate and endAfter field null/empty.
    ///   * repeatAfter: describe number of period challenge's goals will be repeated after. Leave it empty if you don't want to repeat the challenge.
    ///   * rotation: describe how long goals in a challenge will be available for players to progress before rotated with another goals. (DAILY|WEEKLY|MONTHLY|NONE)
    ///   * activeGoalsPerRotation: number of goals per rotation (currently only applicable for RANDOMIZE assignment)
    ///   * assignmentRule: describe how the goals will be assigned and scheduled to users. (FIXED|RANDOMIZED|UNSCHEDULED)
    ///   * goalsVisibility: describe whether users can see all goals under challenge, or only active goal in one rotation period only. (SHOWALL|PERIODONLY)
    /// </summary>
    public class AdminCreateChallenge : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminCreateChallengeBuilder Builder { get => new AdminCreateChallengeBuilder(); }

        public class AdminCreateChallengeBuilder
            : OperationBuilder<AdminCreateChallengeBuilder>
        {





            internal AdminCreateChallengeBuilder() { }






            public AdminCreateChallenge Build(
                ModelCreateChallengeRequest body,
                string namespace_
            )
            {
                AdminCreateChallenge op = new AdminCreateChallenge(this,
                    body,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminCreateChallenge(AdminCreateChallengeBuilder builder,
            ModelCreateChallengeRequest body,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminCreateChallenge(
            string namespace_,
            Model.ModelCreateChallengeRequest body
        )
        {
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/challenges";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelChallengeResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}