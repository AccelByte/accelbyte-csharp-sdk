// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// adminUpdateChallenge
    ///
    /// - Required permission: ADMIN:NAMESPACE:{namespace}:CHALLENGE [UPDATE]
    /// Request body:
    /// - name: name of the challenge
    /// - description: text describing about the challenge (optional)
    /// - startDate: timestamp of when the challenge is started
    /// - endDate: timestamp of when the challenge is ended (optional)
    /// - endAfter: describe number of period challenge will be retired after (optional). To configure challenge that never end, leave the endDate and endAfter field null/empty.
    /// - repeatAfter: describe number of period challenge's goals will be repeated after. Leave it empty if you don't want to repeat the challenge.
    /// - rotation: describe how long goals in a challenge will be available for players to progress before rotated with another goals. (DAILY|WEEKLY|MONTHLY|NONE)
    /// - activeGoalsPerRotation: number of goals per rotation (currently only applicable for RANDOMIZE assignment)
    /// - assignmentRule: describe how the goals will be assigned and scheduled to users. (FIXED|RANDOMIZED|UNSCHEDULED|CUSTOM)
    /// - goalsVisibility: describe whether users can see all goals under challenge, or only active goal in one rotation period only. (SHOWALL|PERIODONLY)
    /// - resetConfig: describe when rotation reset will happen (optional).
    /// - resetTime: Reset time must follow hours:minutes in 24 hours format (e.g. 01:30, 23:15) and in UTC timezone. Default to "00:00"
    /// - resetDay: Reset Day follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). Default to 1 in WEEKLY rotation.
    /// - resetDate: Reset Date must be a number 1 - 31. Default to 1 in MONTHLY rotation.
    /// - randomizedPerRotation:
    /// - true: each goal will be randomly assigned to multiple periods
    /// - false: a goal will only be assigned to one period
    /// - tags: challenge's labels.
    /// </summary>
    public class AdminUpdateChallenge : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static AdminUpdateChallengeBuilder Builder { get => new AdminUpdateChallengeBuilder(); }

        public class AdminUpdateChallengeBuilder
            : OperationBuilder<AdminUpdateChallengeBuilder>
        {





            internal AdminUpdateChallengeBuilder() { }






            public AdminUpdateChallenge Build(
                ModelUpdateChallengeRequest body,
                string challengeCode,
                string namespace_
            )
            {
                AdminUpdateChallenge op = new AdminUpdateChallenge(this,
                    body,
                    challengeCode,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private AdminUpdateChallenge(AdminUpdateChallengeBuilder builder,
            ModelUpdateChallengeRequest body,
            string challengeCode,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public AdminUpdateChallenge(
            string challengeCode,
            string namespace_,
            Model.ModelUpdateChallengeRequest body
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;





            BodyParams = body;


            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/admin/namespaces/{namespace}/challenges/{challengeCode}";

        public override HttpMethod Method => HttpMethod.Put;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelChallengeResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelChallengeResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}