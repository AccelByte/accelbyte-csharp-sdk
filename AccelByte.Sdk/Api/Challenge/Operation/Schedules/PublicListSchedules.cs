// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Challenge.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Challenge.Operation
{
    /// <summary>
    /// publicListSchedules
    ///
    /// 
    ///   * Required permission: NAMESPACE:{namespace}:CHALLENGE [READ]
    /// 
    /// List schedules of given challenge for specific user. To query schedules prior to specific date time, use dateTime parameter.
    /// </summary>
    public class PublicListSchedules : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListSchedulesBuilder Builder { get => new PublicListSchedulesBuilder(); }

        public class PublicListSchedulesBuilder
            : OperationBuilder<PublicListSchedulesBuilder>
        {

            public DateTime? DateTime { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }





            internal PublicListSchedulesBuilder() { }


            public PublicListSchedulesBuilder SetDateTime(DateTime _dateTime)
            {
                DateTime = _dateTime;
                return this;
            }

            public PublicListSchedulesBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicListSchedulesBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }





            public PublicListSchedules Build(
                string challengeCode,
                string namespace_
            )
            {
                PublicListSchedules op = new PublicListSchedules(this,
                    challengeCode,
                    namespace_
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private PublicListSchedules(PublicListSchedulesBuilder builder,
            string challengeCode,
            string namespace_
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;

            if (builder.DateTime != null)
                QueryParams["dateTime"] = builder.DateTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicListSchedules(
            string challengeCode,
            string namespace_,
            DateTime? dateTime,
            long? limit,
            long? offset
        )
        {
            PathParams["challengeCode"] = challengeCode;
            PathParams["namespace"] = namespace_;

            if (dateTime != null)
                QueryParams["dateTime"] = dateTime.Value.ToString("O", System.Globalization.CultureInfo.InvariantCulture);
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;






            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/challenge/v1/public/namespaces/{namespace}/challenges/{challengeCode}/schedules";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelListSchedulesResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelListSchedulesResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelListSchedulesResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelListSchedulesResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}