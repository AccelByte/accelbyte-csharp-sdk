// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Challenge.Model
{
    public class ModelsUpdateChallengeRequest : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("activeGoalsPerRotation")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? ActiveGoalsPerRotation { get; set; }

        [JsonPropertyName("assignmentRule")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ModelsUpdateChallengeRequestAssignmentRule? AssignmentRule { get; set; }

        [JsonPropertyName("description")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Description { get; set; }

        [JsonPropertyName("endAfter")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? EndAfter { get; set; }

        [JsonPropertyName("endDate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? EndDate { get; set; }

        [JsonPropertyName("goalsVisibility")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ModelsUpdateChallengeRequestGoalsVisibility? GoalsVisibility { get; set; }

        [JsonPropertyName("name")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Name { get; set; }

        [JsonPropertyName("repeatAfter")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? RepeatAfter { get; set; }

        [JsonPropertyName("rotation")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonStringEnum]
        public ModelsUpdateChallengeRequestRotation? Rotation { get; set; }

        [JsonPropertyName("startDate")]
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public DateTime? StartDate { get; set; }

    }



    public class ModelsUpdateChallengeRequestAssignmentRule : StringEnum<ModelsUpdateChallengeRequestAssignmentRule>
    {
        public static readonly ModelsUpdateChallengeRequestAssignmentRule FIXED
            = new ModelsUpdateChallengeRequestAssignmentRule("FIXED");

        public static readonly ModelsUpdateChallengeRequestAssignmentRule RANDOMIZED
            = new ModelsUpdateChallengeRequestAssignmentRule("RANDOMIZED");

        public static readonly ModelsUpdateChallengeRequestAssignmentRule UNSCHEDULED
            = new ModelsUpdateChallengeRequestAssignmentRule("UNSCHEDULED");


        public static implicit operator ModelsUpdateChallengeRequestAssignmentRule(string value)
        {
            return NewValue(value);
        }

        public ModelsUpdateChallengeRequestAssignmentRule(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ModelsUpdateChallengeRequestGoalsVisibility : StringEnum<ModelsUpdateChallengeRequestGoalsVisibility>
    {
        public static readonly ModelsUpdateChallengeRequestGoalsVisibility PERIODONLY
            = new ModelsUpdateChallengeRequestGoalsVisibility("PERIODONLY");

        public static readonly ModelsUpdateChallengeRequestGoalsVisibility SHOWALL
            = new ModelsUpdateChallengeRequestGoalsVisibility("SHOWALL");


        public static implicit operator ModelsUpdateChallengeRequestGoalsVisibility(string value)
        {
            return NewValue(value);
        }

        public ModelsUpdateChallengeRequestGoalsVisibility(string enumValue)
            : base(enumValue)
        {

        }
    }

    public class ModelsUpdateChallengeRequestRotation : StringEnum<ModelsUpdateChallengeRequestRotation>
    {
        public static readonly ModelsUpdateChallengeRequestRotation DAILY
            = new ModelsUpdateChallengeRequestRotation("DAILY");

        public static readonly ModelsUpdateChallengeRequestRotation MONTHLY
            = new ModelsUpdateChallengeRequestRotation("MONTHLY");

        public static readonly ModelsUpdateChallengeRequestRotation NONE
            = new ModelsUpdateChallengeRequestRotation("NONE");

        public static readonly ModelsUpdateChallengeRequestRotation WEEKLY
            = new ModelsUpdateChallengeRequestRotation("WEEKLY");


        public static implicit operator ModelsUpdateChallengeRequestRotation(string value)
        {
            return NewValue(value);
        }

        public ModelsUpdateChallengeRequestRotation(string enumValue)
            : base(enumValue)
        {

        }
    }
}