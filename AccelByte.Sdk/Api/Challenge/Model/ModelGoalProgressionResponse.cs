// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using System.Text.Json.Serialization;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Converters;

namespace AccelByte.Sdk.Api.Challenge.Model
{
    public class ModelGoalProgressionResponse : AccelByte.Sdk.Core.Model
    {
        [JsonPropertyName("challengeCode")]
        public string? ChallengeCode { get; set; }

        [JsonPropertyName("goal")]
        public ModelGoalMeta? Goal { get; set; }

        [JsonPropertyName("goalCode")]
        public string? GoalCode { get; set; }

        [JsonPropertyName("goalProgressionId")]
        public string? GoalProgressionId { get; set; }

        [JsonPropertyName("requirementProgressions")]
        public List<ModelRequirementProgressionResponse>? RequirementProgressions { get; set; }

        [JsonPropertyName("status")]
        [JsonStringEnum]
        public ModelGoalProgressionResponseStatus? Status { get; set; }

    }



    public class ModelGoalProgressionResponseStatus : StringEnum<ModelGoalProgressionResponseStatus>
    {
        public static readonly ModelGoalProgressionResponseStatus ACTIVE
            = new ModelGoalProgressionResponseStatus("ACTIVE");

        public static readonly ModelGoalProgressionResponseStatus COMPLETED
            = new ModelGoalProgressionResponseStatus("COMPLETED");

        public static readonly ModelGoalProgressionResponseStatus NOTSTARTED
            = new ModelGoalProgressionResponseStatus("NOT_STARTED");

        public static readonly ModelGoalProgressionResponseStatus RETIRED
            = new ModelGoalProgressionResponseStatus("RETIRED");


        public static implicit operator ModelGoalProgressionResponseStatus(string value)
        {
            return NewValue(value);
        }

        public ModelGoalProgressionResponseStatus(string enumValue)
            : base(enumValue)
        {

        }
    }
}