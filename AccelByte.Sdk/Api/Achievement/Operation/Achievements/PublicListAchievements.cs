// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Achievement.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Achievement.Operation
{
    /// <summary>
    /// PublicListAchievements
    ///
    /// 
    /// 
    /// Required permission
    /// `NAMESPACE:{namespace}:ACHIEVEMENT [READ]` and scope `social`
    /// </summary>
    public class PublicListAchievements : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicListAchievementsBuilder Builder { get => new PublicListAchievementsBuilder(); }

        public class PublicListAchievementsBuilder
            : OperationBuilder<PublicListAchievementsBuilder>
        {

            public bool? Global { get; set; }

            public long? Limit { get; set; }

            public long? Offset { get; set; }

            public PublicListAchievementsSortBy? SortBy { get; set; }

            public List<string>? Tags { get; set; }





            internal PublicListAchievementsBuilder() { }


            public PublicListAchievementsBuilder SetGlobal(bool _global)
            {
                Global = _global;
                return this;
            }

            public PublicListAchievementsBuilder SetLimit(long _limit)
            {
                Limit = _limit;
                return this;
            }

            public PublicListAchievementsBuilder SetOffset(long _offset)
            {
                Offset = _offset;
                return this;
            }

            public PublicListAchievementsBuilder SetSortBy(PublicListAchievementsSortBy _sortBy)
            {
                SortBy = _sortBy;
                return this;
            }

            public PublicListAchievementsBuilder SetTags(List<string> _tags)
            {
                Tags = _tags;
                return this;
            }





            public PublicListAchievements Build(
                string namespace_,
                string language
            )
            {
                PublicListAchievements op = new PublicListAchievements(this,
                    namespace_,
                    language
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private PublicListAchievements(PublicListAchievementsBuilder builder,
            string namespace_,
            string language
        )
        {
            PathParams["namespace"] = namespace_;

            if (builder.Global != null) QueryParams["global"] = Convert.ToString(builder.Global)!;
            if (builder.Limit != null) QueryParams["limit"] = Convert.ToString(builder.Limit)!;
            if (builder.Offset != null) QueryParams["offset"] = Convert.ToString(builder.Offset)!;
            if (builder.SortBy is not null) QueryParams["sortBy"] = builder.SortBy.Value;
            if (builder.Tags is not null) QueryParams["tags"] = builder.Tags;
            if (language is not null) QueryParams["language"] = language;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicListAchievements(
            string namespace_,
            bool? global,
            long? limit,
            long? offset,
            PublicListAchievementsSortBy? sortBy,
            List<string>? tags,
            string language
        )
        {
            PathParams["namespace"] = namespace_;

            if (global != null) QueryParams["global"] = Convert.ToString(global)!;
            if (limit != null) QueryParams["limit"] = Convert.ToString(limit)!;
            if (offset != null) QueryParams["offset"] = Convert.ToString(offset)!;
            if (sortBy is not null) QueryParams["sortBy"] = sortBy.Value;
            if (tags is not null) QueryParams["tags"] = tags;
            if (language is not null) QueryParams["language"] = language;



            CollectionFormatMap["tags"] = "csv";



            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/achievement/v1/public/namespaces/{namespace}/achievements";

        public override HttpMethod Method => HttpMethod.Get;

        public override string[] Consumes => new string[] { "application/json" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelsPublicAchievementsResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsPublicAchievementsResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsPublicAchievementsResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsPublicAchievementsResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

    public class PublicListAchievementsSortBy : StringEnum<PublicListAchievementsSortBy>
    {
        public static readonly PublicListAchievementsSortBy ListOrder
            = new PublicListAchievementsSortBy("listOrder");

        public static readonly PublicListAchievementsSortBy ListOrderasc
            = new PublicListAchievementsSortBy("listOrder:asc");

        public static readonly PublicListAchievementsSortBy ListOrderdesc
            = new PublicListAchievementsSortBy("listOrder:desc");

        public static readonly PublicListAchievementsSortBy CreatedAt
            = new PublicListAchievementsSortBy("createdAt");

        public static readonly PublicListAchievementsSortBy CreatedAtasc
            = new PublicListAchievementsSortBy("createdAt:asc");

        public static readonly PublicListAchievementsSortBy CreatedAtdesc
            = new PublicListAchievementsSortBy("createdAt:desc");

        public static readonly PublicListAchievementsSortBy UpdatedAt
            = new PublicListAchievementsSortBy("updatedAt");

        public static readonly PublicListAchievementsSortBy UpdatedAtasc
            = new PublicListAchievementsSortBy("updatedAt:asc");

        public static readonly PublicListAchievementsSortBy UpdatedAtdesc
            = new PublicListAchievementsSortBy("updatedAt:desc");


        public static implicit operator PublicListAchievementsSortBy(string value)
        {
            return NewValue(value);
        }

        public PublicListAchievementsSortBy(string enumValue)
            : base(enumValue)
        {

        }
    }

}