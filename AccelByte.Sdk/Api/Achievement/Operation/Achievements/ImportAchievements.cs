// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Achievement.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Achievement.Operation
{
    /// <summary>
    /// ImportAchievements
    ///
    /// 
    /// Required permission ADMIN:NAMESPACE:{namespace}:ACHIEVEMENT [UPDATE]
    /// 
    /// Required Scope: social
    /// 
    /// Import achievement configuration from file. It will merge with existing achievement.
    /// Available import strategy:
    /// - leaveOut: if achievement with same key exist, the existing will be used and imported one will be ignored (default)
    /// - replace: if achievement with same key exist, the imported achievement will be used and existing one will be removed
    /// </summary>
    public class ImportAchievements : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static ImportAchievementsBuilder Builder = new ImportAchievementsBuilder();

        public class ImportAchievementsBuilder
            : OperationBuilder<ImportAchievementsBuilder>
        {



            public Stream? File { get; set; }

            public string? Strategy { get; set; }



            internal ImportAchievementsBuilder() { }




            public ImportAchievementsBuilder SetFile(Stream _file)
            {
                File = _file;
                return this;
            }

            public ImportAchievementsBuilder SetStrategy(string _strategy)
            {
                Strategy = _strategy;
                return this;
            }



            public ImportAchievements Build(
                string namespace_
            )
            {
                ImportAchievements op = new ImportAchievements(this,
                    namespace_                    
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;

                return op;
            }
        }

        private ImportAchievements(ImportAchievementsBuilder builder,
            string namespace_
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (builder.File is not null) FormParams["file"] = builder.File;
            if (builder.Strategy is not null) FormParams["strategy"] = builder.Strategy;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public ImportAchievements(
            string namespace_,            
            Stream? file,            
            string? strategy            
        )
        {
            PathParams["namespace"] = namespace_;
            
            
            if (file is not null) FormParams["file"] = file;
            if (strategy is not null) FormParams["strategy"] = strategy;

            
            
            

            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/achievement/v1/admin/namespaces/{namespace}/achievements/import";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "multipart/form-data" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";
        
        public Model.ServiceImportConfigResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {            
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                return JsonSerializer.Deserialize<Model.ServiceImportConfigResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ServiceImportConfigResponse>(payload);
            }
            
            var payloadString = Helper.ConvertInputStreamToString(payload);
            
            throw new HttpResponseException(code, payloadString);
        }
    }

}