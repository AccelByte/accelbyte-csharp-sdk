// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Gdpr.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Gdpr.Operation
{
    /// <summary>
    /// PublicSubmitMyAccountDeletionRequest
    ///
    /// 
    /// 
    /// Requires valid user access token
    /// 
    /// This is for in-game only and require a valid platformId and platform token. If a full account is not logged by 3rd platform, then please use /gdpr/public/namespaces/{namespace}/users/{userId}/deletions
    /// </summary>
    public class PublicSubmitMyAccountDeletionRequest : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static PublicSubmitMyAccountDeletionRequestBuilder Builder { get => new PublicSubmitMyAccountDeletionRequestBuilder(); }

        public class PublicSubmitMyAccountDeletionRequestBuilder
            : OperationBuilder<PublicSubmitMyAccountDeletionRequestBuilder>
        {





            internal PublicSubmitMyAccountDeletionRequestBuilder() { }






            public PublicSubmitMyAccountDeletionRequest Build(
                string platformId,
                string platformToken
            )
            {
                PublicSubmitMyAccountDeletionRequest op = new PublicSubmitMyAccountDeletionRequest(this,
                    platformId,
                    platformToken
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;

                return op;
            }
        }

        private PublicSubmitMyAccountDeletionRequest(PublicSubmitMyAccountDeletionRequestBuilder builder,
            string platformId,
            string platformToken
        )
        {


            if (platformId is not null) FormParams["platformId"] = platformId;
            if (platformToken is not null) FormParams["platformToken"] = platformToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public PublicSubmitMyAccountDeletionRequest(
            string platformId,
            string platformToken
        )
        {


            if (platformId is not null) FormParams["platformId"] = platformId;
            if (platformToken is not null) FormParams["platformToken"] = platformToken;





            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/gdpr/public/users/me/deletions";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "application/x-www-form-urlencoded" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelsRequestDeleteResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsRequestDeleteResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsRequestDeleteResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsRequestDeleteResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}