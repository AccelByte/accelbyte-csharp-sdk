// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.

using System.Net;
using System.IO;
using System.Text.Json;
using AccelByte.Sdk.Api.Gdpr.Model;
using AccelByte.Sdk.Core;
using AccelByte.Sdk.Core.Util;

namespace AccelByte.Sdk.Api.Gdpr.Operation
{
    /// <summary>
    /// S2SSubmitUserAccountDeletionRequest
    ///
    /// Scope: account
    /// 
    /// Submit user's account deletion request.
    /// 
    /// **Limitation:** This API only accepts requests with a publisher userId and does not support game userId requests at this time.
    /// 
    /// ---
    /// ## This API for S2S integration purpose only
    /// 
    /// **Notes:**
    /// 
    /// 1. This API will **not send GDPR email notification** both for player and admin notification.
    /// 2. This API will **perform account deletion immediately** without GDPR grace period (i.e. 28 days grace period).
    /// </summary>
    public class S2SSubmitUserAccountDeletionRequest : AccelByte.Sdk.Core.Operation
    {
        #region Builder Part
        public static S2SSubmitUserAccountDeletionRequestBuilder Builder { get => new S2SSubmitUserAccountDeletionRequestBuilder(); }

        public class S2SSubmitUserAccountDeletionRequestBuilder
            : OperationBuilder<S2SSubmitUserAccountDeletionRequestBuilder>
        {





            internal S2SSubmitUserAccountDeletionRequestBuilder() { }






            public S2SSubmitUserAccountDeletionRequest Build(
                string namespace_,
                string userId
            )
            {
                S2SSubmitUserAccountDeletionRequest op = new S2SSubmitUserAccountDeletionRequest(this,
                    namespace_,
                    userId
                );
                op.PreferredSecurityMethod = PreferredSecurityMethod;
                op.RequestJsonOptions = RequestJsonOptions;
                op.ResponseJsonOptions = ResponseJsonOptions;
                op.FlightId = FlightId;

                return op;
            }
        }

        private S2SSubmitUserAccountDeletionRequest(S2SSubmitUserAccountDeletionRequestBuilder builder,
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }
        #endregion

        public S2SSubmitUserAccountDeletionRequest(
            string namespace_,
            string userId
        )
        {
            PathParams["namespace"] = namespace_;
            PathParams["userId"] = userId;







            Securities.Add(AccelByte.Sdk.Core.Operation.SECURITY_BEARER);
        }

        public override string Path => "/gdpr/s2s/namespaces/{namespace}/users/{userId}/deletions";

        public override HttpMethod Method => HttpMethod.Post;

        public override string[] Consumes => new string[] { "*/*" };

        public override string[] Produces => new string[] { "application/json" };

        [Obsolete("2022-04-19 - Use 'Securities' property instead.")]
        public override string? Security { get; set; } = "Bearer";

        public Model.ModelsS2SRequestDeleteResponse? ParseResponse(HttpStatusCode code, string contentType, Stream payload)
        {
            if (code == (HttpStatusCode)204)
            {
                return null;
            }
            else if (code == (HttpStatusCode)201)
            {
                if (ResponseJsonOptions != null)
                    return JsonSerializer.Deserialize<Model.ModelsS2SRequestDeleteResponse>(payload, ResponseJsonOptions);
                else
                    return JsonSerializer.Deserialize<Model.ModelsS2SRequestDeleteResponse>(payload);
            }
            else if (code == (HttpStatusCode)200)
            {
                return JsonSerializer.Deserialize<Model.ModelsS2SRequestDeleteResponse>(payload, ResponseJsonOptions);
            }

            var payloadString = Helper.ConvertInputStreamToString(payload);

            throw new HttpResponseException(code, payloadString);
        }
    }

}