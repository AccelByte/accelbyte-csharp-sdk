// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Lobby.Model;
using AccelByte.Sdk.Api.Lobby.Operation;
using AccelByte.Sdk.Api.Lobby.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LobbyAdmin_OpExts
    {
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelGlobalConfiguration? Execute(
            this AdminGetGlobalConfig.AdminGetGlobalConfigBuilder builder
        )
        {
            AdminGetGlobalConfig op = builder.Build(
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminGetGlobalConfig(op);
        }
        public static async Task<Lobby.Model.ModelGlobalConfiguration?> ExecuteAsync(
            this AdminGetGlobalConfig.AdminGetGlobalConfigBuilder builder
        )
        {
            AdminGetGlobalConfig op = builder.Build(
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminGetGlobalConfigAsync(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelGlobalConfiguration? Execute(
            this AdminUpdateGlobalConfig.AdminUpdateGlobalConfigBuilder builder,
            ModelPutGlobalConfigurationRequest body
        )
        {
            AdminUpdateGlobalConfig op = builder.Build(
                body
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminUpdateGlobalConfig(op);
        }
        public static async Task<Lobby.Model.ModelGlobalConfiguration?> ExecuteAsync(
            this AdminUpdateGlobalConfig.AdminUpdateGlobalConfigBuilder builder,
            ModelPutGlobalConfigurationRequest body
        )
        {
            AdminUpdateGlobalConfig op = builder.Build(
                body
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminUpdateGlobalConfigAsync(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static string? Execute(
            this AdminDeleteGlobalConfig.AdminDeleteGlobalConfigBuilder builder
        )
        {
            AdminDeleteGlobalConfig op = builder.Build(
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminDeleteGlobalConfig(op);
        }
        public static async Task<string?> ExecuteAsync(
            this AdminDeleteGlobalConfig.AdminDeleteGlobalConfigBuilder builder
        )
        {
            AdminDeleteGlobalConfig op = builder.Build(
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).AdminDeleteGlobalConfigAsync(op);
        }
        public static void Execute(
            this FreeFormNotification.FreeFormNotificationBuilder builder,
            ModelFreeFormNotificationRequest body,
            string namespace_
        )
        {
            FreeFormNotification op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).FreeFormNotification(op);
        }
        public static async Task ExecuteAsync(
            this FreeFormNotification.FreeFormNotificationBuilder builder,
            ModelFreeFormNotificationRequest body,
            string namespace_
        )
        {
            FreeFormNotification op = builder.Build(
                body,
                namespace_
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).FreeFormNotificationAsync(op);
        }
        public static void Execute(
            this NotificationWithTemplate.NotificationWithTemplateBuilder builder,
            ModelNotificationWithTemplateRequest body,
            string namespace_
        )
        {
            NotificationWithTemplate op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).NotificationWithTemplate(op);
        }
        public static async Task ExecuteAsync(
            this NotificationWithTemplate.NotificationWithTemplateBuilder builder,
            ModelNotificationWithTemplateRequest body,
            string namespace_
        )
        {
            NotificationWithTemplate op = builder.Build(
                body,
                namespace_
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).NotificationWithTemplateAsync(op);
        }
        public static List<Lobby.Model.ModelTemplateResponse>? Execute(
            this GetGameTemplate.GetGameTemplateBuilder builder,
            string namespace_
        )
        {
            GetGameTemplate op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetGameTemplate(op);
        }
        public static async Task<List<Lobby.Model.ModelTemplateResponse>?> ExecuteAsync(
            this GetGameTemplate.GetGameTemplateBuilder builder,
            string namespace_
        )
        {
            GetGameTemplate op = builder.Build(
                namespace_
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetGameTemplateAsync(op);
        }
        public static void Execute(
            this CreateTemplate.CreateTemplateBuilder builder,
            ModelCreateTemplateRequest body,
            string namespace_
        )
        {
            CreateTemplate op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).CreateTemplate(op);
        }
        public static async Task ExecuteAsync(
            this CreateTemplate.CreateTemplateBuilder builder,
            ModelCreateTemplateRequest body,
            string namespace_
        )
        {
            CreateTemplate op = builder.Build(
                body,
                namespace_
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).CreateTemplateAsync(op);
        }
        public static Lobby.Model.ModelTemplateLocalizationResponse? Execute(
            this GetSlugTemplate.GetSlugTemplateBuilder builder,
            string namespace_,
            string templateSlug
        )
        {
            GetSlugTemplate op = builder.Build(
                namespace_,
                templateSlug
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetSlugTemplate(op);
        }
        public static async Task<Lobby.Model.ModelTemplateLocalizationResponse?> ExecuteAsync(
            this GetSlugTemplate.GetSlugTemplateBuilder builder,
            string namespace_,
            string templateSlug
        )
        {
            GetSlugTemplate op = builder.Build(
                namespace_,
                templateSlug
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetSlugTemplateAsync(op);
        }
        public static void Execute(
            this DeleteTemplateSlug.DeleteTemplateSlugBuilder builder,
            string namespace_,
            string templateSlug
        )
        {
            DeleteTemplateSlug op = builder.Build(
                namespace_,
                templateSlug
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).DeleteTemplateSlug(op);
        }
        public static async Task ExecuteAsync(
            this DeleteTemplateSlug.DeleteTemplateSlugBuilder builder,
            string namespace_,
            string templateSlug
        )
        {
            DeleteTemplateSlug op = builder.Build(
                namespace_,
                templateSlug
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).DeleteTemplateSlugAsync(op);
        }
        public static Lobby.Model.ModelTemplateLocalization? Execute(
            this GetLocalizationTemplate.GetLocalizationTemplateBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            GetLocalizationTemplate op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            return ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetLocalizationTemplate(op);
        }
        public static async Task<Lobby.Model.ModelTemplateLocalization?> ExecuteAsync(
            this GetLocalizationTemplate.GetLocalizationTemplateBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            GetLocalizationTemplate op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            return await ((Lobby.Wrapper.Admin)builder.WrapperObject!).GetLocalizationTemplateAsync(op);
        }
        public static void Execute(
            this UpdateLocalizationTemplate.UpdateLocalizationTemplateBuilder builder,
            ModelUpdateTemplateRequest body,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            UpdateLocalizationTemplate op = builder.Build(
                body,
                namespace_,
                templateLanguage,
                templateSlug
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).UpdateLocalizationTemplate(op);
        }
        public static async Task ExecuteAsync(
            this UpdateLocalizationTemplate.UpdateLocalizationTemplateBuilder builder,
            ModelUpdateTemplateRequest body,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            UpdateLocalizationTemplate op = builder.Build(
                body,
                namespace_,
                templateLanguage,
                templateSlug
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).UpdateLocalizationTemplateAsync(op);
        }
        public static void Execute(
            this DeleteTemplateLocalization.DeleteTemplateLocalizationBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            DeleteTemplateLocalization op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).DeleteTemplateLocalization(op);
        }
        public static async Task ExecuteAsync(
            this DeleteTemplateLocalization.DeleteTemplateLocalizationBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            DeleteTemplateLocalization op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).DeleteTemplateLocalizationAsync(op);
        }
        public static void Execute(
            this PublishTemplate.PublishTemplateBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            PublishTemplate op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            ((Lobby.Wrapper.Admin)builder.WrapperObject!).PublishTemplate(op);
        }
        public static async Task ExecuteAsync(
            this PublishTemplate.PublishTemplateBuilder builder,
            string namespace_,
            string templateLanguage,
            string templateSlug
        )
        {
            PublishTemplate op = builder.Build(
                namespace_,
                templateLanguage,
                templateSlug
            );

            await ((Lobby.Wrapper.Admin)builder.WrapperObject!).PublishTemplateAsync(op);
        }
    }
}