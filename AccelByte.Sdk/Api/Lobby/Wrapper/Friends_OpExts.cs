// Copyright (c) 2022 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Lobby.Model;
using AccelByte.Sdk.Api.Lobby.Operation;
using AccelByte.Sdk.Api.Lobby.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LobbyFriends_OpExts
    {
        public static List<Lobby.Model.ModelGetUserFriendsResponse>? Execute(
            this GetUserFriendsUpdated.GetUserFriendsUpdatedBuilder builder,
            string namespace_
        )
        {
            GetUserFriendsUpdated op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserFriendsUpdated(op);
        }
        public static List<Lobby.Model.ModelGetUserIncomingFriendsResponse>? Execute(
            this GetUserIncomingFriends.GetUserIncomingFriendsBuilder builder,
            string namespace_
        )
        {
            GetUserIncomingFriends op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserIncomingFriends(op);
        }
        public static List<Lobby.Model.ModelLoadIncomingFriendsWithTimeResponse>? Execute(
            this GetUserIncomingFriendsWithTime.GetUserIncomingFriendsWithTimeBuilder builder,
            string namespace_
        )
        {
            GetUserIncomingFriendsWithTime op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserIncomingFriendsWithTime(op);
        }
        public static List<Lobby.Model.ModelGetUserOutgoingFriendsResponse>? Execute(
            this GetUserOutgoingFriends.GetUserOutgoingFriendsBuilder builder,
            string namespace_
        )
        {
            GetUserOutgoingFriends op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserOutgoingFriends(op);
        }
        public static List<Lobby.Model.ModelLoadOutgoingFriendsWithTimeResponse>? Execute(
            this GetUserOutgoingFriendsWithTime.GetUserOutgoingFriendsWithTimeBuilder builder,
            string namespace_
        )
        {
            GetUserOutgoingFriendsWithTime op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserOutgoingFriendsWithTime(op);
        }
        public static Lobby.Model.ModelListBulkUserPlatformsResponse? Execute(
            this GetUserFriendsWithPlatform.GetUserFriendsWithPlatformBuilder builder,
            string namespace_
        )
        {
            GetUserFriendsWithPlatform op = builder.Build(
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetUserFriendsWithPlatform(op);
        }
        public static void Execute(
            this UserRequestFriend.UserRequestFriendBuilder builder,
            ModelUserRequestFriendRequest body,
            string namespace_
        )
        {
            UserRequestFriend op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserRequestFriend(op);
        }
        public static void Execute(
            this UserAcceptFriendRequest.UserAcceptFriendRequestBuilder builder,
            ModelUserAcceptFriendRequest body,
            string namespace_
        )
        {
            UserAcceptFriendRequest op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserAcceptFriendRequest(op);
        }
        public static void Execute(
            this UserCancelFriendRequest.UserCancelFriendRequestBuilder builder,
            ModelUserCancelFriendRequest body,
            string namespace_
        )
        {
            UserCancelFriendRequest op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserCancelFriendRequest(op);
        }
        public static void Execute(
            this UserRejectFriendRequest.UserRejectFriendRequestBuilder builder,
            ModelUserRejectFriendRequest body,
            string namespace_
        )
        {
            UserRejectFriendRequest op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserRejectFriendRequest(op);
        }
        public static Lobby.Model.ModelUserGetFriendshipStatusResponse? Execute(
            this UserGetFriendshipStatus.UserGetFriendshipStatusBuilder builder,
            string friendId,
            string namespace_
        )
        {
            UserGetFriendshipStatus op = builder.Build(
                friendId,
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserGetFriendshipStatus(op);
        }
        public static void Execute(
            this UserUnfriendRequest.UserUnfriendRequestBuilder builder,
            ModelUserUnfriendRequest body,
            string namespace_
        )
        {
            UserUnfriendRequest op = builder.Build(
                body,
                namespace_
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).UserUnfriendRequest(op);
        }
        public static void Execute(
            this AddFriendsWithoutConfirmation.AddFriendsWithoutConfirmationBuilder builder,
            ModelBulkFriendsRequest body,
            string namespace_,
            string userId
        )
        {
            AddFriendsWithoutConfirmation op = builder.Build(
                body,
                namespace_,
                userId
            );

            ((Lobby.Wrapper.Friends)builder.WrapperObject!).AddFriendsWithoutConfirmation(op);
        }
        public static Lobby.Model.ModelBulkFriendsResponse? Execute(
            this BulkDeleteFriends.BulkDeleteFriendsBuilder builder,
            ModelBulkFriendsRequest body,
            string namespace_,
            string userId
        )
        {
            BulkDeleteFriends op = builder.Build(
                body,
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).BulkDeleteFriends(op);
        }
        public static List<Lobby.Model.ModelNativeFriendSyncResponse>? Execute(
            this SyncNativeFriends.SyncNativeFriendsBuilder builder,
            List<ModelNativeFriendRequest> body,
            string namespace_
        )
        {
            SyncNativeFriends op = builder.Build(
                body,
                namespace_
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).SyncNativeFriends(op);
        }
        public static Lobby.Model.ModelGetFriendsResponse? Execute(
            this GetListOfFriends.GetListOfFriendsBuilder builder,
            string namespace_,
            string userId
        )
        {
            GetListOfFriends op = builder.Build(
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetListOfFriends(op);
        }
        public static Lobby.Model.ModelLoadIncomingFriendsWithTimeResponse? Execute(
            this GetIncomingFriendRequests.GetIncomingFriendRequestsBuilder builder,
            string namespace_,
            string userId
        )
        {
            GetIncomingFriendRequests op = builder.Build(
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetIncomingFriendRequests(op);
        }
        public static Lobby.Model.ModelLoadOutgoingFriendsWithTimeResponse? Execute(
            this GetOutgoingFriendRequests.GetOutgoingFriendRequestsBuilder builder,
            string namespace_,
            string userId
        )
        {
            GetOutgoingFriendRequests op = builder.Build(
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Friends)builder.WrapperObject!).GetOutgoingFriendRequests(op);
        }
    }
}