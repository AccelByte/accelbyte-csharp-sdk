// Copyright (c) 2022-2024 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

// This code is generated by tool. DO NOT EDIT.
using AccelByte.Sdk.Api.Lobby.Model;
using AccelByte.Sdk.Api.Lobby.Operation;
using AccelByte.Sdk.Api.Lobby.Wrapper;
using AccelByte.Sdk.Core;

namespace AccelByte.Sdk.Api
{
    public static class LobbyParty_OpExts
    {
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelsPartyData? Execute(
            this AdminGetPartyDataV1.AdminGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            AdminGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetPartyDataV1(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData?> ExecuteAsync(
            this AdminGetPartyDataV1.AdminGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            AdminGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetPartyDataV1Async(op);
        }

        public static Lobby.Model.ModelsPartyData<T1>? Execute<T1>(
            this AdminGetPartyDataV1.AdminGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            AdminGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetPartyDataV1<T1>(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData<T1>?> ExecuteAsync<T1>(
            this AdminGetPartyDataV1.AdminGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            AdminGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetPartyDataV1Async<T1>(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelsPartyData? Execute(
            this AdminGetUserPartyV1.AdminGetUserPartyV1Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserPartyV1 op = builder.Build(
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetUserPartyV1(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData?> ExecuteAsync(
            this AdminGetUserPartyV1.AdminGetUserPartyV1Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserPartyV1 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetUserPartyV1Async(op);
        }

        public static Lobby.Model.ModelsPartyData<T1>? Execute<T1>(
            this AdminGetUserPartyV1.AdminGetUserPartyV1Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserPartyV1 op = builder.Build(
                namespace_,
                userId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetUserPartyV1<T1>(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData<T1>?> ExecuteAsync<T1>(
            this AdminGetUserPartyV1.AdminGetUserPartyV1Builder builder,
            string namespace_,
            string userId
        )
        {
            AdminGetUserPartyV1 op = builder.Build(
                namespace_,
                userId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).AdminGetUserPartyV1Async<T1>(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelsPartyData? Execute(
            this PublicGetPartyDataV1.PublicGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            PublicGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicGetPartyDataV1(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData?> ExecuteAsync(
            this PublicGetPartyDataV1.PublicGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            PublicGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicGetPartyDataV1Async(op);
        }

        public static Lobby.Model.ModelsPartyData<T1>? Execute<T1>(
            this PublicGetPartyDataV1.PublicGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            PublicGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicGetPartyDataV1<T1>(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData<T1>?> ExecuteAsync<T1>(
            this PublicGetPartyDataV1.PublicGetPartyDataV1Builder builder,
            string namespace_,
            string partyId
        )
        {
            PublicGetPartyDataV1 op = builder.Build(
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicGetPartyDataV1Async<T1>(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static Lobby.Model.ModelsPartyData? Execute(
            this PublicUpdatePartyAttributesV1.PublicUpdatePartyAttributesV1Builder builder,
            ModelsPartyPUTCustomAttributesRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicUpdatePartyAttributesV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicUpdatePartyAttributesV1(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData?> ExecuteAsync(
            this PublicUpdatePartyAttributesV1.PublicUpdatePartyAttributesV1Builder builder,
            ModelsPartyPUTCustomAttributesRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicUpdatePartyAttributesV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicUpdatePartyAttributesV1Async(op);
        }

        public static Lobby.Model.ModelsPartyData<T1>? Execute<T1>(
            this PublicUpdatePartyAttributesV1.PublicUpdatePartyAttributesV1Builder builder,
            ModelsPartyPUTCustomAttributesRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicUpdatePartyAttributesV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            return ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicUpdatePartyAttributesV1<T1>(op);
        }
        public static async Task<Lobby.Model.ModelsPartyData<T1>?> ExecuteAsync<T1>(
            this PublicUpdatePartyAttributesV1.PublicUpdatePartyAttributesV1Builder builder,
            ModelsPartyPUTCustomAttributesRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicUpdatePartyAttributesV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            return await ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicUpdatePartyAttributesV1Async<T1>(op);
        }
        [Obsolete(DiagnosticId = "ab_deprecated_operation_wrapper")]
        public static void Execute(
            this PublicSetPartyLimitV1.PublicSetPartyLimitV1Builder builder,
            ModelsPartyPUTLimitSizeRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicSetPartyLimitV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicSetPartyLimitV1(op);
        }
        public static async Task ExecuteAsync(
            this PublicSetPartyLimitV1.PublicSetPartyLimitV1Builder builder,
            ModelsPartyPUTLimitSizeRequest body,
            string namespace_,
            string partyId
        )
        {
            PublicSetPartyLimitV1 op = builder.Build(
                body,
                namespace_,
                partyId
            );

            await ((Lobby.Wrapper.Party)builder.WrapperObject!).PublicSetPartyLimitV1Async(op);
        }
    }
}